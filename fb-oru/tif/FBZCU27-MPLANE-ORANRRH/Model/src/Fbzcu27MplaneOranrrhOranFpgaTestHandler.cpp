/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Fbzcu27MplaneOranrrhOranFpgaTestHandler.cpp
 * \brief     Test methods for Fbzcu27-MPLANE-ORANRRH
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->

 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "Fbzcu27MplaneOranrrhOranFpgaTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/oran-fpga", "FPGA device", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/dstMac",
			"UINT{0..65535} index,STRING mac",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set destination MAC",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/getDstMac",
			"UINT{0..65535} index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING mac",
			"Get destination MAC as '-' separated pairs of hex digits",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/getRtcId",
			"UINT{0..65535} index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],UINT{0..1048575} id",
			"Get ID",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/getSrcMac",
			"UINT{0..65535} index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING mac",
			"Get source MAC as '-' separated pairs of hex digits",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/getUplaneTag",
			"UINT{0..65535} index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],UINT{0..65535} tag",
			"Get vlan tag for U-plane",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/getVlanEnable",
			"UINT{0..65535} index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],BOOL enable",
			"Get vlan enable",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/rtcId",
			"UINT{0..65535} index,UINT{0..1048575} id",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set ID",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/srcMac",
			"UINT{0..65535} index,STRING mac",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set source MAC",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/uplaneTag",
			"UINT{0..65535} index,UINT{0..65535} tag",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set vlan tag for U-plane",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Fbzcu27MplaneOranrrhOranFpgaTestHandler("/oran-fpga/vlanEnable",
			"UINT{0..65535} index,BOOL enable",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set vlan enable",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
Fbzcu27MplaneOranrrhOranFpgaTestHandler::Fbzcu27MplaneOranrrhOranFpgaTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(OranFpgaTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
Fbzcu27MplaneOranrrhOranFpgaTestHandler::Fbzcu27MplaneOranrrhOranFpgaTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(OranFpgaTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
Fbzcu27MplaneOranrrhOranFpgaTestHandler::~Fbzcu27MplaneOranrrhOranFpgaTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool Fbzcu27MplaneOranrrhOranFpgaTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string Fbzcu27MplaneOranrrhOranFpgaTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "dstMac")
    {
        dstMac( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getDstMac")
    {
        getDstMac( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getRtcId")
    {
        getRtcId( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getSrcMac")
    {
        getSrcMac( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getUplaneTag")
    {
        getUplaneTag( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getVlanEnable")
    {
        getVlanEnable( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "rtcId")
    {
        rtcId( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "srcMac")
    {
        srcMac( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "uplaneTag")
    {
        uplaneTag( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "vlanEnable")
    {
        vlanEnable( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::dstMac(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// * STRING mac
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->dstMac( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::getDstMac(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING mac
	//
	mHelper->getDstMac( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::getRtcId(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * UINT{0..1048575} id
	//
	mHelper->getRtcId( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::getSrcMac(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING mac
	//
	mHelper->getSrcMac( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::getUplaneTag(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * UINT{0..65535} tag
	//
	mHelper->getUplaneTag( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::getVlanEnable(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL enable
	//
	mHelper->getVlanEnable( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::rtcId(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// * UINT{0..1048575} id
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->rtcId( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::srcMac(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// * STRING mac
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->srcMac( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::uplaneTag(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// * UINT{0..65535} tag
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->uplaneTag( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Fbzcu27MplaneOranrrhOranFpgaTestHandler::vlanEnable(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..65535} index
	// * BOOL enable
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->vlanEnable( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
