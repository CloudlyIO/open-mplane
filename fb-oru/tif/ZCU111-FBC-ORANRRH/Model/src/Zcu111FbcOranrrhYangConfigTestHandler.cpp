/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Zcu111FbcOranrrhYangConfigTestHandler.cpp
 * \brief     Test methods for ZCU111-FBC-ORANRRH
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->

 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "Zcu111FbcOranrrhYangConfigTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/oran/yangConfig", "Yang Configuration", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111FbcOranrrhYangConfigTestHandler("/oran/yangConfig/getSupportedModules",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING Modules",
			"List the supported YANG modules in the configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111FbcOranrrhYangConfigTestHandler("/oran/yangConfig/listConfigTree",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING List",
			"List the entire contents of the configuration tree",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/CompanyName", "STRING",
			"The company name that produced the configuration that is loaded",
			CompanyNameGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/ConfigStatus", "BOOL(UNLOADED:LOADED)",
			"Is the YANG configuration loaded?",
			ConfigStatusGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/FormatVersion", "STRING",
			"The XML format version of configuration that is loaded",
			FormatVersionGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/ORANversion", "STRING",
			"The ORAN version of configuration that is loaded",
			ORANversionGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/ProductName", "STRING",
			"The product name of configuration that is loaded",
			ProductNameGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/VariantName", "STRING",
			"The variant name of configuration that is loaded",
			VariantNameGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/oran/yangConfig/YANGversion", "STRING",
			"The YANG version of configuration that is loaded",
			YANGversionGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
Zcu111FbcOranrrhYangConfigTestHandler::Zcu111FbcOranrrhYangConfigTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(YangConfigTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
Zcu111FbcOranrrhYangConfigTestHandler::Zcu111FbcOranrrhYangConfigTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(YangConfigTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
Zcu111FbcOranrrhYangConfigTestHandler::~Zcu111FbcOranrrhYangConfigTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool Zcu111FbcOranrrhYangConfigTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string Zcu111FbcOranrrhYangConfigTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "getSupportedModules")
    {
        getSupportedModules( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "listConfigTree")
    {
        listConfigTree( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::getSupportedModules(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING Modules
	//
	mHelper->getSupportedModules( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::listConfigTree(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING List
	//
	mHelper->listConfigTree( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::CompanyNameGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/CompanyName"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->CompanyNameGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::ConfigStatusGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/ConfigStatus"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->ConfigStatusGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::FormatVersionGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/FormatVersion"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->FormatVersionGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::ORANversionGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/ORANversion"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->ORANversionGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::ProductNameGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/ProductName"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->ProductNameGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::VariantNameGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/VariantName"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->VariantNameGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111FbcOranrrhYangConfigTestHandler::YANGversionGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/oran/yangConfig/YANGversion"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<YangConfigTestHelper> helper(YangConfigTestHelper::getInstance()) ;
	helper->YANGversionGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
