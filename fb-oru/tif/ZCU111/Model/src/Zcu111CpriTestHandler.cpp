/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Zcu111CpriTestHandler.cpp
 * \brief     Test methods for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->

 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "Zcu111CpriTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/cpri", "CPRI Interface functions", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/get",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT Index,INT sfpLineRate (Mbps),BOOL(NO:YES) sfpFitted,STRING sfpVendor,STRING sfpPart,FLOAT sfpRxPower,FLOAT sfpTxPower,STRING lineRate,BOOL(NO:YES) los,BOOL(NO:YES) lof,ENUM(RESET:ATTEMPTING_L1_SYNCH:PROTOCOL_VERSION_SETUP:CM_PARAM_SETUP:PASSIVE_MODE:OPERATIONAL) state,INT prefEtherPtr,INT currEtherPtr,BOOL(NO:YES) active,BOOL(NO:YES) sapDefect,BOOL(NO:YES) remoteAlarm,BOOL(NO:YES) remoteLOS,BOOL(NO:YES) remoteLOF,BOOL(NO:YES) pllLock,BOOL(NO:YES) txClockLock,BOOL(NO:YES) rxClockLock,ENUM(SLAVE:MASTER) mode,BOOL(NO:YES) coreInReset",
			"Get current CPRI parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/getRxBitWidth",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT bitwidth",
			"Get Rx CPRI bit width",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/getTxBitWidth",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT bitwidth",
			"Get Tx CPRI bit width",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/getWaitSamples",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT waitSamples",
			"Get the number of unused samples in between valid ones",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/reset",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Reset this CPRI port hardware",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/restart",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Restart the state machine on this CPRI port (also does a hardware reset of the port)",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/set",
			"INT{0..${MAX_FIBRE}} Index,ENUM(AUTO:614.4:1228.8:2457.6:3072.0:4915.2:6144.0:9830.4:10137.6) lineRate (Mbps)",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set CPRI parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/setRate",
			"INT{0..${MAX_FIBRE}} Index,ENUM(AUTO:1:2:3:4:5:6:7:8) rate",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set CPRI line rate",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/setRxBitWidth",
			"INT{0..${MAX_FIBRE}} Index,INT{12..16} bitwidth",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set Rx CPRI bit width",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/setTxBitWidth",
			"INT{0..${MAX_FIBRE}} Index,INT{12..16} bitwidth",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set Tx CPRI bit width",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/setWaitSamples",
			"INT{0..${MAX_FIBRE}} Index,INT{0..15} waitSamples",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set the number of unused samples in between valid ones, set to 0 for consecutive samples ",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/showAll",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show current status of all CPRI ports and cores",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/showCtl",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show status info of the CPRI controller",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new Zcu111CpriTestHandler("/cpri/showPort",
			"INT{0..${MAX_FIBRE}} Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show details of a CPRI port",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/cpri/NumPorts", "INT",
			"Number of ports",
			NumPortsGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
Zcu111CpriTestHandler::Zcu111CpriTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(CpriTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
Zcu111CpriTestHandler::Zcu111CpriTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(CpriTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
Zcu111CpriTestHandler::~Zcu111CpriTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool Zcu111CpriTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string Zcu111CpriTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "get")
    {
        get( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getRxBitWidth")
    {
        getRxBitWidth( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getTxBitWidth")
    {
        getTxBitWidth( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getWaitSamples")
    {
        getWaitSamples( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reset")
    {
        reset( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "restart")
    {
        restart( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setRate")
    {
        setRate( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setRxBitWidth")
    {
        setRxBitWidth( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setTxBitWidth")
    {
        setTxBitWidth( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setWaitSamples")
    {
        setWaitSamples( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showAll")
    {
        showAll( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showCtl")
    {
        showCtl( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showPort")
    {
        showPort( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::get(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT Index
	// * INT sfpLineRate (Mbps)
	// * BOOL(NO:YES) sfpFitted
	// * STRING sfpVendor
	// * STRING sfpPart
	// * FLOAT sfpRxPower
	// * FLOAT sfpTxPower
	// * STRING lineRate
	// * BOOL(NO:YES) los
	// * BOOL(NO:YES) lof
	// * ENUM(RESET:ATTEMPTING_L1_SYNCH:PROTOCOL_VERSION_SETUP:CM_PARAM_SETUP:PASSIVE_MODE:OPERATIONAL) state
	// * INT prefEtherPtr
	// * INT currEtherPtr
	// * BOOL(NO:YES) active
	// * BOOL(NO:YES) sapDefect
	// * BOOL(NO:YES) remoteAlarm
	// * BOOL(NO:YES) remoteLOS
	// * BOOL(NO:YES) remoteLOF
	// * BOOL(NO:YES) pllLock
	// * BOOL(NO:YES) txClockLock
	// * BOOL(NO:YES) rxClockLock
	// * ENUM(SLAVE:MASTER) mode
	// * BOOL(NO:YES) coreInReset
	//
	mHelper->get( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::getRxBitWidth(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT bitwidth
	//
	mHelper->getRxBitWidth( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::getTxBitWidth(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT bitwidth
	//
	mHelper->getTxBitWidth( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::getWaitSamples(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT waitSamples
	//
	mHelper->getWaitSamples( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::reset(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reset( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::restart(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->restart( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// * ENUM(AUTO:614.4:1228.8:2457.6:3072.0:4915.2:6144.0:9830.4:10137.6) lineRate (Mbps)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::setRate(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// * ENUM(AUTO:1:2:3:4:5:6:7:8) rate
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setRate( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::setRxBitWidth(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// * INT{12..16} bitwidth
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setRxBitWidth( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::setTxBitWidth(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// * INT{12..16} bitwidth
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setTxBitWidth( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::setWaitSamples(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// * INT{0..15} waitSamples
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setWaitSamples( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::showAll(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showAll( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::showCtl(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showCtl( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::showPort(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{0..${MAX_FIBRE}} Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showPort( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void Zcu111CpriTestHandler::NumPortsGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/cpri/NumPorts"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<CpriTestHelper> helper(CpriTestHelper::getInstance()) ;
	helper->NumPortsGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
