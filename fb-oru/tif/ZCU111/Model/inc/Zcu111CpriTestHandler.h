/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Zcu111CpriTestHandler.h
 * \brief     Test methods for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __ZCU111CPRITESTHANDLER__H_
#define __ZCU111CPRITESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "CpriTestHelper.h"
#include "ITif.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class Zcu111CpriTestHandler: public virtual ITifEntry, public EntryFunc
{
public:

	Zcu111CpriTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~Zcu111CpriTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

	/**
	 * Special constructor - only to be used for calling the static registerMethods()
	 */
	Zcu111CpriTestHandler();

	/**
	 * Called by ITif::inject() to get this object to add it's entries
	 * @param tif
	 * @return true if ok
	 */
	virtual bool registerEntry(ITif* tif) override ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   INT Index
	 *   INT sfpLineRate (Mbps)
	 *   BOOL(NO:YES) sfpFitted
	 *   STRING sfpVendor
	 *   STRING sfpPart
	 *   FLOAT sfpRxPower
	 *   FLOAT sfpTxPower
	 *   STRING lineRate
	 *   BOOL(NO:YES) los
	 *   BOOL(NO:YES) lof
	 *   ENUM(RESET:ATTEMPTING_L1_SYNCH:PROTOCOL_VERSION_SETUP:CM_PARAM_SETUP:PASSIVE_MODE:OPERATIONAL) state
	 *   INT prefEtherPtr
	 *   INT currEtherPtr
	 *   BOOL(NO:YES) active
	 *   BOOL(NO:YES) sapDefect
	 *   BOOL(NO:YES) remoteAlarm
	 *   BOOL(NO:YES) remoteLOS
	 *   BOOL(NO:YES) remoteLOF
	 *   BOOL(NO:YES) pllLock
	 *   BOOL(NO:YES) txClockLock
	 *   BOOL(NO:YES) rxClockLock
	 *   ENUM(SLAVE:MASTER) mode
	 *   BOOL(NO:YES) coreInReset
	 *
	 */
	void get( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   INT bitwidth
	 *
	 */
	void getRxBitWidth( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   INT bitwidth
	 *
	 */
	void getTxBitWidth( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   INT waitSamples
	 *
	 */
	void getWaitSamples( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void reset( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void restart( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *   ENUM(AUTO:614.4:1228.8:2457.6:3072.0:4915.2:6144.0:9830.4:10137.6) lineRate (Mbps)
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void set( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *   ENUM(AUTO:1:2:3:4:5:6:7:8) rate
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setRate( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *   INT{12..16} bitwidth
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setRxBitWidth( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *   INT{12..16} bitwidth
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setTxBitWidth( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *   INT{0..15} waitSamples
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setWaitSamples( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void showAll( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void showCtl( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT{0..${MAX_FIBRE}} Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void showPort( DataVariantList *callList, DataVariantList *returnList );



	/**
	 * Getter method for read-only variable NumPorts
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void NumPortsGet(  const std::string& pathname, DataVariantList *returnList ) ;




// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<CpriTestHelper> mHelper ;
};



} // Mplane

#endif /* __ZCU111CPRITESTHANDLER__H_*/
