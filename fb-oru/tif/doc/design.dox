/*-?|tif documentation|sprice|c0|?*//*-?|tif documentation|sprice|c1|?*//*-?|tif documentation|sprice|c2|?*//*-?|tif documentation|gdurban|c0|?*//*-?|tif documentation|gdurban|c1|?*/
/**
\mainpage Test Interface
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section tif_scope Scope
<hr>

This document is intended to provide an overview of the Test Interface and
the source code generator used to maintain a common interface between internal
and external developers and testers.

<hr>
\section tif_overview	Overview
<hr>

This object design overview describes the structure of the RTI and the configuration
files that it is dependant upon.

<hr>
\section tif_usage	User Interface
<hr>

\subsection tif_usage_connecting	Connecting To The Interface
<hr>

To access the test interface console, telnet into port 49500, i.e.:

@code
$ telnet <RRH IP> 49500
@endcode

If you're already connected to the machine running the application then you can telnet to locahost:

@code
$ telnet locahost 49500
@endcode

\subsection tif_usage_overview	Usage Overview
<hr>

The user interface presents a simple two level "directory": The top-level directory contains all of the devices that
can be used in the test interface. This list will consist of common devices along with (possibly) devices that are
specific to the particular board.

Each device represents a model of that class within the software, and usually represents some physical device (or group of
registers used to control a device, for example a carrier). There are also special devices which can be used for testing.

Each device behaves like a "directory", each containing a group of commands that can be performed on that device.

Note that the command prompt will also indicate whether you are at the top level or inside a device. The top level prompt
is '->', whereas the device prompt is of the form 'fpga->'.

Device names are case insensitive so that they can be typed all lowercase to make lab use easier.

Directories starting 'tif:' are used for the test interface (settings, scripts etc) rather than representing any device.

Similarly, any board-specific devices will be prefixed by the board name. For example, the carrier hardware information
on an ETNA board may be via a device named 'ETNA:carrierHardware'.


\subsection tif_usage_navigation Navigating
<hr>

The following commands can be used to navigate the device directory structure:

\li <b>help</b> - At any level, running 'help' shows help information
\li <b>cd</b> - Used either as a stand alone command 'cd' to return to the top level directory, or with a device name
(e.g. cd fpga) to change into that device directory
\li <b>ls</b> - Similar to help, but less verbose. Just shows a list of the entries in the directory along with a one line
comment. When displayed by 'ls', devices are shown with a trailing '/' ; whereas commands are shown plain.
\li <b>su</b> - Sets or displays the current session mode. Enabling 'super user' mode allows access to hidden commands.

Some example navigation commands and their output are shown below:

@code
->help
Radio Test Interface Help

Commands:
        help - display this help page
        help <name> - display help for a specific test interface handler name
        cd <name> - enter a test interface handler for direct access to functions
        cd - return to the root of the test interface
        exit - close the test interface client connection

Available Test Interfaces:
        fpga
        system
        tif:scripts
->ls
fpga/			fpga device
system/			system device
tif:scripts/ 	test scripts
tif:settings/ 	test interface settings

->cd fpga
cd to test interface: fpga
/fpga->help


Commands:
    cd - Change directory to specified directory or to top level
    help - Show general help or help on a specific item
    ls - Display contents of current or specified directory


Available Test Functions:
    monitor - Monitor fpga register
        call variables:
            BOOL(OFF:ON) enable,INT Offset,INT port,[INT mask]
        return variables:
            ENUM(OK:ERROR) Status,[STRING Info],[STRING Message]
    read - Read fpga register
        call variables:
            INT Offset,[INT Count]
        return variables:
            ENUM(OK:ERROR) Status,[STRING Info],[STRING Message],HEXINT[] Hex
    write - Write fpga register
        call variables:
            INT Offset,INT WriteValue
        return variables:
            ENUM(OK:ERROR) Status,[STRING Info],[STRING Message]

Status=OK
/->ls fpga

monitor(BOOL(OFF:ON) enable,INT Offset,INT port,[INT mask]) # Monitor fpga register
read(INT Offset,[INT Count])                                # Read fpga register
write(INT Offset,INT WriteValue)                            # Write fpga register

Status=OK

fpga->cd
cd returned to the root of the test interface directory
->

@endcode

\subsection tif_usage_su Super User Mode
<hr>

Certain commands are stored in hidden directories because casual use can cause hardware failure. In order to access these
hidden directories the session must be put into 'super user' mode via this command, using the required password.

You can see if the session is currently in super user mode by running 'su' with no arguments:

@code
/->su
Normal user mode
Status=OK
/->
@endcode

In 'normal' mode you cannot access any hidden directories (which behave as if they don't exist):

@code
/->cd /.axis
Error: Cannot change to directory /.axis
Status=ERROR
/->
@endcode

Specifying the 'su' command with the valid password puts the session in super user mode:

@code
/->su *****************
Entered super user mode
Status=OK
/#->
@endcode

and now you can access hidden directories:

@code
/#->cd /.axis
Current directory: /.axis
Status=OK
/.axis#->
@endcode

Note that the other indicator of super user mode is the addition of the '#' just before the '->' prompt.

Access to the super user password is via the Chief Software Engineer.


\subsection tif_usage_exec Executing Commands
<hr>

To execute a command you can either cd to the device then run the command, or specify the device as part of the command
name.

For example:

@code
->fpga.write 0x1234 0x5678
@endcode

is equivalent to:

@code
->cd fpga
fpga->write 0x1234 0x5678
@endcode

Note that the available command names depend on the current working directory. If you cd to a subdirectory you will not be
able to see commands at the top level. In order to run these commands, prefix the name with '.' (which then makes the
command name an 'absolute path'). If you get into the habit of always using the '.' prefix then the absolute command name
will always work in whatever working directory you are in:

For example:

@code
->.fpga.write 0x1234 0x5678
@endcode


\subsection tif_usage_args Command Arguments
<hr>

Commands show in their help the arguments they expect and the order in which they expect them. Commands can be called
with either the arguments position dependent (i.e. without argument names) or as name/value pairs in any order:

@code
->fpga.write 0x1234 0x5678
@endcode

is equivalent to:

@code
->fpga.write value=0x5678 offset=0x1234
@endcode

Obviously position dependent calling is simpler for small numbers of arguments, but the name/value pairs approach is
easier as the number of arguments rises.

The interface checks that all of the required arguments have been specified and that they are in the correct format (e.g.
an INT argument has been set with an integer value rather than a string).

Integers can be specified either as decimal or a hex value starting '0x'. The command will be defined to report return
values as either decimal or hex.

NOTE: Like the device names, argument names are case insensitive.

\subsection tif_usage_vars Variable Functions
<hr>

The tif XML specification allows for the definition of special accessor functions which can either get or set a single
value in the system. When the 'ls' command is run on these they show the variable name and current value:

@code
->ls /tif:settings
showColumn=false				# Display variable/value pairs one per line in a column
showInfo=false					# Show extra command/response information
...
@endcode

You can display a single value by executing it's name:

@code
->.tif:settings.showInfo
Status=OK Value=false
@endcode

And you can set the value by executing it with a single argument:

@code
->.tif:settings.showInfo true
Status=OK Value=true
@endcode


\subsection tif_usage_settings Test Interface Settings
<hr>

One of the directories 'tif:settings' is used to change the behaviour of the test interface. Note that this will only
change the settings for the current instance of the test interface; it will not affect the settings of any other connected
session.

The intent of this area is to allow the test interface to be set up to make human interaction easier, while also allowing
a machine connection the facility to set the interface for ease of parsing.

An example of this is being able to set an option to output a long list of name/value pairs in a column format rather
than one long line (a carrier has a large number of parameters for example).

The defaults will be set for human connection ; a machine connecting can be configured to change the settings when it
connects.

The set of supported settings are:

\li showColumn - Enable to display the replies in a column, one var/val per line
\li formatVarVal - (column mode) Enable to format variable/value for ease of viewing
\li scriptsDir - Test scripts directory path
\li showInfo - Enable to show extra info in command replies
\li varValChar - (format column mode) Set to the variable space char
\li timestamp - Timestamp prompt with execution time of last command


\subsection tif_usage_history History / TAB Completion
<hr>

When a telnet session is started up on the test interface, the interface initially negotiates with the telnet client to
put it into character mode. If sucessful, this allows you to access the history and TAB completion.

Every command you run is added to a ciruclar history buffer (i.e. it is a fixed length buffer that fills up and when the
newest command is added, the oldest command is removed). You can cycle through this history using the up and down arrows.

The command line can be editied using the normal backspace, delete, home, end, left, and right arrows.

While you are typing, hitting TAB will auto-complete the command if there is a matching unique command that starts with
the characters you've typed so far. If there are multiple alternatives, hitting TAB a second time will list them.


\subsection tif_usage_script Executing Scripts
<hr>

Rather than having to retype commands in a lab test environment, you can store scripts on the RRH in the flash directory
'/nandflash/tif/scripts'. This directory may be changed via the .tif:settings.scriptsDir variable.

On the test interface these scripts will then be available under the 'tif:scripts' directory.
If the script text file starts with a comment, that comment will be used in the 'ls' display:

@code
->ls /tif:scripts
carrier_test		Simple single carrier set up test
cpri_test			Report the CPRI state on both fibres

->
@endcode

The above listing was created by the tests having a one-line comment at the start of the file. For example, carrier_test
test file starts:

@code
# Simple single carrier set up test
# Sets up a 10MHz UL/DL carrier on antenna 1
carrier.set ....
@endcode

A test script consists of comments (lines begining with the '#' comment character), whitespace lines (which are ignored),
or any of the commands available through the test interface.

While the test is executed, the test interface changes the prompt to the current test file being run until the script
is complete. A final status is shown, showing whether the script ran sucessfully or not. For example:

@code
->.tif:scripts.carrier_test
[carrier_test]->carrier.set...
->STATUS=OK
[carrier_test]->carrier.set...
->STATUS=OK
..
->STATUS=0
->
@endcode

The script will run to completion unless any of the commands fails. On failure the script will terminate
immediately with a non-zero status.

\subsection tif_usage_script_dir Script Organisation
<hr>

Test script files stored in the TBD directory must have the extension '.tsf' for the test interface to recognise them as
a test script.

Test scripts can be further organised by placing them within their own subdirectories. The test interface will read these
subdirectories and incorporate the name into the command.

For example, the test directory contents:

@code
test1.tsf
test2.tsf
carrier/
	test1.tsf
	test2.tsf
synth/
	test1.tsf
@endcode

Will produce the listing:

@code
->ls /tif:scripts
test1
test2
carrier.test1
carrier.test2
synth.test1

->
@endcode

Note that the directory contents are scanned once at start up, and will only be updated when an 'ls' of the tif:scripts
directory is performed. So you must remember to ls the directory if you add new test files.


\subsection tif_usage_script_stat Command Response
<hr>

Every command (including the built-in commands) will respond with the 'Status' enumerated variable. This can take the
values:

\li <b>OK</b> - Command completed successfully
\li <b>ERROR</b> - Command failed

If the command fails for any reason, a string variable 'Message' will be shown with the error message.

Also, if the command has extra information to report (if, for example, the test reporting level is set to verbose) then
the 'Info' string will also be shown containing the information.


\subsection tif_usage_tcp_ports Using TCP Ports
<hr>

Where output/replies are asynchronous, it is useful to be able to open a separate TCP stream and direct that output
to the stream. The .system.tcp commands are provided for opening, closing, and displaying TCP ports.

Ports are opened by:

@code
->.system.tcp.open 49510 3
Status=OK
/->.system.tcp.open 49511
Status=OK
/->.system.tcp.open 49512
Status=OK
/->.system.tcp.show
Status=OK Info="
Port   Type   Inst   Connection
49510  OUT    1/3    ---
49510  OUT    2/3    ---
49510  OUT    3/3    ---
49511  OUT    1/1    ---
49512  OUT    1/1    ---
"
/->

@endcode

You specify the port number with an optional maximum number of client connections (the default is 1).

Once opened a port can be connected to (using, for example, telnet) by a number of clients, up to the maximum number specified when
the port was opened.

If a port has been opened the can serve more than one client, any output sent to that port by the application will be sent to all connected
clients.

Ports are closed using:

@code
->.system.tcp.close 49510
Status=OK
/->.system.tcp.show
Status=OK Info="
Port   Type   Inst   Connection
49511  OUT    1/1    ---
49512  OUT    1/1    ---
"
/->

@endcode

To send data to an opened port, you need to use an appropriate TIF command that requires a TCP port number. For example, the fpga register
monitor command:

@code
/->.fpga.monitor on 0x4000 49510

@endcode

This enables a register monitor on register offset 0x4000 and outputs any register value changes to port 49510. Note that the optional
4th argument can be used to specify a register value mask such that only changes in bits which correspond to a set mask bit get reported.

You can turn off monitoring using:

@code
/->.fpga.monitor off 0x4000 49510

@endcode

Display all of the currently monitored registers using monitorShow:

@code
/->.system.tcp.open 49510 3
Status=OK

/->.fpga.monitor on 0x4000 49510
Status=OK

/->.fpga.monitorShow
Status=OK Info="
Address Mask   Port
0x04000 0xffff 49510
"
/->.fpga.monitor on 0x7000 49510 0xface
Status=OK

/->.fpga.monitorShow
Status=OK Info="
Address Mask   Port
0x04000 0xffff 49510
0x07000 0xface 49510
"
/->

@endcode


\subsection tif_usage_multicmd Multi-command Line
<hr>

The TIF interface supports sending more than one command in a single command line. You do this by separating the commands with
a ';' character.

When a command line conatins multiple commands, the TIF interface will execute all of these commands (in order) and send a single
reply containing the replies of the individual commands (in the same order as executed).

To make it easier to process the multiple replies (and make it visiually more obvious to a human operator), each reply is terminated
with the special character sequence '%~%'. This was chosen to be highly unlikely to occur in the normal response and also to make
it visiually more obvious where each reply finishes. As normal, the whole reply is terminated by the standard TIF promnpt.

For example:

@code
/->.cpri.get 0;.cpri.get 1;.rx.getFreq 1;.rx.getFreq 2
Status=OK Index=0 sfpLineRate=10200Mbps sfpFitted=YES sfpVendor="OPNEXT INC" sfpPart="TRF5916AVLB4AW" sfpRxPower=2.5 sfpTxPower=378.4 lineRate="10137.6" los=NO lof=NO state=OPERATIONAL prefEtherPtr=20 currEtherPtr=45 active=YES sapDefect=NO remoteAlarm=NO remoteLOS=NO remoteLOF=NO pllLock=YES txClockLock=YES rxClockLock=YES mode=MASTER coreInReset=NO
%~%
Status=OK Index=1 sfpLineRate=10200Mbps sfpFitted=YES sfpVendor="OPNEXT INC" sfpPart="TRF5916AVLB4AW" sfpRxPower=2.5 sfpTxPower=378.4 lineRate="10137.6" los=NO lof=NO state=OPERATIONAL prefEtherPtr=20 currEtherPtr=45 active=YES sapDefect=NO remoteAlarm=NO remoteLOS=NO remoteLOF=NO pllLock=YES txClockLock=YES rxClockLock=YES mode=SLAVE coreInReset=NO
%~%
Status=OK value=2345000kHz
%~%
Status=OK value=2345000kHz
/->
@endcode

The main reason for implementing this facility is to reduce/minimise the amount of network traffic when the application is being
controlled by a program. This is particularly useful for collecting commands that are repeatedly sent on a periodic basis.


\subsection tif_usage_websock WebSocket Support
<hr>

An optional build feature WEBSOCK can be set to TRUE to cause an application to build in support for WebSocket ports. In particular
this adds a new TCP port 49600 with a TIF interface that provides WebSocket connection capability.

This means that the application can then serve a standard html page containing Javascript which connects to the application's
WebSocket port and performs TIF commands in the user's client web page.

Web page application can then show live application data and plots which update at a regular period, all from data read through
the TIF connection. This display is then pure Javascript and requires no Java install / Java applet downloads etc.


<hr>
\section tif_add_cmd	Adding Test Commands
<hr>

This section describes the flow used to create new test interface commands.


\subsection tif_add_cmd_xml	Edit XML
<hr>


You add new test commands by editing/creating XML files in tif/common/Model/xml (for the commands that use common classes),
and tif/<i>HOST</i>/Model/xml for board-specific commands (e.g. tif/ETNA/Model/xml).

An XML file can contain as many or as few commands as you like, as long as it conforms to
<A HREF="./tif-common-gentool/index.html" target="_blank">Generator Tool Design Document</A> and is valid XML.

To aid in maintenance, it is recommended that a single file per device be created.


\subsection tif_add_cmd_xml_tips	XML Tips
<hr>

The XML entry for each device consists of specifying a 'name' attribute and an optional 'path' attribute. The name is used
to create the code class name (and hence the autogenerated code filename). Whereas the optional path attribute is used
to set the path of the new device in the test interface displayed directory tree.

It is recommended that you use a camel case name for 'name' to make the class/filename look like any other hand-created
class; and use the path to make the name all lowercase for ease of use in the lab.


\subsection tif_add_cmd_gentool	Run GenTool
<hr>

The XML is converted into code using the GenTool. Full details are in <A HREF="./tif-common-gentool/index.html" target="_blank">Generator Tool Design Document</A>
but the command to use on your local machine is:

@code
  GenTool ~/git/tif/*/Model/xml/*.xml
@endcode

To make things simpler I've added a 'test-interface' target to the autotools Makefile and Eclipse. This runs the GenTool and
then automatically runs the 'autofiles' to ensure any new files that have been created get added to the Makefile(s).

Note that GenTool has been designed to try to make it as make neutral as possible - i.e. it should only affect files that
need to be changed; all other files should stay the same (with the same timestamp) and so not cause needless re-makes.


\subsection tif_add_cmd_src	Edit the Auto-generated Code
<hr>

Running the GenTool creates the class files and headers needed for the framework. The list of files created are:

\li tif/common/Model/src/RadioTestInterface.cpp - An instance of the test interface ultimately derived from Mplane::RtiMsgHandler
which provides the test interface control (see below @ref tif_design). This object adds all of the test commands defined
in the 'device' classes

\li tif/<i>HOST</i>/src/<i>Host</i>TestInterface.cpp - Host-specific instance ooof the test interface. Adds any host-specific
test commands.

\li tif/common/src/<i>Device</i>TestHandler.cpp - Class containing the test commands for this particular device that accesses
the common radio classes

\li tif/<i>HOST</i>/src/<i>Device</i>TestHandler.cpp - Class containing the test commands for this particular device that accesses
the host-specific radio classes

When this code is generated, you only need to add your own code to the <i>Device</i>TestHandler.cpp files. You add your
code between the comments marked with %%--> and <--%%.

The template for the auto-generated code provides these user code areas at:

\li Include files - allows you to include virtual interfaces and any other include files you need
\li Inside the namespace - This region is to allow you to add constants, prototype definitions etc at the start of the file
\li In each test method - The main area for adding the test commands
\li At the end of the file - provides a space for adding static functions, local methods etc.

Each test method will also include a comment that details the provided call arguments and the return variables. You then
add code in the user code section that uses the caller ags and provides information via the return args. The test interface
handles displaying the return arg values.

For example, the fpga read auto-generated code is:

@code
//-------------------------------------------------------------------------------------------------------------
void FpgaTestHandler::read(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Offset
	// Returns:
	// * ENUM(OK:ERROR) Status
	// * [STRING Info]
	// * [STRING Message]
	// * INT Dec
	// * HEXINT Hex
	//

	// Insert you're code here : %%-->

	// <--%%
}

@endcode

This is then edited to provide the command functionality:

@code
//-------------------------------------------------------------------------------------------------------------
void FpgaTestHandler::read(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Offset
	// Returns:
	// * ENUM(OK:ERROR) Status
	// * [STRING Info]
	// * [STRING Message]
	// * INT Dec
	// * HEXINT Hex
	//

	// Insert you're code here : %%-->
	SharedPtr<IFpga> fpga(IFpga::getInstance());

	unsigned offset = static_cast<unsigned>( callList->find("Offset")->toInt()) ;
	UINT16 value = fpga->readRegister(offset) ;

	returnList->find("Dec")->set(value) ;
	returnList->find("Hex")->set(value) ;

	// <--%%
}
@endcode

And in the test interface you get the following:

@code
/->fpga.read 0x78000
Status=OK Dec=1024 Hex=0x400

@endcode



<hr>
\section tif_design	Design Details
<hr>

This section describes the design details of the test interface.


\subsection tif_design_dir	Directory Nodes
<hr>

The test interface console shows "directories" of devices, test commands etc. These are implemented in the software using
the Mplane::DirNode base class which behaves very much like a Linux inode. The Mplane::DirNode can be a "file" type
in that it reperesents an end point (e.g. a test command), or it can be a "directory" type which can itself can contain
another layer of nodes.

A complete hierarchy of nodes of any depth can be supported in the software, and any node can be accessed either by
"cd"-ing to it's container node or by accessing it via it's relative or absolute path.

Each directory node automatically contains the nodes '.' and '..' which represent the current directory and parent directory
respectibly. This means that 'cd ..' behaves as you'd expect.

Note: As "syntactic sugar" the path separator can be specified either as '/' or as '.' interchangeably. So, assuming we are
at the top-level of a hierachy, the following are all equivalent:

@code
->ls /a/b/c/d
->ls a/b/c/d
->ls a.b.c.d
->ls /a.b.c.d
@endcode

In the test interface code, the Mplane::DirNode has been derived from in order to implement a "device" node which understands
how to show a device and it's comments/contents; a "test command" node that understands test commands; a "script" node
that can read in script files and implement them; and a "settings" node that can handle settings variables allowing them to be
displayed and changed.

Also, all of the "built-in" commands (ls, cd, help etc) are actually implemented as "file" nodes inside a hidden directory
".builtins" - which you can actually view the contents of if you run:

@code
->ls /.builtins
@endcode



\subsection tif_design_dir	Test Interface
<hr>

@image html test-interface.png
Fig: Test interface class hierarchy

As shown in the figure, the base of the hierarchy is the Mplane::RtiMsgHandler which provides all of the message handling
and method calling functionality. On top of this is Mplane::RadioTestInterfaceBase which provides support for settings
and scripts (accessed through the 'tif:settings' and 'tif:scripts' devices).

All of the XML files found under tif/common/Model/xml produce code that is stored under tif/common/Model/src. And all of the
test methods are pulled together in Mplane::RadioTestInterface which adds those test commands on top of the base set.

XML files can also be stored under the host-specific directories tif/<i>Host</i>/Model/xml, which then creates code
in tif/<i>Host</i>/Model/src. The host-specific methods are then pulled together by <i>Host</i>TestInterface and added
to the set provided by Mplane::RadioTestInterface.

The final application will then instantiate the appropriate host-specific test interface class to implement all of the
common test methods along with the host-specific methods.


<hr>
\section tif_test Host Based Unit Tests
<hr>

This is the test section

\subsection ssec_1_1 Code Coverage Summary
<hr>

\include common/gentool/gtest/coverage.txt
\include common/Rti/gtest/coverage.txt

\subsection ssec_1_2 Unit Test Results
<hr>

\include common/gentool/gtest/gtest.txt
\include common/Rti/gtest/gtest.txt



*/
