/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CommonModelSystemLoggingTestHandler.cpp
 * \brief     Test methods for common-model
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "CommonModelSystemLoggingTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/system/log", "System debug logging", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemLoggingTestHandler("/system/log/save",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Save current logging levels to persistent storage (restored on reboot)",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemLoggingTestHandler("/system/log/set",
			"ENUM(Off:Normal:Verbose) level,[STRING name],[STRING group]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set the debug log level for all entries, a group of entries, or a specific entry",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemLoggingTestHandler("/system/log/show",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show current logging levels",
			msgParser, settings))
	);



	msgParser.add( static_cast<RtiDirEntry *>(new TestVar("/system/log/console", "BOOL(no:yes)",
			"Output to console as well as log",
			consoleGet, consoleSet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestVar("/system/log/forward", "STRING",
			"Copy logging to specified machine (name or ip)",
			forwardGet, forwardSet,
			msgParser, settings))
	);




}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
CommonModelSystemLoggingTestHandler::CommonModelSystemLoggingTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(SystemLoggingTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
CommonModelSystemLoggingTestHandler::CommonModelSystemLoggingTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(SystemLoggingTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CommonModelSystemLoggingTestHandler::~CommonModelSystemLoggingTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool CommonModelSystemLoggingTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string CommonModelSystemLoggingTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "save")
    {
        save( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "show")
    {
        show( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::save(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->save( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(Off:Normal:Verbose) level
	// * [STRING name]
	// * [STRING group]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::show(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->show( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool CommonModelSystemLoggingTestHandler::consoleSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/log/console"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemLoggingTestHelper> helper(SystemLoggingTestHelper::getInstance()) ;
	return helper->consoleSet( pathname, value, returnList ) ;
}

//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::consoleGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/log/console"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemLoggingTestHelper> helper(SystemLoggingTestHelper::getInstance()) ;
	helper->consoleGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
bool CommonModelSystemLoggingTestHandler::forwardSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/log/forward"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemLoggingTestHelper> helper(SystemLoggingTestHelper::getInstance()) ;
	return helper->forwardSet( pathname, value, returnList ) ;
}

//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemLoggingTestHandler::forwardGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/log/forward"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemLoggingTestHelper> helper(SystemLoggingTestHelper::getInstance()) ;
	helper->forwardGet( pathname, returnList ) ;
}









// Add any statics, private methods etc here %%-->

// <--%%
