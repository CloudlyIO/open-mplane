/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CommonModelSystemTestHandler.cpp
 * \brief     Test methods for common-model
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "CommonModelSystemTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/system", "System information", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getBoardId",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT BoardID",
			"Return the radio card board identification",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getDateTime",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING dateTime",
			"Gets the radio date and time in the form YYYY-MM-DD hh:mm:ss",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getDuplex",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING duplex",
			"Get duplex setting",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getHostName",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING result",
			"Gets the host name",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getHwBoardSerialNumber",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING result",
			"Gets the serial number",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getLimits",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT numTx,INT numRx,INT numCarriers,INT numFibres,FLOAT[] minPower (dB),FLOAT[] maxPower (dB),FLOAT minTxFreq (kHz),FLOAT maxTxFreq (kHz),FLOAT minRxFreq (kHz),FLOAT maxRxFreq (kHz)",
			"Get list of radio limits",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getProductCode",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING result",
			"Gets the product code",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getSerialNumber",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING result",
			"Gets the serial number",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getState",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],ENUM(INITIALISING:STABLE:FAILED) appState",
			"Show the application state",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getSupplyVoltage",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],FLOAT value",
			"Return the radio main supply voltage",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/getTemperature",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],FLOAT temperature (DegC)",
			"Retrieves the FPGA temperature",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/reboot",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Reboot the board",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/services",
			"ENUM(suspend:resume) control",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Allows all application services to be temporarily suspended and resumed",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/setDateTime",
			"STRING date,STRING time",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the radio date and time in the form YYYY-MM-DD hh:mm:ss",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/showLimits",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show list of radio limits",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelSystemTestHandler("/system/showTasks",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show task list",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Application", "STRING",
			"Shows the build application string",
			ApplicationGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Board", "STRING",
			"Shows the build board string",
			BoardGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Build", "INT",
			"Shows the build number",
			BuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/CurrentFpgaBuild", "INT",
			"Shows the FPGA build number of the currently fitted FPGA",
			CurrentFpgaBuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Customer", "STRING",
			"Shows the build customer string",
			CustomerGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Duplex", "STRING",
			"Shows the build duplex string",
			DuplexGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FibreInterface", "STRING",
			"Shows the build fibre interface string",
			FibreInterfaceGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FpgaBuild", "STRING",
			"Shows the FPGA build number the software was built with",
			FpgaBuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FpgaPart", "STRING",
			"Shows the FPGA part number the software was built with",
			FpgaPartGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/HwId", "STRING",
			"Shows the hardware identification of the system",
			HwIdGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/HwRev", "STRING",
			"Shows the hardware revision of the system",
			HwRevGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Version", "STRING",
			"Shows the application version string",
			VersionGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
CommonModelSystemTestHandler::CommonModelSystemTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(SystemTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
CommonModelSystemTestHandler::CommonModelSystemTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(SystemTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CommonModelSystemTestHandler::~CommonModelSystemTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool CommonModelSystemTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string CommonModelSystemTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "getBoardId")
    {
        getBoardId( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getDateTime")
    {
        getDateTime( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getDuplex")
    {
        getDuplex( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getHostName")
    {
        getHostName( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getHwBoardSerialNumber")
    {
        getHwBoardSerialNumber( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getLimits")
    {
        getLimits( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getProductCode")
    {
        getProductCode( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getSerialNumber")
    {
        getSerialNumber( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getState")
    {
        getState( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getSupplyVoltage")
    {
        getSupplyVoltage( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getTemperature")
    {
        getTemperature( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reboot")
    {
        reboot( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "services")
    {
        services( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setDateTime")
    {
        setDateTime( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showLimits")
    {
        showLimits( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showTasks")
    {
        showTasks( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getBoardId(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT BoardID
	//
	mHelper->getBoardId( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getDateTime(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING dateTime
	//
	mHelper->getDateTime( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getDuplex(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING duplex
	//
	mHelper->getDuplex( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getHostName(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//
	mHelper->getHostName( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getHwBoardSerialNumber(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//
	mHelper->getHwBoardSerialNumber( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getLimits(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT numTx
	// * INT numRx
	// * INT numCarriers
	// * INT numFibres
	// * FLOAT[] minPower (dB)
	// * FLOAT[] maxPower (dB)
	// * FLOAT minTxFreq (kHz)
	// * FLOAT maxTxFreq (kHz)
	// * FLOAT minRxFreq (kHz)
	// * FLOAT maxRxFreq (kHz)
	//
	mHelper->getLimits( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getProductCode(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//
	mHelper->getProductCode( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getSerialNumber(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//
	mHelper->getSerialNumber( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getState(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(INITIALISING:STABLE:FAILED) appState
	//
	mHelper->getState( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getSupplyVoltage(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value
	//
	mHelper->getSupplyVoltage( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::getTemperature(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT temperature (DegC)
	//
	mHelper->getTemperature( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::reboot(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reboot( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::services(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(suspend:resume) control
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->services( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::setDateTime(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING date
	// * STRING time
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setDateTime( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::showLimits(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showLimits( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::showTasks(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showTasks( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::ApplicationGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Application"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->ApplicationGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::BoardGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Board"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->BoardGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::BuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Build"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->BuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::CurrentFpgaBuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/CurrentFpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->CurrentFpgaBuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::CustomerGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Customer"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->CustomerGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::DuplexGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Duplex"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->DuplexGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::FibreInterfaceGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FibreInterface"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FibreInterfaceGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::FpgaBuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FpgaBuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::FpgaPartGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaPart"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FpgaPartGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::HwIdGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/HwId"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->HwIdGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::HwRevGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/HwRev"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->HwRevGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelSystemTestHandler::VersionGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Version"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->VersionGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
