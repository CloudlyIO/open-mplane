/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CommonModelImagesTestHandler.cpp
 * \brief     Test methods for common-model
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 * \satisfy{@req_8403{198}}
 * \satisfy{@req_8403{199}}
 * \satisfy{@req_8403{200}}
 * \satisfy{@req_8403{201}}
 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "CommonModelImagesTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/image", "Image Management settings", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/clean",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Clean flash of old images in order to free-up space",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/install",
			"STRING version,STRING build",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Get and install package",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/installFile",
			"STRING filename",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Get and install package from a file",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/installStatus",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],BOOL done,BOOL fail,INT totalProgress (%),STRING file,STRING op,INT fileProgress (%),STRING error",
			"Get status of installTcp command",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/installTcp",
			"INT tcp,INT size,[INT timeout=60]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Send zip file via open TCP input port and install the package",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/show",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show image management information",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelImagesTestHandler("/image/showDetail",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show detailed image management information",
			msgParser, settings))
	);



	msgParser.add( static_cast<RtiDirEntry *>(new TestVar("/image/autoCleanThreshold", "INT",
			"Number of installed packages above which an auto-clean is triggered on next install",
			autoCleanThresholdGet, autoCleanThresholdSet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestVar("/image/uboot", "BOOL(no:yes)",
			"Install new u-boot when OS installed?",
			ubootGet, ubootSet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestVar("/image/url", "STRING",
			"Server URL to download from",
			urlGet, urlSet,
			msgParser, settings))
	);



	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/image/bank", "ENUM(BANK1:BANK2)",
			"Currently active OS memory bank",
			bankGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
CommonModelImagesTestHandler::CommonModelImagesTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(ImagesTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
CommonModelImagesTestHandler::CommonModelImagesTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(ImagesTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CommonModelImagesTestHandler::~CommonModelImagesTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool CommonModelImagesTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string CommonModelImagesTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "clean")
    {
        clean( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "install")
    {
        install( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "installFile")
    {
        installFile( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "installStatus")
    {
        installStatus( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "installTcp")
    {
        installTcp( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "show")
    {
        show( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showDetail")
    {
        showDetail( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::clean(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->clean( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::install(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING version
	// * STRING build
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->install( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::installFile(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING filename
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->installFile( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::installStatus(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL done
	// * BOOL fail
	// * INT totalProgress (%)
	// * STRING file
	// * STRING op
	// * INT fileProgress (%)
	// * STRING error
	//
	mHelper->installStatus( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::installTcp(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT tcp
	// * INT size
	// * [INT timeout=60]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->installTcp( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::show(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->show( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::showDetail(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showDetail( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool CommonModelImagesTestHandler::autoCleanThresholdSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/image/autoCleanThreshold"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	return helper->autoCleanThresholdSet( pathname, value, returnList ) ;
}

//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::autoCleanThresholdGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/image/autoCleanThreshold"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	helper->autoCleanThresholdGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
bool CommonModelImagesTestHandler::ubootSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/image/uboot"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	return helper->ubootSet( pathname, value, returnList ) ;
}

//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::ubootGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/image/uboot"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	helper->ubootGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
bool CommonModelImagesTestHandler::urlSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/image/url"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	return helper->urlSet( pathname, value, returnList ) ;
}

//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::urlGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/image/url"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	helper->urlGet( pathname, returnList ) ;
}



//-------------------------------------------------------------------------------------------------------------
void CommonModelImagesTestHandler::bankGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/image/bank"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<ImagesTestHelper> helper(ImagesTestHelper::getInstance()) ;
	helper->bankGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
