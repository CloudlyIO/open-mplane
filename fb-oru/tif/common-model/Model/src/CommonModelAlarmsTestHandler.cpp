/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CommonModelAlarmsTestHandler.cpp
 * \brief     Test methods for common-model
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "CommonModelAlarmsTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/alarms", "Alarms and faults", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/clearFault",
			"[INT ident]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"FOR TESING ONLY - clear a fault to clear an alarm event",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/getAlarm",
			"[INT ident]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Gets an alarm by id and its associated faults",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/getPeriod",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT period (s)",
			"Gets the current period between periodic alarm reports",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/periodicPortClose",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Stops sending out periodic alarm reports",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/periodicPortOpen",
			"INT{1024..65353} port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sends all periodic alarm reports to the specified port",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/portClose",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Stops sending out alarm events",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/portOpen",
			"INT{1024..65353} port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sends all alarm events to the specified port",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/raiseFault",
			"[INT ident]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"FOR TESING ONLY - raise a fault to trigger an alarm event",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/setPeriod",
			"INT{5..} period (s)",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the period between periodic alarm reports",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/showAlarmId",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Displays possible alarms by id and name",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/showAll",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Displays information on the state of all alarms",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/showFaultId",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Displays possible faults by id and name",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new CommonModelAlarmsTestHandler("/alarms/status",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Shows the current alarm status",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
CommonModelAlarmsTestHandler::CommonModelAlarmsTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(AlarmsTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
CommonModelAlarmsTestHandler::CommonModelAlarmsTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(AlarmsTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CommonModelAlarmsTestHandler::~CommonModelAlarmsTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool CommonModelAlarmsTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string CommonModelAlarmsTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "clearFault")
    {
        clearFault( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getAlarm")
    {
        getAlarm( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getPeriod")
    {
        getPeriod( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "periodicPortClose")
    {
        periodicPortClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "periodicPortOpen")
    {
        periodicPortOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portClose")
    {
        portClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portOpen")
    {
        portOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "raiseFault")
    {
        raiseFault( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setPeriod")
    {
        setPeriod( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showAlarmId")
    {
        showAlarmId( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showAll")
    {
        showAll( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showFaultId")
    {
        showFaultId( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "status")
    {
        status( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::clearFault(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->clearFault( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::getAlarm(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->getAlarm( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::getPeriod(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT period (s)
	//
	mHelper->getPeriod( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::periodicPortClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->periodicPortClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::periodicPortOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1024..65353} port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->periodicPortOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::portClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::portOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1024..65353} port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::raiseFault(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->raiseFault( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::setPeriod(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{5..} period (s)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setPeriod( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::showAlarmId(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showAlarmId( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::showAll(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showAll( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::showFaultId(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showFaultId( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CommonModelAlarmsTestHandler::status(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->status( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
