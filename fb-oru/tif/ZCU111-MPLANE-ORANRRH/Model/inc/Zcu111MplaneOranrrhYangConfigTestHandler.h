/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Zcu111MplaneOranrrhYangConfigTestHandler.h
 * \brief     Test methods for ZCU111-MPLANE-ORANRRH
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __ZCU111MPLANEORANRRHYANGCONFIGTESTHANDLER__H_
#define __ZCU111MPLANEORANRRHYANGCONFIGTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "YangConfigTestHelper.h"
#include "ITif.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class Zcu111MplaneOranrrhYangConfigTestHandler: public virtual ITifEntry, public EntryFunc
{
public:

	Zcu111MplaneOranrrhYangConfigTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~Zcu111MplaneOranrrhYangConfigTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

	/**
	 * Special constructor - only to be used for calling the static registerMethods()
	 */
	Zcu111MplaneOranrrhYangConfigTestHandler();

	/**
	 * Called by ITif::inject() to get this object to add it's entries
	 * @param tif
	 * @return true if ok
	 */
	virtual bool registerEntry(ITif* tif) override ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   STRING Modules
	 *
	 */
	void getSupportedModules( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   STRING List
	 *
	 */
	void listConfigTree( DataVariantList *callList, DataVariantList *returnList );



	/**
	 * Getter method for read-only variable CompanyName
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void CompanyNameGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable ConfigStatus
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void ConfigStatusGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable FormatVersion
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void FormatVersionGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable ORANversion
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void ORANversionGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable ProductName
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void ProductNameGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable VariantName
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void VariantNameGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable YANGversion
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void YANGversionGet(  const std::string& pathname, DataVariantList *returnList ) ;




// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<YangConfigTestHelper> mHelper ;
};



} // MPLANE

#endif /* __ZCU111MPLANEORANRRHYANGCONFIGTESTHANDLER__H_*/
