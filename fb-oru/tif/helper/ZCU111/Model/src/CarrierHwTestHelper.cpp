/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CarrierHwTestHelper.cpp
 * \brief     Test helper for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "CarrierHwTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include <typeinfo>
#include "ITifIoctl.h"
#include "ICarrierModel.h"
#include "ICarrierServer.h"
#include "ICarrierHardware.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<CarrierHwTestHelper> CarrierHwTestHelper::getInstance()
{
	static std::shared_ptr<CarrierHwTestHelper> instance(std::make_shared<CarrierHwTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
CarrierHwTestHelper::CarrierHwTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CarrierHwTestHelper::~CarrierHwTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::diagnose( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!checkCarrierIndex(callList, returnList))
		return ;

	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;
	ICarrierHardware* ch = carrierHardwareList->getCarrierHardware( callList->find("Index")->toInt() ) ;

	std::stringstream ss ;
	ch->showDiag(ss) ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::getSync( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] ulSync
	// * STRING[] dlSync
	//

	// Insert your code here : %%-->
	if (!checkCarrierIndex(callList, returnList))
		return ;

	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;

	std::shared_ptr<ITifIoctl> tifIoctl = std::dynamic_pointer_cast<ITifIoctl>(carrierHardwareList) ;

	// call method
    tifIoctl->executeCommand("getSync", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!checkCarrierIndex(callList, returnList))
		return ;

	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;
	ICarrierHardware* ch = carrierHardwareList->getCarrierHardware( callList->find("Index")->toInt() ) ;

	std::stringstream ss ;
	ch->showCarrier(ss) ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::showAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;

	std::stringstream ss ;
	carrierHardwareList->showCarriers(ss) ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::showCapacity( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	std::shared_ptr<ICarrierModel> carrierModel( ICarrierModel::getInstance() ) ;
	std::shared_ptr<ITifIoctl> modelTifIoctl = std::dynamic_pointer_cast<ITifIoctl>(carrierModel) ;
	if (!modelTifIoctl)
		return ;

	std::shared_ptr<ITifIoctl> chainTifIoctl = modelTifIoctl->getObject("ChainWorker") ;
	if (!chainTifIoctl)
		return ;

	if (!chainTifIoctl->isCommandAvailable("showCapacity"))
		return ;


	// call method
	chainTifIoctl->executeCommand("showCapacity", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::showSyncAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::stringstream ss ;

	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;
	std::shared_ptr<ITifIoctl> tifIoctl = std::dynamic_pointer_cast<ITifIoctl>(carrierHardwareList) ;

	for (unsigned carrIdx=0; carrIdx < carrierServer->getMaxCarriers(); ++carrIdx)
	{
		DataVariantList callArgs("INT index") ;
	    DataVariantList returnArgs("STRING[] ulSync,STRING[] dlSync") ;
	    callArgs.find("index")->set( (int)carrIdx ) ;

		// call method
	    tifIoctl->executeCommand("getSync", &callArgs, &returnArgs) ;

		// pass returned values back
	    ss << "Carrier " << carrIdx << ": " <<
	    		returnArgs.find("ulSync")->getNameValuePair() <<
	    		" " <<
	    		returnArgs.find("dlSync")->getNameValuePair() <<
	    		std::endl ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::showUsed( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	std::shared_ptr<ICarrierModel> carrierModel( ICarrierModel::getInstance() ) ;
	std::shared_ptr<ITifIoctl> modelTifIoctl = std::dynamic_pointer_cast<ITifIoctl>(carrierModel) ;
	if (!modelTifIoctl)
		return ;

	std::shared_ptr<ITifIoctl> chainTifIoctl = modelTifIoctl->getObject("ChainWorker") ;
	if (!chainTifIoctl)
		return ;

	if (!chainTifIoctl->isCommandAvailable("showUsed"))
		return ;


	// call method
	chainTifIoctl->executeCommand("showUsed", callList, returnList) ;


	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool CarrierHwTestHelper::CalibrationModeSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/hardware/carrier/CalibrationMode"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	carrierServer->setCalibrationMode(value->toBool()) ;
	return true ;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void CarrierHwTestHelper::CalibrationModeGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/hardware/carrier/CalibrationMode"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	returnList->find(pathname)->set(carrierServer->isCalibrationMode()) ;
	// <--%%
}









// Add any statics, private methods etc here %%-->

//-------------------------------------------------------------------------------------------------------------
bool CarrierHwTestHelper::checkCarrierIndex(DataVariantList *callList, DataVariantList *returnList)
{
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	std::shared_ptr<ICarrierHardwareList> carrierHardwareList( ICarrierHardwareList::getInstance() ) ;

	unsigned index( callList->find("Index")->toInt() ) ;
	if (index >= carrierServer->getMaxCarriers())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Index " << index << " outside valid range (Number of carrier " << carrierServer->getMaxCarriers() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return false ;
	}

	return true ;
}


// <--%%
