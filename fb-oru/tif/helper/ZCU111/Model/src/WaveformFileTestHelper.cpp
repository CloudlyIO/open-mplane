/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      WaveformFileTestHelper.cpp
 * \brief     Test helper for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "WaveformFileTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include <iomanip>

#include "ByteTransfer.hpp"
#include "stringfunc.hpp"
#include "IWaveformManager.h"
#include "TcpPortHelper.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<WaveformFileTestHelper> WaveformFileTestHelper::getInstance()
{
	static std::shared_ptr<WaveformFileTestHelper> instance(std::make_shared<WaveformFileTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
WaveformFileTestHelper::WaveformFileTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
WaveformFileTestHelper::~WaveformFileTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::add( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING url
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	std::string url(callList->find("url")->toString()) ;

	std::string filename(url) ;
	std::size_t pos(filename.find_last_of("/\\")) ;
	if (pos != std::string::npos)
		filename = filename.substr(pos+1) ;

	// attempt download
	if (!fileMgr->download(url, filename))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(fileMgr->getError()) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::addTcp( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT tcp
	// * STRING name
	// * INT size
	// * [INT timeout=30]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!TcpPortHelper::portValid(msgParser, "tcp", callList, returnList))
		return ;

	std::shared_ptr<TcpPortHelper> port(new TcpPortHelper(msgParser, "tcp", callList) ) ;
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	unsigned expectedSize( static_cast<unsigned>(callList->find("size")->toInt()) ) ;
	unsigned timeoutSecs( static_cast<unsigned>(callList->find("timeout")->toInt()) ) ;
	std::string filename( callList->find("name")->toString() ) ;

	// Start off download
	std::shared_ptr<IFileMgrWriter> fileWriter(fileMgr->portTransferStart(filename, expectedSize)) ;
	if (!fileWriter)
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(fileMgr->getError()) ;
		return ;
	}

	bool ok = port->receive([fileWriter](const std::vector<uint8_t>& data)->bool {
			return fileWriter->addData(data) ;
		},
		expectedSize,
		timeoutSecs
	) ;

	if (!fileMgr->portTransferEnd(ok))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(fileMgr->getError()) ;
		return ;
	}	if (!TcpPortHelper::portValid(msgParser, "tcp", callList, returnList))
		return ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::del( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	if (!fileMgr->delfile( callList->find("name")->toString() ))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(fileMgr->getError()) ;
		return ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::delIdx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	if (!fileMgr->del( static_cast<unsigned>(callList->find("index")->toInt())-1 ))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(fileMgr->getError()) ;
		return ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::freeSpace( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT free (KB)
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	unsigned long long freeSpace(fileMgr->dirFreeSpace()) ;
	freeSpace /= 1024ull ;
	unsigned long long maxVal(0x7fffffff) ;

	if (freeSpace >= maxVal)
		freeSpace = maxVal ;

	returnList->find("free")->set( static_cast<int>(freeSpace) ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::list( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] file
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	// Get the list of files
	std::vector<std::string> files(fileMgr->listFiles()) ;

	// Stop now if empty
	if (files.empty())
		return ;

	// Now we can format the output
	unsigned i(0) ;
	for (auto file : files)
	{
		returnList->find("file")->set(i, file) ;
		returnList->find("file")->setName(i, "file[" + std::to_string(i+1) + "]") ;
		++i ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformFileTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::shared_ptr<IFileMgr> fileMgr(waveformMgr->getPlaybackFileMgr()) ;

	// Get the list of files
	std::vector<std::string> files(fileMgr->listFiles()) ;

	// Stop now if empty
	if (files.empty())
		return ;

	// Get length of longest filename
	unsigned maxLen(0) ;
	for (auto file : files)
	{
		if (maxLen < file.size())
			maxLen = file.size() ;
	}

	// Now we can format the output
	std::stringstream ss ;
	ss << std::endl ;

	unsigned i(1) ;
	for (auto file : files)
	{
		std::string pad(maxLen-file.size(), ' ') ;
		ss << std::setw(3) << i++ << ": " << file << pad << std::endl ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
