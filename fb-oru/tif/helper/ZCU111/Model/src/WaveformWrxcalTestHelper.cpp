/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      WaveformWrxcalTestHelper.cpp
 * \brief     Test helper for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "WaveformWrxcalTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "IWaveform.h"
#include "IWaveformManager.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

static const std::vector<std::string> PortToWave{
	//	SRX	= 0,
	"wrxcal",
	//	RX1	= 1,
	"wrxcal1",
	//	RX2	= 2,
	"wrxcal2"
};

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<WaveformWrxcalTestHelper> WaveformWrxcalTestHelper::getInstance()
{
	static std::shared_ptr<WaveformWrxcalTestHelper> instance(std::make_shared<WaveformWrxcalTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
WaveformWrxcalTestHelper::WaveformWrxcalTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
WaveformWrxcalTestHelper::~WaveformWrxcalTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformWrxcalTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(SRX:RX1:RX2) Port]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL(OFF:ON) Streaming
	// * ENUM(1:2:4:8:16:32:64:1024) Decimation
	// * INT{0..64} Averaging
	// * DOUBLE NCO (MHz)
	//

	// Insert your code here : %%-->

	//Default to SRX if port is not specified
	ADCCapturePort port = WaveformWrxcalTestHelper::ADCCapturePort::SRX;

	if (callList->find("Port")->isSet())
	{
		port = static_cast<WaveformWrxcalTestHelper::ADCCapturePort>(callList->find("Port")->toInt());
	}
	std::string name = getWaveName(port);

	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;

	// see if waveform exists - create if not
	if (!waveformMgr->hasWave(name))
	{
		// create new waveform
		IWaveform::WaveType mode(IWaveform::WAVEFORM_CAPTURE) ;
		if (!waveformMgr->createWave(name, mode))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to get waveform") ;
			return ;
		}
	}


	std::shared_ptr<IWaveform> wave(waveformMgr->getWave(name)) ;


	// ** Get params **

	returnList->find("Streaming")->setInt((int)wave->getStreaming()) ;

	returnList->find("Decimation")->setInt( (int)wave->getDecimation() ) ;
	returnList->find("Averaging")->setUint(wave->getAveraging()) ;
//	returnList->find("Throttle")->setUint(wave->getThrottle()) ;
	returnList->find("Nco")->setDouble(wave->getNco()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformWrxcalTestHelper::set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(SRX:RX1:RX2) Port]
	// * [BOOL(OFF:ON) Streaming]
	// * [ENUM(1:2:4:8:16:32:64:1024) Decimation]
	// * [INT{1..64} Averaging]
	// * [DOUBLE NCO (MHz)]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	//Default to SRX if port is not specified
	ADCCapturePort port = WaveformWrxcalTestHelper::ADCCapturePort::SRX;

	if (callList->find("Port")->isSet())
	{
		port = static_cast<WaveformWrxcalTestHelper::ADCCapturePort>(callList->find("Port")->toInt());
	}
	std::string name = getWaveName(port);

	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;

	// see if waveform exists - create if not
	if (!waveformMgr->hasWave(name))
	{
		// create new waveform
		IWaveform::WaveType mode(IWaveform::WAVEFORM_CAPTURE) ;
		if (!waveformMgr->createWave(name, mode))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to create waveform") ;
			return ;
		}
	}



	// Set params

	if (callList->find("Streaming")->isSet())
	{
		waveformMgr->setStreaming(name, callList->find("Streaming")->toBool() ) ;
	}

	if (callList->find("Decimation")->isSet())
	{
		waveformMgr->setDecimation(name, static_cast<IWaveform::WrxcalDecimation>(callList->find("Decimation")->toInt()) ) ;
	}

	if (callList->find("Averaging")->isSet())
	{
		waveformMgr->setAveraging(name, callList->find("Averaging")->toUint()) ;
	}

	if (callList->find("NCO")->isSet())
	{
		waveformMgr->setNco(name, callList->find("NCO")->toDouble()) ;
	}


	// we need to call the set enable so that the waveform if updated.
    if (callList->find("Streaming")->isSet())
    {
        waveformMgr->setEnable(name, callList->find("Streaming")->toBool()) ;
    }


	// Check for errors
	std::string error(waveformMgr->getErrorReason()) ;
	if (!error.empty())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(error) ;
	}

	// <--%%
}










// Add any statics, private methods etc here %%-->

//-------------------------------------------------------------------------------------------------------------
std::string WaveformWrxcalTestHelper::getWaveName(WaveformWrxcalTestHelper::ADCCapturePort port)
{
	return PortToWave[port];
}

// <--%%
