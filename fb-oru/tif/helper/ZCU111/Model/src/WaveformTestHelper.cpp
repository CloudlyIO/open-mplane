/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      WaveformTestHelper.cpp
 * \brief     Test helper for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "WaveformTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "IWaveformManager.h"
#include "ITxPort.h"
#include "TcpPortHelper.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<WaveformTestHelper> WaveformTestHelper::getInstance()
{
	static std::shared_ptr<WaveformTestHelper> instance(std::make_shared<WaveformTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
WaveformTestHelper::WaveformTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
WaveformTestHelper::~WaveformTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::del( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING Name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	if (!waveformMgr->deleteWave(callList->find("name")->toString()))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(waveformMgr->getErrorReason()) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING Name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(NONE:PLAYBACK:CAPTURE) Mode
	// * STRING Filename
	// * BOOL(OFF:ON) Enable
	// * INT Depth
	// * INT Trigger
	// * INT Carrier
	// * INT sampleRate=61440Ksps (Ksps)
	// * FLOAT scalingGain (dB)
	//

	// Insert your code here : %%-->

	std::string name(callList->find("name")->toString()) ;
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	returnList->find("Mode")->set("NONE") ;

	// see if waveform exists
	if (!waveformMgr->hasWave(name))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Waveform not set") ;
		return ;
	}
	std::shared_ptr<IWaveform> wave(waveformMgr->getWave(name)) ;


	// ** Get params **

	// mode
	std::string mode("NONE") ;
	IWaveform::WaveType type(wave->getType()) ;
	if (type == IWaveform::WAVEFORM_CAPTURE)
		mode = "CAPTURE" ;
	if (type == IWaveform::WAVEFORM_PLAYBACK)
		mode = "PLAYBACK" ;
	returnList->find("Mode")->set(mode) ;

	// * ENUM(PLAYBACK:CAPTURE) Mode
	// * STRING Filename
	// * BOOL(OFF:ON) Enable
	// * INT Depth
	// * INT Trigger
	// * INT Carrier
	// * INT sampleRate=61440Ksps (Ksps)
	// * INT Antenna
	// * ENUM(TX:RX) Direction
	// * ENUM(RF:IQ:RXCAL) Endpoint
	// * FLOAT scalingGain (dB)


	// filename
	returnList->find("filename")->set(wave->getFilename()) ;

	// depth
	returnList->find("depth")->set(static_cast<int>(wave->getDepth())) ;

	// trigger
	returnList->find("trigger")->set(static_cast<int>(wave->getTrigger())) ;

	// carrier
	returnList->find("carrier")->set(static_cast<int>(wave->getCarrierIdx())) ;

	// sample rate
	returnList->find("sampleRate")->set(static_cast<int>(wave->getSampleRateKsps())) ;

    // scaling gain
    returnList->find("scalingGain")->set(wave->getScalingGain()) ;

    // tcp port ??

	// enable
	returnList->find("enable")->set(wave->isEnable()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING Name
	// * [ENUM(PLAYBACK:CAPTURE) Mode]
	// * [STRING Filename]
	// * [BOOL(OFF:ON) Enable]
	// * [INT Depth]
	// * [INT Trigger]
	// * [INT Carrier]
	// * [INT sampleRate=61440Ksps (Ksps)]
	// * [INT Antenna]
	// * [ENUM(TX:RX) Direction]
	// * [ENUM(RF:IQ:RXCAL) Endpoint]
	// * [FLOAT scalingGain (dB)]
	// * [INT tcp=0]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::string name(callList->find("name")->toString()) ;
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;

	// see if waveform exists
	if (!waveformMgr->hasWave(name))
	{
		if (!callList->find("mode")->isSet())
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Must specify waveform mode when creating new waveform") ;
			return ;
		}

		// create new waveform
		IWaveform::WaveType mode(IWaveform::WAVEFORM_PLAYBACK) ;
		if (callList->find("mode")->toString() == "CAPTURE")
			mode = IWaveform::WAVEFORM_CAPTURE ;
		if (!waveformMgr->createWave(name, mode))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Must specify waveform mode when creating new waveform") ;
			return ;
		}
	}

	// Set params

	// TODO: Support the other settings (not needed for nailed connections)

	// filename
	if (callList->find("filename")->isSet())
	{
		waveformMgr->setFilename(name, callList->find("filename")->toString()) ;

    	// clear tcp port callback
		waveformMgr->setCaptureCallback(name, IWaveform::CaptureCallback() ) ;
	}

	// depth
	if (callList->find("depth")->isSet())
	{
		waveformMgr->setDepth(name, static_cast<unsigned>(callList->find("depth")->toInt()) ) ;
	}

	// trigger
	if (callList->find("trigger")->isSet())
	{
		waveformMgr->setTrigger(name, static_cast<unsigned>(callList->find("trigger")->toInt()) ) ;
	}

	// carrier
	if (callList->find("carrier")->isSet())
	{
		waveformMgr->setCarrierIdx(name, static_cast<unsigned>(callList->find("carrier")->toInt()) ) ;
	}

	// sample rate deprecated.

    // scaling gain
    if (callList->find("scalingGain")->isSet())
    {
        waveformMgr->setScalingGain(name, static_cast<float>(callList->find("scalingGain")->toFloat()) ) ;
    }

    // tcp port - set the callback if a valid port number has been given
    if (callList->find("tcp")->isSet())
    {
    	int tcpPort(callList->find("tcp")->toInt()) ;
    	if (tcpPort > 0)
    	{
        	// setting
    		if (!TcpPortHelper::portValid(msgParser, "tcp", callList, returnList))
    			return ;

    		std::shared_ptr<TcpPortHelper> port(new TcpPortHelper(msgParser, "tcp", callList) ) ;

    		waveformMgr->setCaptureCallback(name,
				[port](const std::vector<uint8_t>& msg) {
					port->send(msg) ;
				}
    		) ;
    	}
    }




	// ** Must set enable last - this causes the waveform settings to get applied **
	// enable
	if (callList->find("enable")->isSet())
	{
		waveformMgr->setEnable(name, callList->find("enable")->toBool()) ;
	}

	// Check for errors
	std::string error(waveformMgr->getErrorReason()) ;
	if (!error.empty())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(error) ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING Name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::stringstream ss ;
	waveformMgr->show(callList->find("name")->toString(), ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::showAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::stringstream ss ;
	waveformMgr->show(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::showReg( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING Name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::stringstream ss ;
	waveformMgr->showWaveformReg(callList->find("name")->toString(), ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::showRegAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	std::stringstream ss ;
	for (unsigned waveIdx=0; waveIdx < waveformMgr->supportedWaveforms()-3; ++waveIdx)
	{
		std::stringstream wname ;
		wname << "w" << waveIdx ;
		waveformMgr->showWaveformReg(wname.str(), ss) ;
	}
	waveformMgr->showWaveformReg("wrxcal", ss) ;
	waveformMgr->showWaveformReg("wrxcal1", ss) ;
	waveformMgr->showWaveformReg("wrxcal2", ss) ;

	waveformMgr->showWaveformMasterReg(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::start( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [BOOL(OFF:ON) Playback]
	// * [BOOL(OFF:ON) Capture]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;

	bool playbackEnable = true ;
	bool captureEnable = true ;

	if (callList->find("playback")->isSet() || callList->find("capture")->isSet())
	{
		// get current settings
		playbackEnable = waveformMgr->isPlaybackEnabled() ;
		captureEnable = waveformMgr->isCaptureEnabled() ;

		if (callList->find("playback")->isSet())
		{
			playbackEnable = callList->find("playback")->toBool() ;
		}
		if (callList->find("capture")->isSet())
		{
			captureEnable = callList->find("capture")->toBool() ;
		}
	}

	// start
	if (!waveformMgr->setCapturePlayback(captureEnable, playbackEnable))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(waveformMgr->getErrorReason()) ;
		return ;
	}

	// The Capture playback has started ok. We now need to reset the FIFO to ensure
	// the waveform is correct.
	std::vector< std::shared_ptr<ITxPort> > txPorts = ITxPortFactory::getPorts( ) ;
	for (auto txPort : txPorts)
	{
		txPort->resetFifo();
	}
	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::NumWaveformsGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/waveform/NumWaveforms"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// Get manager instance
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	returnList->find(pathname)->set( static_cast<int>(waveformMgr->supportedWaveforms()) ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void WaveformTestHelper::UsedWaveformsGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/waveform/UsedWaveforms"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// Get manager instance
	std::shared_ptr<IWaveformManager> waveformMgr(IWaveformManager::getInstance()) ;
	returnList->find(pathname)->set( static_cast<int>(waveformMgr->numWaveforms()) ) ;
	// <--%%
}








// Add any statics, private methods etc here %%-->

// <--%%
