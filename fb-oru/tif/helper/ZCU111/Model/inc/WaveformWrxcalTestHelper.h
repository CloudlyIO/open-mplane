/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      WaveformWrxcalTestHelper.h
 * \brief     Test helper for ZCU111
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __WAVEFORMWRXCALTESTHELPER__H_
#define __WAVEFORMWRXCALTESTHELPER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "IRtiMsgParser.h"
#include "DataVariant.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class WaveformWrxcalTestHelper
// Add any extra inheritance %%-->

// <--%%
{
public:

	// Add any class settings %%-->

	enum ADCCapturePort {
		SRX,
		RX1,
		RX2
	};

	// <--%%

	// singleton
	static std::shared_ptr<WaveformWrxcalTestHelper> getInstance() ;


	WaveformWrxcalTestHelper();

    virtual ~WaveformWrxcalTestHelper();

	/**
	 * Called with:
	 *   [ENUM(SRX:RX1:RX2) Port]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   BOOL(OFF:ON) Streaming
	 *   ENUM(1:2:4:8:16:32:64:1024) Decimation
	 *   INT{0..64} Averaging
	 *   DOUBLE NCO (MHz)
	 *
	 */
	void get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(SRX:RX1:RX2) Port]
	 *   [BOOL(OFF:ON) Streaming]
	 *   [ENUM(1:2:4:8:16:32:64:1024) Decimation]
	 *   [INT{1..64} Averaging]
	 *   [DOUBLE NCO (MHz)]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

private:
	std::string getWaveName(WaveformWrxcalTestHelper::ADCCapturePort port);

// <--%%

};



// Add any Mplane namespace code here %%-->

// <--%%


} // Mplane

// Add any global namespace code here %%-->

// <--%%


#endif /* __WAVEFORMWRXCALTESTHELPER__H_*/
