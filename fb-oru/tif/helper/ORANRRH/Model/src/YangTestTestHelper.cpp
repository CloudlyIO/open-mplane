/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      YangTestTestHelper.cpp
 * \brief     Test helper for ORANRRH
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "YangTestTestHelper.h"

// Add any specific includes here %%-->
#include "IYangHandlerMgr.h"
#include "ILinuxPtpService.h"
#include "LinuxPtpService.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<YangTestTestHelper> YangTestTestHelper::getInstance()
{
	static std::shared_ptr<YangTestTestHelper> instance(std::make_shared<YangTestTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
YangTestTestHelper::YangTestTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
YangTestTestHelper::~YangTestTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void YangTestTestHelper::setSyncStatus( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * BOOL lock
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
#ifdef TEST_PTP_NOTIFICATION
	bool lockStatus = callList->find("lock")->toBool();
	std::shared_ptr<LinuxPtp> linuxPtp = std::dynamic_pointer_cast<LinuxPtp>(ILinuxPtp::singleton());
	linuxPtp->setLockStatus(lockStatus ? ILinuxPtp::LockStatus_T::LOCKED : ILinuxPtp::LockStatus_T::NOT_LOCKED);
#endif
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void YangTestTestHelper::testCallback( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING xpath
	// * INT value
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IYangHandlerMgr> handlerMgr(IYangHandlerMgr::singleton()) ;

	std::string xpath(callList->find("xpath")->toString()) ;

	bool ok = handlerMgr->testCallback(xpath, std::make_shared<DataVariant>( *(callList->find("value")) ) ) ;
	if (!ok)
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusERROR) ;
		returnList->find(RtiKeyword::INFO_VAR)->set("Callback failed") ;
	}
	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
