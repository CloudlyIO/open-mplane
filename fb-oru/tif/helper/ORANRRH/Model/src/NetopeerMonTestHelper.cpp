/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      NetopeerMonTestHelper.cpp
 * \brief     Test helper for ORANRRH
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "NetopeerMonTestHelper.h"

// Add any specific includes here %%-->
#include <string>

#include "INetopeerMonService.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<NetopeerMonTestHelper> NetopeerMonTestHelper::getInstance()
{
	static std::shared_ptr<NetopeerMonTestHelper> instance(std::make_shared<NetopeerMonTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
NetopeerMonTestHelper::NetopeerMonTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
NetopeerMonTestHelper::~NetopeerMonTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::getAppFailedCountSinceLastRead( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * UINT appFailedCountSinceLastRead
	//

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::getAutoRestart( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING autoRestartState
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	std::string autoRestartState( NetopeerMonitor->getAutoRestartString() );

	returnList->find("autoRestartState")->set(autoRestartState) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::getMonitorState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING monitorState
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	std::string monitorServiceState( NetopeerMonitor->getMonitorServiceStateString() );

	returnList->find("monitorState")->set(monitorServiceState) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::getServiceStatus( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING netopeerStatus
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	std::string ServicesStatus( NetopeerMonitor->getServiceStatusString() );
	auto netopeerState = returnList->find("netopeerStatus");
	// The above code can return nullptr
	if ( netopeerState != nullptr)
		netopeerState->set(ServicesStatus) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::restartService( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	ReturnType::State returnState( NetopeerMonitor->restartService() );

	returnList->find(RtiKeyword::STATUS_VAR)->set( (returnState == ReturnType::RT_OK ? RtiKeyword::StatusOK : RtiKeyword::StatusERROR) );
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::setAutoRestart( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(enable:disable) autoRestartState
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

    if(callList->find("autoRestartState") != nullptr)
    {
        std::string autoRestartState( callList->find("autoRestartState")->toString() );
        NetopeerMonitor->setAutoRestart(( autoRestartState == "enable" ? INetopeerMonService::enableDisable_T::ENABLE : INetopeerMonService::enableDisable_T::DISABLE) );

        returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusOK);
        return;
    }
    returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusERROR);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::setMonitorState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(enable:disable) monitorState
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

    if(callList->find("monitorState") != nullptr)
    {
        std::string monitorState( callList->find("monitorState")->toString() );
        NetopeerMonitor->setMonitorServiceState(( monitorState == "enable" ? INetopeerMonService::enableDisable_T::ENABLE : INetopeerMonService::enableDisable_T::DISABLE) );

        returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusOK);
        return;
    }
    returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusERROR);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::startService( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	ReturnType::State returnState( NetopeerMonitor->startService() );

	returnList->find(RtiKeyword::STATUS_VAR)->set( (returnState == ReturnType::RT_OK ? RtiKeyword::StatusOK : RtiKeyword::StatusERROR) );
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void NetopeerMonTestHelper::stopService( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<INetopeerMonService> NetopeerMonitor(INetopeerMonService::singleton());

	ReturnType::State returnState( NetopeerMonitor->stopService() );

	returnList->find(RtiKeyword::STATUS_VAR)->set( (returnState == ReturnType::RT_OK ? RtiKeyword::StatusOK : RtiKeyword::StatusERROR) );
	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
