/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      FreqConstTestHelper.h
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __FREQCONSTTESTHELPER__H_
#define __FREQCONSTTESTHELPER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "IRtiMsgParser.h"
#include "DataVariant.h"

// Add any specific includes here %%-->
#include "IFrequencyConst.h"
#include <map>
// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class FreqConstTestHelper
// Add any extra inheritance %%-->

// <--%%
{
public:

	// Add any class settings %%-->
    enum HighLow
    {
        LOWSIDE,
        HIGHSIDE
    };
	// <--%%

	// singleton
	static std::shared_ptr<FreqConstTestHelper> getInstance() ;


	FreqConstTestHelper();

    virtual ~FreqConstTestHelper();

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   FLOAT rx3gMinimum (kHz)
	 *   FLOAT rx3gMaximum (kHz)
	 *   FLOAT rxFilterMinimum (kHz)
	 *   FLOAT rxFilterMaximum (kHz)
	 *   FLOAT rxMinimum (kHz)
	 *   FLOAT rxMaximum (kHz)
	 *   FLOAT rxCentre (kHz)
	 *   FLOAT rxBandwidth (kHz)
	 *   FLOAT rxRaster (kHz)
	 *   ENUM(LOWSIDE:HIGHSIDE) rxCarrierFlip
	 *   ENUM(LOWSIDE:HIGHSIDE) rxLoInjection
	 *
	 */
	void getRx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   FLOAT tx3gMinimum (kHz)
	 *   FLOAT tx3gMaximum (kHz)
	 *   FLOAT txFilterMinimum (kHz)
	 *   FLOAT txFilterMaximum (kHz)
	 *   FLOAT txMinimum (kHz)
	 *   FLOAT txMaximum (kHz)
	 *   FLOAT txCentre (kHz)
	 *   FLOAT txBandwidth (kHz)
	 *   FLOAT txRaster (kHz)
	 *   ENUM(LOWSIDE:HIGHSIDE) txCarrierFlip
	 *   ENUM(LOWSIDE:HIGHSIDE) txLoInjection
	 *
	 */
	void getTx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [FLOAT{0..} 3gMinimum (kHz)]
	 *   [FLOAT{0..} 3gMaximum (kHz)]
	 *   [FLOAT{0..} filterMinimum (kHz)]
	 *   [FLOAT{0..} filterMaximum (kHz)]
	 *   [FLOAT{0..} minimum (kHz)]
	 *   [FLOAT{0..} maximum (kHz)]
	 *   [FLOAT{0..} centre (kHz)]
	 *   [FLOAT{0..} bandwidth (kHz)]
	 *   [FLOAT{0..} raster (kHz)]
	 *   [ENUM(LOWSIDE:HIGHSIDE) carrierFlip]
	 *   [ENUM(LOWSIDE:HIGHSIDE) loInjection]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setRx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [FLOAT{0..} 3gMinimum (kHz)]
	 *   [FLOAT{0..} 3gMaximum (kHz)]
	 *   [FLOAT{0..} filterMinimum (kHz)]
	 *   [FLOAT{0..} filterMaximum (kHz)]
	 *   [FLOAT{0..} minimum (kHz)]
	 *   [FLOAT{0..} maximum (kHz)]
	 *   [FLOAT{0..} centre (kHz)]
	 *   [FLOAT{0..} bandwidth (kHz)]
	 *   [FLOAT{0..} raster (kHz)]
	 *   [ENUM(LOWSIDE:HIGHSIDE) carrierFlip]
	 *   [ENUM(LOWSIDE:HIGHSIDE) loInjection]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setTx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->
    bool checkState(ReturnType::State ret, const std::string& param, DataVariantList *returnList) const;

// <--%%

};



// Add any Mplane namespace code here %%-->

// <--%%


} // Mplane

// Add any global namespace code here %%-->

// <--%%


#endif /* __FREQCONSTTESTHELPER__H_*/
