/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperFpgaTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERFPGATESTHANDLER__H_
#define __HELPERFPGATESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "FpgaTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperFpgaTestHandler: public EntryFunc
{
public:

	HelperFpgaTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperFpgaTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   FLOAT temperature (DegC)
	 *
	 */
	void getTemperature( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT Offset
	 *   INT{0..65535} WriteValue
	 *   INT{0..65535} Mask
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void modify( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   BOOL(OFF:ON) enable
	 *   INT Offset
	 *   INT port
	 *   [INT mask]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void monitor( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void monitorShow( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT Offset
	 *   [INT Count]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   HEXINT[] Hex
	 *
	 */
	void read( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT Offset
	 *   INT{0..65535} WriteValue
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void write( DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<FpgaTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERFPGATESTHANDLER__H_*/
