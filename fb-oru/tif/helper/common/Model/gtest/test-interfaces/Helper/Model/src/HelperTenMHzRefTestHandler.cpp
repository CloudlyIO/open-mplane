/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperTenMHzRefTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperTenMHzRefTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/ref", "Common 10MHz control and status", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBnc1",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] bnc1",
			"Gets BNC1 configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBnc2",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] bnc2",
			"Gets BNC2 configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBnc3",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] bnc3",
			"Gets BNC3 configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBnc4",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] bnc4",
			"Gets BNC4 configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBnc5",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] bnc5",
			"Gets BNC5 configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getBncConfig",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] config",
			"Gets BNC configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getManualMode",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] mode",
			"Get the current manual mode",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getMode",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] mode",
			"Get the current mode",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getPresent",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] present",
			"Get the present indication",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getSyncIn",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] syncIn",
			"Gets sync in configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/getSyncOut",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],STRING[] syncOut",
			"Gets sync out configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBnc1",
			"ENUM(inputToRef1:outputFromRef1) bnc1",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the BNC1 configuration to an input/output to/from FPGA ref 1",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBnc2",
			"ENUM(outputFromBnc3:outputFromRef2) bnc2",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the BNC2 configuration to an output from BNC3 or an output from FPGA ref 2",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBnc3",
			"ENUM(inputToRef3:outputFromRef3) bnc3",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the BNC3 configuration to an input/output to/from FPGA ref 3",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBnc4",
			"ENUM(outputFromBnc5:outputFromRef4) bnc4",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the BNC4 configuration to an output from BNC3 or an output from FPGA ref 4",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBnc5",
			"ENUM(inputToRef5:outputFromRef5) bnc5",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the BNC5 configuration to an input/output to/from FPGA ref 5",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setBncConfig",
			"ENUM(enable:disable) config",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Enables/Disables the BNC configuration",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setManualMode",
			"ENUM(ext:int) mode",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set the manual operating mode",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setMode",
			"ENUM(auto:manual) mode",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set the operating mode",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setSyncIn",
			"ENUM(enable:disable) syncIn",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the sync in enable/disable",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperTenMHzRefTestHandler("/ref/setSyncOut",
			"ENUM(enable:disable) syncOut",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Sets the sync out enable/disable",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperTenMHzRefTestHandler::HelperTenMHzRefTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(TenMHzRefTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperTenMHzRefTestHandler::~HelperTenMHzRefTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperTenMHzRefTestHandler::operator()(const std::string& functionName)
{



    if( functionName == "getManualMode")
    {
        getManualMode( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getMode")
    {
        getMode( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "getPresent")
    {
        getPresent( callVarList, returnVarList  );
        return "" ;
    }




    if( functionName == "setManualMode")
    {
        setManualMode( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setMode")
    {
        setMode( callVarList, returnVarList  );
        return "" ;
    }


    return "";
}



//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::getManualMode(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] mode
	//
	mHelper->getManualMode( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::getMode(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] mode
	//
	mHelper->getMode( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::getPresent(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] present
	//
	mHelper->getPresent( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::setManualMode(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(ext:int) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setManualMode( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperTenMHzRefTestHandler::setMode(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(auto:manual) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setMode( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}











// Add any statics, private methods etc here %%-->

// <--%%
