/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperCalTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERCALTESTHANDLER__H_
#define __HELPERCALTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "CalTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperCalTestHandler: public EntryFunc
{
public:

	HelperCalTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperCalTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void load( DataVariantList *callList, DataVariantList *returnList );


	/**
	 * Setter method for variable url
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param value DataVariant value
	 * @param returnList DataVariantList use to return variable value
	 * @return true if variable set; false if unable to set variable
	 *
	 */
	static bool urlSet(  const std::string& pathname, DataVariant *value, DataVariantList *returnList ) ;

	/**
	 * Getter method for variable url
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void urlGet(  const std::string& pathname, DataVariantList *returnList ) ;





// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<CalTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERCALTESTHANDLER__H_*/
