/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperPimTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERPIMTESTHANDLER__H_
#define __HELPERPIMTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "PimTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperPimTestHandler: public EntryFunc
{
public:

	HelperPimTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperPimTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void apiVersion( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void pdp2( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void capture( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void disableStim( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void dispersiveSearch( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void dump( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void enableStim( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT addr
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void frd( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void fullSearch( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT addr
	 *   INT data
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void fwr( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [STRING arg0]
	 *   [STRING arg1]
	 *   [STRING arg2]
	 *   [STRING arg3]
	 *   [STRING arg4]
	 *   [STRING arg5]
	 *   [STRING arg6]
	 *   [STRING arg7]
	 *   [STRING arg8]
	 *   [STRING arg9]
	 *   [STRING arg10]
	 *   [STRING arg11]
	 *   [STRING arg12]
	 *   [STRING arg13]
	 *   [STRING arg14]
	 *   [STRING arg15]
	 *   [STRING arg16]
	 *   [STRING arg17]
	 *   [STRING arg18]
	 *   [STRING arg19]
	 *   [STRING arg20]
	 *   [STRING arg21]
	 *   [STRING arg22]
	 *   [STRING arg23]
	 *   [STRING arg24]
	 *   [STRING arg25]
	 *   [STRING arg26]
	 *   [STRING arg27]
	 *   [STRING arg28]
	 *   [STRING arg29]
	 *   [STRING arg30]
	 *   [STRING arg31]
	 *   [STRING arg32]
	 *   [STRING arg33]
	 *   [STRING arg34]
	 *   [STRING arg35]
	 *   [STRING arg36]
	 *   [STRING arg37]
	 *   [STRING arg38]
	 *   [STRING arg39]
	 *   [STRING arg40]
	 *   [STRING arg41]
	 *   [STRING arg42]
	 *   [STRING arg43]
	 *   [STRING arg44]
	 *   [STRING arg45]
	 *   [STRING arg46]
	 *   [STRING arg47]
	 *   [STRING arg48]
	 *   [STRING arg49]
	 *   [STRING arg50]
	 *   [STRING arg51]
	 *   [STRING arg52]
	 *   [STRING arg53]
	 *   [STRING arg54]
	 *   [STRING arg55]
	 *   [STRING arg56]
	 *   [STRING arg57]
	 *   [STRING arg58]
	 *   [STRING arg59]
	 *   [STRING arg60]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void get( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void getCoeffs( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void logClose( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void logOpen( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void logShow( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void mimoSearch( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void orthogonalise( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void pdp( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *   INT port
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void portClose( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *   INT port
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void portOpen( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void portShow( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void reset( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void search( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	 *   [INT msgId]
	 *   [INT command]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) succeeded]
	 *   [INT buildNo]
	 *   [INT debug]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	 *   [INT uptime]
	 *   [INT t]
	 *   [INT dt]
	 *   [INT block]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) canceller]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) track]
	 *   [INT trackN]
	 *   [INT lockN]
	 *   [INT Ta]
	 *   [INT Tb]
	 *   [INT CNL3]
	 *   [INT CNL5]
	 *   [INT CNL7]
	 *   [INT FOM0]
	 *   [INT FOM1]
	 *   [INT FOM2]
	 *   [INT FOM3]
	 *   [INT pFOM]
	 *   [INT dFOM]
	 *   [INT stimRe]
	 *   [INT stimIm]
	 *   [INT pimGain]
	 *   [INT period]
	 *   [INT pMin]
	 *   [INT pimState]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) adaptCanceller]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) adaptOrthogonalisation]
	 *   [INT branches]
	 *   [INT mask]
	 *   [INT afStart]
	 *   [INT dlBbSrc]
	 *   [INT ulBbSrc]
	 *   [INT ulBbDst]
	 *   [INT srcBw]
	 *   [INT dstBw]
	 *   [INT dl0]
	 *   [INT dl1]
	 *   [INT dl2]
	 *   [INT f0]
	 *   [INT f1]
	 *   [INT f2]
	 *   [INT fd0]
	 *   [INT fd1]
	 *   [INT tssi0]
	 *   [INT tssi1]
	 *   [INT tssi2]
	 *   [INT tssiPim]
	 *   [INT testCase]
	 *   [INT n]
	 *   [INT addr]
	 *   [INT data]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void set( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(5:10:15:20) bw (MHz)
	 *   INT dl1
	 *   INT dl2
	 *   INT dlm1
	 *   INT dlm2
	 *   INT ul
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void setCarriers( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void sisoSearch( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void start( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void startTrack( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void startTssi( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void stop( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void stopTrack( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void stopTssi( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void update( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void xcorr( DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<PimTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERPIMTESTHANDLER__H_*/
