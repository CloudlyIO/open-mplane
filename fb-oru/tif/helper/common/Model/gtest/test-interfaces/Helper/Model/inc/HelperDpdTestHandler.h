/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperDpdTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERDPDTESTHANDLER__H_
#define __HELPERDPDTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "DpdTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperDpdTestHandler: public EntryFunc
{
public:

	HelperDpdTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperDpdTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void apiVersion( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	 *   [INT msgId]
	 *   [INT buildNo]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	 *   [INT uptime]
	 *   [INT t]
	 *   [INT dt]
	 *   [INT block]
	 *   [INT state]
	 *   [INT n]
	 *   [INT addr]
	 *   [INT data]
	 *   [INT id]
	 *   [INT level]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void capture( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void dumpFpga( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void dumpLuts( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT addr
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void frd( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT addr
	 *   INT data
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void fwr( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [STRING arg0]
	 *   [STRING arg1]
	 *   [STRING arg2]
	 *   [STRING arg3]
	 *   [STRING arg4]
	 *   [STRING arg5]
	 *   [STRING arg6]
	 *   [STRING arg7]
	 *   [STRING arg8]
	 *   [STRING arg9]
	 *   [STRING arg10]
	 *   [STRING arg11]
	 *   [STRING arg12]
	 *   [STRING arg13]
	 *   [STRING arg14]
	 *   [STRING arg15]
	 *   [STRING arg16]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void get( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void logClose( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void logOpen( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *   INT port
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void portClose( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	 *   INT port
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void portOpen( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void reset( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void reboot( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	 *   [INT msgId]
	 *   [INT buildNo]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	 *   [INT uptime]
	 *   [INT t]
	 *   [INT dt]
	 *   [INT block]
	 *   [INT state]
	 *   [INT n]
	 *   [INT addr]
	 *   [INT data]
	 *   [INT id]
	 *   [INT level]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void runTest( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	 *   [INT msgId]
	 *   [INT buildNo]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	 *   [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	 *   [INT uptime]
	 *   [INT t]
	 *   [INT dt]
	 *   [INT block]
	 *   [INT state]
	 *   [INT n]
	 *   [INT addr]
	 *   [INT data]
	 *   [INT id]
	 *   [INT level]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void set( DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<DpdTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERDPDTESTHANDLER__H_*/
