/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperBistTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperBistTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperBistTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/bist", "Built-in Self Test", msgParser, settings) ) ;




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/bist/Initialisation", "BOOL(FAIL:PASS)",
			"Software initialised all devices correctly",
			InitialisationGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/bist/PLL", "BOOL(FAIL:PASS)",
			"All PLLs are locked",
			PLLGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperBistTestHandler::HelperBistTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(BistTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperBistTestHandler::~HelperBistTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperBistTestHandler::operator()(const std::string& functionName)
{


    return "";
}




//-------------------------------------------------------------------------------------------------------------
void HelperBistTestHandler::InitialisationGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/bist/Initialisation"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<BistTestHelper> helper(BistTestHelper::getInstance()) ;
	helper->InitialisationGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperBistTestHandler::PLLGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/bist/PLL"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<BistTestHelper> helper(BistTestHelper::getInstance()) ;
	helper->PLLGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
