/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperCarrierTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERCARRIERTESTHANDLER__H_
#define __HELPERCARRIERTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "CarrierTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperCarrierTestHandler: public EntryFunc
{
public:

	HelperCarrierTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperCarrierTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

	/**
	 * Called with:
	 *   INT Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *   INT Index
	 *   ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type
	 *   ENUM(DISABLE:ENABLE) State
	 *   ENUM(NONE:TX:CW:OTHER) SigType
	 *   FLOAT TxPower (dBm)
	 *   FLOAT TxFreq (kHz)
	 *   FLOAT RxFreq (kHz)
	 *   INT GroupUp
	 *   INT GroupDown
	 *   FLOAT TxScaling (dBm)
	 *   FLOAT UplinkNoise (dBm)
	 *   BOOL(off:on) Loopback
	 *   INT[] TxContainer
	 *   INT[] RxContainer
	 *   INT[] TxFibre
	 *   INT[] RxFibre
	 *
	 */
	void get( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT Index
	 *   [ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type]
	 *   [ENUM(DISABLE:ENABLE) State]
	 *   [ENUM(NONE:TX:CW:OTHER) SigType]
	 *   [FLOAT TxPower (dBm)]
	 *   [FLOAT TxFreq (kHz)]
	 *   [FLOAT RxFreq (kHz)]
	 *   [INT GroupUp]
	 *   [INT GroupDown]
	 *   [FLOAT TxScaling (dBm)]
	 *   [INT[] TxContainer]
	 *   [INT[] RxContainer]
	 *   [INT[] TxFibre]
	 *   [INT[] RxFibre]
	 *   [FLOAT UplinkNoise (dBm)]
	 *   [BOOL(off:on) Loopback]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void set( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT Index
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void show( DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void showAll( DataVariantList *callList, DataVariantList *returnList );



	/**
	 * Getter method for read-only variable NumCarriers
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void NumCarriersGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable RxPaths
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void RxPathsGet(  const std::string& pathname, DataVariantList *returnList ) ;

	/**
	 * Getter method for read-only variable TxPaths
	 *
	 * @param pathname Variable path name used as the variable name in the returnList
	 * @param returnList DataVariantList use to return variable value
	 *
	 */
	static void TxPathsGet(  const std::string& pathname, DataVariantList *returnList ) ;




// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<CarrierTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERCARRIERTESTHANDLER__H_*/
