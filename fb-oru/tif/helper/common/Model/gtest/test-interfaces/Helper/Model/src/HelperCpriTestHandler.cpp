/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperCpriTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperCpriTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/cpri", "CPRI Interface functions", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCpriTestHandler("/cpri/get",
			"INT Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT Index",
			"Get current CPRI parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCpriTestHandler("/cpri/set",
			"INT Index,[ENUM(DISABLE:ENABLE) State],[INT GroupUp],[BOOL(off:on) Loopback]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set CPRI parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCpriTestHandler("/cpri/showAll",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show current status of all CPRI ports and cores",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCpriTestHandler("/cpri/showCtl",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show status info of the CPRI controller",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCpriTestHandler("/cpri/showPort",
			"INT Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show details of a CPRI port",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/cpri/NumPorts", "INT",
			"Number of ports",
			NumPortsGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperCpriTestHandler::HelperCpriTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(CpriTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperCpriTestHandler::~HelperCpriTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperCpriTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "get")
    {
        get( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showAll")
    {
        showAll( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showCtl")
    {
        showCtl( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showPort")
    {
        showPort( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::get(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT Index
	//
	mHelper->get( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// * [ENUM(DISABLE:ENABLE) State]
	// * [INT GroupUp]
	// * [BOOL(off:on) Loopback]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::showAll(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showAll( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::showCtl(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showCtl( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::showPort(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showPort( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void HelperCpriTestHandler::NumPortsGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/cpri/NumPorts"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<CpriTestHelper> helper(CpriTestHelper::getInstance()) ;
	helper->NumPortsGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
