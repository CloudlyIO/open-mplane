/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperSystemTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperSystemTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/system", "System information", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperSystemTestHandler("/system/gitVersions",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show the git versions for this build",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperSystemTestHandler("/system/powerDown",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Shutdown application and enter low power state",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperSystemTestHandler("/system/reboot",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Reboot the board",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperSystemTestHandler("/system/services",
			"ENUM(suspend:resume) control",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Allows all application services to be temporarily suspended and resumed",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperSystemTestHandler("/system/setClockIn",
			"ENUM(10MHz:FIBRE) clkin",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Select the clock source to the system clock",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Application", "STRING",
			"Shows the build application string",
			ApplicationGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Board", "STRING",
			"Shows the build board string",
			BoardGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Build", "INT",
			"Shows the build number",
			BuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/ClockIn", "STRING",
			"Current clock source to the system clock",
			ClockInGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/CurrentFpgaBuild", "INT",
			"Shows the FPGA build number of the currently fitted FPGA",
			CurrentFpgaBuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Customer", "STRING",
			"Shows the build customer string",
			CustomerGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Duplex", "STRING",
			"Shows the build duplex string",
			DuplexGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FibreInterface", "STRING",
			"Shows the build fibre interface string",
			FibreInterfaceGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FpgaBuild", "STRING",
			"Shows the FPGA build number the software was built with",
			FpgaBuildGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/FpgaPart", "STRING",
			"Shows the FPGA part number the software was built with",
			FpgaPartGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/system/Version", "STRING",
			"Shows the application version string",
			VersionGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperSystemTestHandler::HelperSystemTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(SystemTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperSystemTestHandler::~HelperSystemTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperSystemTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "gitVersions")
    {
        gitVersions( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "powerDown")
    {
        powerDown( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reboot")
    {
        reboot( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "services")
    {
        services( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "setClockIn")
    {
        setClockIn( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::gitVersions(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->gitVersions( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::powerDown(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->powerDown( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::reboot(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reboot( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::services(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(suspend:resume) control
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->services( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::setClockIn(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(10MHz:FIBRE) clkin
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->setClockIn( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::ApplicationGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Application"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->ApplicationGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::BoardGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Board"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->BoardGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::BuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Build"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->BuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::ClockInGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/ClockIn"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->ClockInGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::CurrentFpgaBuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/CurrentFpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->CurrentFpgaBuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::CustomerGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Customer"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->CustomerGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::DuplexGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Duplex"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->DuplexGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::FibreInterfaceGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FibreInterface"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FibreInterfaceGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::FpgaBuildGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FpgaBuildGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::FpgaPartGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaPart"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->FpgaPartGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperSystemTestHandler::VersionGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Version"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<SystemTestHelper> helper(SystemTestHelper::getInstance()) ;
	helper->VersionGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
