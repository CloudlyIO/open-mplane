/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperCarrierTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperCarrierTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/Carrier", "Common Carrier settings functions", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCarrierTestHandler("/Carrier/get",
			"INT Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],INT Index,ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type,ENUM(DISABLE:ENABLE) State,ENUM(NONE:TX:CW:OTHER) SigType,FLOAT TxPower (dBm),FLOAT TxFreq (kHz),FLOAT RxFreq (kHz),INT GroupUp,INT GroupDown,FLOAT TxScaling (dBm),FLOAT UplinkNoise (dBm),BOOL(off:on) Loopback,INT[] TxContainer,INT[] RxContainer,INT[] TxFibre,INT[] RxFibre",
			"Get current carrier parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCarrierTestHandler("/Carrier/set",
			"INT Index,[ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type],[ENUM(DISABLE:ENABLE) State],[ENUM(NONE:TX:CW:OTHER) SigType],[FLOAT TxPower (dBm)],[FLOAT TxFreq (kHz)],[FLOAT RxFreq (kHz)],[INT GroupUp],[INT GroupDown],[FLOAT TxScaling (dBm)],[INT[] TxContainer],[INT[] RxContainer],[INT[] TxFibre],[INT[] RxFibre],[FLOAT UplinkNoise (dBm)],[BOOL(off:on) Loopback]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Set carrier parameters",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCarrierTestHandler("/Carrier/show",
			"INT Index",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show debug details of a carrier",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperCarrierTestHandler("/Carrier/showAll",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show debug details of all carriers",
			msgParser, settings))
	);




	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/Carrier/NumCarriers", "INT",
			"Number of carriers",
			NumCarriersGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/Carrier/RxPaths", "INT",
			"Number of RX paths",
			RxPathsGet,
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new TestReadVar("/Carrier/TxPaths", "INT",
			"Number of TX paths",
			TxPathsGet,
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperCarrierTestHandler::HelperCarrierTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(CarrierTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperCarrierTestHandler::~HelperCarrierTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperCarrierTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "get")
    {
        get( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "show")
    {
        show( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "showAll")
    {
        showAll( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::get(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT Index
	// * ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type
	// * ENUM(DISABLE:ENABLE) State
	// * ENUM(NONE:TX:CW:OTHER) SigType
	// * FLOAT TxPower (dBm)
	// * FLOAT TxFreq (kHz)
	// * FLOAT RxFreq (kHz)
	// * INT GroupUp
	// * INT GroupDown
	// * FLOAT TxScaling (dBm)
	// * FLOAT UplinkNoise (dBm)
	// * BOOL(off:on) Loopback
	// * INT[] TxContainer
	// * INT[] RxContainer
	// * INT[] TxFibre
	// * INT[] RxFibre
	//
	mHelper->get( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// * [ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA:PIM5:PIM10:PIM15:PIM20) Type]
	// * [ENUM(DISABLE:ENABLE) State]
	// * [ENUM(NONE:TX:CW:OTHER) SigType]
	// * [FLOAT TxPower (dBm)]
	// * [FLOAT TxFreq (kHz)]
	// * [FLOAT RxFreq (kHz)]
	// * [INT GroupUp]
	// * [INT GroupDown]
	// * [FLOAT TxScaling (dBm)]
	// * [INT[] TxContainer]
	// * [INT[] RxContainer]
	// * [INT[] TxFibre]
	// * [INT[] RxFibre]
	// * [FLOAT UplinkNoise (dBm)]
	// * [BOOL(off:on) Loopback]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::show(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->show( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::showAll(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->showAll( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::NumCarriersGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/Carrier/NumCarriers"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<CarrierTestHelper> helper(CarrierTestHelper::getInstance()) ;
	helper->NumCarriersGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::RxPathsGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/Carrier/RxPaths"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<CarrierTestHelper> helper(CarrierTestHelper::getInstance()) ;
	helper->RxPathsGet( pathname, returnList ) ;
}


//-------------------------------------------------------------------------------------------------------------
void HelperCarrierTestHandler::TxPathsGet(  const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/Carrier/TxPaths"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	// <--%%

	std::shared_ptr<CarrierTestHelper> helper(CarrierTestHelper::getInstance()) ;
	helper->TxPathsGet( pathname, returnList ) ;
}








// Add any statics, private methods etc here %%-->

// <--%%
