/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperFreqConstTestHandler.h
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __HELPERFREQCONSTTESTHANDLER__H_
#define __HELPERFREQCONSTTESTHANDLER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "FreqConstTestHelper.h"
#include "IRtiMsgParser.h"
#include "Nodes/EntryFunc.h"

// Add any specific includes here %%-->

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class HelperFreqConstTestHandler: public EntryFunc
{
public:

	HelperFreqConstTestHandler( const std::string& pathname, const std::string& comment,
    		const std::string& callFields, const std::string& returnFields,
    		IRtiMsgParser& msgParser, IRtiSettings& settings);

    virtual ~HelperFreqConstTestHandler();

    static void registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings) ;

protected:

    virtual std::string operator()(const std::string& functionName) ;

    // Called with:
    // *
    // Returns:
    // * ENUM(OK:ERROR) Status=OK
    // * [STRING Info]
    // * [STRING Message]
    // * FLOAT Rx_3GMinimum (kHz)
    // * FLOAT Rx_3GMaximum (kHz)
    // * FLOAT Rx_FilterMinimum (kHz)
    // * FLOAT Rx_FilterMaximum (kHz)
    // * FLOAT Rx_Minimum (kHz)
    // * FLOAT Rx_Maximum (kHz)
    // * FLOAT Rx_Centre (kHz)
    // * FLOAT Rx_Bandwidth (kHz)
    // * FLOAT Rx_Raster (kHz)
    // * ENUM(LOWSIDE:HIGHSIDE) Rx_CarrierFlip
    // * ENUM(LOWSIDE:HIGHSIDE) Rx_LOInjection
    //
    void getRx( DataVariantList *callList, DataVariantList *returnList );

    // Called with:
    // *
    // Returns:
    // * ENUM(OK:ERROR) Status=OK
    // * [STRING Info]
    // * [STRING Message]
    // * FLOAT Tx_3GMinimum (kHz)
    // * FLOAT Tx_3GMaximum (kHz)
    // * FLOAT Tx_FilterMinimum (kHz)
    // * FLOAT Tx_FilterMaximum (kHz)
    // * FLOAT Tx_Minimum (kHz)
    // * FLOAT Tx_Maximum (kHz)
    // * FLOAT Tx_Centre (kHz)
    // * FLOAT Tx_Bandwidth (kHz)
    // * FLOAT Tx_Raster (kHz)
    // * ENUM(LOWSIDE:HIGHSIDE) Tx_CarrierFlip
    // * ENUM(LOWSIDE:HIGHSIDE) Tx_LOInjection
    //
    void getTx( DataVariantList *callList, DataVariantList *returnList );

    // Called with:
    // * FLOAT m3GMinimum (kHz)
    // * FLOAT m3GMaximum (kHz)
    // * FLOAT mFilterMinimum (kHz)
    // * FLOAT mFilterMaximum (kHz)
    // * FLOAT mMinimum (kHz)
    // * FLOAT mMaximum (kHz)
    // * FLOAT mCentre (kHz)
    // * FLOAT mBandwidth (kHz)
    // * FLOAT mRaster (kHz)
    // * ENUM(LOWSIDE:HIGHSIDE) mCarrierFlip
    // * ENUM(LOWSIDE:HIGHSIDE) mLOInjection
    // Returns:
    // * ENUM(OK:ERROR) Status=OK
    // * [STRING Info]
    // * [STRING Message]
    //
    void setRx( DataVariantList *callList, DataVariantList *returnList );

    // Called with:
    // * FLOAT m3GMinimum (kHz)
    // * FLOAT m3GMaximum (kHz)
    // * FLOAT mFilterMinimum (kHz)
    // * FLOAT mFilterMaximum (kHz)
    // * FLOAT mMinimum (kHz)
    // * FLOAT mMaximum (kHz)
    // * FLOAT mCentre (kHz)
    // * FLOAT mBandwidth (kHz)
    // * FLOAT mRaster (kHz)
    // * ENUM(LOWSIDE:HIGHSIDE) mCarrierFlip
    // * ENUM(LOWSIDE:HIGHSIDE) mLOInjection
    // Returns:
    // * ENUM(OK:ERROR) Status=OK
    // * [STRING Info]
    // * [STRING Message]
    //
    void setTx( DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

// <--%%

private:
	std::shared_ptr<FreqConstTestHelper> mHelper ;
};



} // Mplane

#endif /* __HELPERFREQCONSTTESTHANDLER__H_*/
