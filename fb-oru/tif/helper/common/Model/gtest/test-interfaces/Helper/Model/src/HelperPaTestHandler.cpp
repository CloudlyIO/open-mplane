/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperPaTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperPaTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperPaTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/pa", "Common PA control and measurement", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperPaTestHandler("/pa/getTemperature",
			"[INT index=1],[INT sensor=1]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message], FLOAT result (DegC)",
			"Gets the temperature of the PA and sensor specified",
			msgParser, settings))
	);

	msgParser.add( static_cast<RtiDirEntry *>(new HelperPaTestHandler("/pa/getID", "[INT index=1]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message], STRING[] result",
			"Gets the PA ID",
			msgParser, settings))
	);



}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperPaTestHandler::HelperPaTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(PaTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperPaTestHandler::~HelperPaTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperPaTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "getTemperature")
    {
    	getTemperature( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}

//-------------------------------------------------------------------------------------------------------------
void HelperPaTestHandler::getID( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT index]
	//
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING[] result
	//

	// Insert your code here : %%-->
	mHelper->getID( mMsgParser, callList, returnList ) ;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void HelperPaTestHandler::getTemperature(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT index
	// * [INT sensor]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT result (DegC)
	//
	mHelper->getTemperature( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
