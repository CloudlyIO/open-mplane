/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperFpgaTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperFpgaTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/fpga", "FPGA device", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/getTemperature",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],FLOAT temperature (DegC)",
			"Retrieves the FPGA core temperature",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/modify",
			"INT Offset,INT{0..65535} WriteValue,INT{0..65535} Mask",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Modify fpga register (only changes those bits where mask bit is 1)",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/monitor",
			"BOOL(OFF:ON) enable,INT Offset,INT port,[INT mask]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Monitor fpga register",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/monitorShow",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Display all fpga register monitors",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/read",
			"INT Offset,[INT Count]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message],HEXINT[] Hex",
			"Read fpga register",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperFpgaTestHandler("/fpga/write",
			"INT Offset,INT{0..65535} WriteValue",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Write fpga register",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperFpgaTestHandler::HelperFpgaTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(FpgaTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperFpgaTestHandler::~HelperFpgaTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperFpgaTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "getTemperature")
    {
        getTemperature( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "modify")
    {
        modify( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "monitor")
    {
        monitor( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "monitorShow")
    {
        monitorShow( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "read")
    {
        read( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "write")
    {
        write( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::getTemperature(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT temperature (DegC)
	//
	mHelper->getTemperature( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::modify(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Offset
	// * INT{0..65535} WriteValue
	// * INT{0..65535} Mask
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->modify( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::monitor(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * BOOL(OFF:ON) enable
	// * INT Offset
	// * INT port
	// * [INT mask]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->monitor( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::monitorShow(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->monitorShow( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::read(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Offset
	// * [INT Count]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * HEXINT[] Hex
	//
	mHelper->read( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperFpgaTestHandler::write(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Offset
	// * INT{0..65535} WriteValue
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->write( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
