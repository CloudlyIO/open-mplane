/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperDpdTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperDpdTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/dpd", "DPD control", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/apiVersion",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/capture",
			"[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response],[INT msgId],[INT buildNo],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole],[INT uptime],[INT t],[INT dt],[INT block],[INT state],[INT n],[INT addr],[INT data],[INT id],[INT level]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/dumpFpga",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/dumpLuts",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/frd",
			"INT addr",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/fwr",
			"INT addr,INT data",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/get",
			"[STRING arg0],[STRING arg1],[STRING arg2],[STRING arg3],[STRING arg4],[STRING arg5],[STRING arg6],[STRING arg7],[STRING arg8],[STRING arg9],[STRING arg10],[STRING arg11],[STRING arg12],[STRING arg13],[STRING arg14],[STRING arg15],[STRING arg16]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/logClose",
			"ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/logOpen",
			"ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/portClose",
			"ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type,INT port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/portOpen",
			"ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type,INT port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/reset",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/reboot",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/runTest",
			"[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response],[INT msgId],[INT buildNo],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole],[INT uptime],[INT t],[INT dt],[INT block],[INT state],[INT n],[INT addr],[INT data],[INT id],[INT level]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperDpdTestHandler("/dpd/set",
			"[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response],[INT msgId],[INT buildNo],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab],[ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole],[INT uptime],[INT t],[INT dt],[INT block],[INT state],[INT n],[INT addr],[INT data],[INT id],[INT level]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperDpdTestHandler::HelperDpdTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(DpdTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperDpdTestHandler::~HelperDpdTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperDpdTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "apiVersion")
    {
        apiVersion( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "capture")
    {
        capture( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "dumpFpga")
    {
        dumpFpga( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "dumpLuts")
    {
        dumpLuts( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "frd")
    {
        frd( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "fwr")
    {
        fwr( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "get")
    {
        get( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "logClose")
    {
        logClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "logOpen")
    {
        logOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portClose")
    {
        portClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portOpen")
    {
        portOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reset")
    {
        reset( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reboot")
    {
        reboot( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "runTest")
    {
        runTest( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::apiVersion(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->apiVersion( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::capture(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	// * [INT msgId]
	// * [INT buildNo]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT block]
	// * [INT state]
	// * [INT n]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->capture( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::dumpFpga(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->dumpFpga( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::dumpLuts(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->dumpLuts( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::frd(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->frd( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::fwr(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// * INT data
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->fwr( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::get(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [STRING arg0]
	// * [STRING arg1]
	// * [STRING arg2]
	// * [STRING arg3]
	// * [STRING arg4]
	// * [STRING arg5]
	// * [STRING arg6]
	// * [STRING arg7]
	// * [STRING arg8]
	// * [STRING arg9]
	// * [STRING arg10]
	// * [STRING arg11]
	// * [STRING arg12]
	// * [STRING arg13]
	// * [STRING arg14]
	// * [STRING arg15]
	// * [STRING arg16]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->get( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::logClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->logClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::logOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->logOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::portClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::portOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(REPLY:EVENT:LOG:MATLAB:TEXT) type
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::reset(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reset( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::reboot(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reboot( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::runTest(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	// * [INT msgId]
	// * [INT buildNo]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT block]
	// * [INT state]
	// * [INT n]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->runTest( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperDpdTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) response]
	// * [INT msgId]
	// * [INT buildNo]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logTrace]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logVerbose]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logMatlab]
	// * [ENUM(no:yes:off:on:disabled:enabled:auto:NACK:ACK:none:error) logConsole]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT block]
	// * [INT state]
	// * [INT n]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
