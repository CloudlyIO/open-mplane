/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HelperImagesOsTestHandler.cpp
 * \brief     Test methods for Helper
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->
 *
 * <--%%
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "HelperImagesOsTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void HelperImagesOsTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/image/os", "OS Image Management settings", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new HelperImagesOsTestHandler("/image/os/clean",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Clean flash of old OS images in order to free-up space",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperImagesOsTestHandler("/image/os/install",
			"STRING build",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Get and install OS image",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperImagesOsTestHandler("/image/os/installFile",
			"STRING filename",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Get and install OS image from a file",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new HelperImagesOsTestHandler("/image/os/show",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show OS image information",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HelperImagesOsTestHandler::HelperImagesOsTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(ImagesOsTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HelperImagesOsTestHandler::~HelperImagesOsTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
std::string HelperImagesOsTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "clean")
    {
        clean( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "install")
    {
        install( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "installFile")
    {
        installFile( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "show")
    {
        show( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void HelperImagesOsTestHandler::clean(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->clean( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperImagesOsTestHandler::install(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING build
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->install( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperImagesOsTestHandler::installFile(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING filename
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->installFile( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HelperImagesOsTestHandler::show(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->show( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
