/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CarrierFreqOffsetTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "CarrierFreqOffsetTestHelper.h"

// Add any specific includes here %%-->
#include "stringfunc.hpp"
#include "Power.h"
#include "Frequency.h"
#include "ICarrierServer.h"
#include "ICarrierModel.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<CarrierFreqOffsetTestHelper> CarrierFreqOffsetTestHelper::getInstance()
{
	static std::shared_ptr<CarrierFreqOffsetTestHelper> instance(std::make_shared<CarrierFreqOffsetTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
CarrierFreqOffsetTestHelper::CarrierFreqOffsetTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CarrierFreqOffsetTestHelper::~CarrierFreqOffsetTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierFreqOffsetTestHelper::getFreqOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT TxFreqOffset (kHz)
	// * FLOAT RxFreqOffset (kHz)
	//

	// Insert your code here : %%-->
	bool ok ;
	const ICarrier& carrier( getCarrier(ok, callList, returnList) ) ;
	if (!ok)
		return ;

#define MODEL_GET_FREQUENCY(nm, var) \
{ \
	DataVariant* nm(returnList->find(#nm)) ;\
	nm->set( (float)(var).getDbl(Frequency::str2unit(nm->getUnits())) ) ;\
}

	// * FLOAT TxFreqOffset
	MODEL_GET_FREQUENCY(TxFreqOffset, carrier.getTxFrequencyOffset());

	// * FLOAT RxFreqOffset
	MODEL_GET_FREQUENCY(RxFreqOffset, carrier.getRxFrequencyOffset());

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierFreqOffsetTestHelper::setFreqOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// * [FLOAT TxFreqOffset (kHz)]
	// * [FLOAT RxFreqOffset (kHz)]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	bool ok ;
	ICarrierSetter& carrierSetter( getCarrierSetter(ok, callList, returnList) ) ;
	if (!ok)
		return ;

	// * [FLOAT TxFreqOffset (kHz)]
	DataVariant* txFreqOffset(callList->find("TxFreqOffset")) ;
	if (txFreqOffset->isSet())
	{
		// clear out normal frequency setting and only use the offset
		ok = carrierSetter.setTxFrequency(0.0) ;
		if (!checkState(ok, "TxFreq", returnList))
			return ;

		ok = carrierSetter.setTxFrequencyOffset(Frequency(txFreqOffset->toFloat(), Frequency::str2unit(txFreqOffset->getUnits()))) ;
		if (!checkState(ok, "TxFreqOffset", returnList))
			return ;
	}

	// * [FLOAT RxFreqOffset (kHz)]
	DataVariant* rxFreqOffset(callList->find("RxFreqOffset")) ;
	if (rxFreqOffset->isSet())
	{
		// clear out normal frequency setting and only use the offset
		ok = carrierSetter.setRxFrequency(0.0) ;
		if (!checkState(ok, "RxFreq", returnList))
			return ;

		ok = carrierSetter.setRxFrequencyOffset(Frequency(rxFreqOffset->toFloat(), Frequency::str2unit(rxFreqOffset->getUnits()))) ;
		if (!checkState(ok, "RxFreqOffset", returnList))
			return ;
	}


	// Apply changes
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	if (!carrierServer->setCarrier( carrierSetter ))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		unsigned index( callList->find("Index")->toInt() ) ;
		std::stringstream ss ;
		ss << "Unable to set carrier " << index << " : " << carrierServer->getSetCarrierFailureStr() ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
	}

	// <--%%
}










// Add any statics, private methods etc here %%-->
//=============================================================================================================
// PRIVATE
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
ICarrierSetter& CarrierFreqOffsetTestHelper::getCarrierSetter(bool& ok, DataVariantList *callList, DataVariantList *returnList)
{
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	ok = true ;
	unsigned index( callList->find("Index")->toInt() ) ;
	if (index >= carrierServer->getMaxCarriers())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Index " << index << " outside valid range (Number of carrier " << carrierServer->getMaxCarriers() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		ok = false ;
		return carrierServer->getCarrierSetter(0) ;
	}

	return carrierServer->getCarrierSetter(index) ;
}

//-------------------------------------------------------------------------------------------------------------
const ICarrier& CarrierFreqOffsetTestHelper::getCarrier(bool& ok, DataVariantList *callList, DataVariantList *returnList)
{
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	ok = true ;
	unsigned index( callList->find("Index")->toInt() ) ;
	if (index >= carrierServer->getMaxCarriers())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Index " << index << " outside valid range (Number of carrier " << carrierServer->getMaxCarriers() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		ok = false ;
		return carrierServer->getCarrier(0) ;
	}

	return carrierServer->getCarrier(index) ;
}

//-------------------------------------------------------------------------------------------------------------
bool CarrierFreqOffsetTestHelper::checkState(bool ok, const std::string& param, DataVariantList *returnList)
{
	if (!ok)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Unable to set " << param ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return false ;
	}

	return true ;
}

// <--%%
