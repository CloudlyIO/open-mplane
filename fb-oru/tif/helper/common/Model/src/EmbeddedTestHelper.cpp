/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      EmbeddedTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "EmbeddedTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include <iomanip>
#include "IEmbeddedMgr.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<EmbeddedTestHelper> EmbeddedTestHelper::getInstance()
{
	static std::shared_ptr<EmbeddedTestHelper> instance(std::make_shared<EmbeddedTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
EmbeddedTestHelper::EmbeddedTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
EmbeddedTestHelper::~EmbeddedTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EmbeddedTestHelper::setFirmware( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT index
	// * STRING firmware
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	unsigned index(callList->find("index")->toUint()) ;
	std::string firmware(callList->find("firmware")->toString()) ;

	std::shared_ptr<IEmbeddedMgr> mgr(IEmbeddedMgr::singleton()) ;
	if (!mgr->setFirmware(index, firmware))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(mgr->error()) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EmbeddedTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IEmbeddedMgr> mgr(IEmbeddedMgr::singleton()) ;
	std::vector<std::string> names(mgr->names()) ;
	std::stringstream ss ;

	ss << std::endl ;
	ss << std::setw(4) << std::left << "#" << " " << std::setw(10) << "Name" << " ";
	ss << std::setw(20) << "State" << " " << "Firmware" << " " ;
	ss << std::endl ;

	for (unsigned i=0; i < names.size(); ++i)
	{
		std::string firmware(mgr->firmware(i)) ;
		if (firmware.empty())
			firmware = "---" ;
		ss << std::setw(4) << std::left << i << " " << std::setw(10) << names[i] << " ";
		ss << std::setw(20) << IEmbeddedMgr::state2str( mgr->status(i) ) << " " << firmware << " " ;
		ss << std::endl ;
	}
	returnList->find("Info")->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EmbeddedTestHelper::start( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	unsigned index(callList->find("index")->toUint()) ;

	std::shared_ptr<IEmbeddedMgr> mgr(IEmbeddedMgr::singleton()) ;
	if (!mgr->loadFirmware(index))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(mgr->error()) ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EmbeddedTestHelper::stop( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	unsigned index(callList->find("index")->toUint()) ;

	std::shared_ptr<IEmbeddedMgr> mgr(IEmbeddedMgr::singleton()) ;
	if (!mgr->stop(index))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(mgr->error()) ;
	}

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
