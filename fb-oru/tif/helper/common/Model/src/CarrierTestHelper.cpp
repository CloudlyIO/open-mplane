/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CarrierTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "CarrierTestHelper.h"

// Add any specific includes here %%-->
#include "stringfunc.hpp"
#include "Power.h"
#include "Frequency.h"
#include "ICarrierServer.h"
#include "ICarrierModel.h"

#include "IAppSettings.h"
#include "IAppSettingsFactory.h"

#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<CarrierTestHelper> CarrierTestHelper::getInstance()
{
	static std::shared_ptr<CarrierTestHelper> instance(std::make_shared<CarrierTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
CarrierTestHelper::CarrierTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CarrierTestHelper::~CarrierTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::del( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	// check index
	bool ok ;
	getCarrier(ok, callList, returnList) ;
	if (!ok)
		return ;

	// delete carrier
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	if (!carrierServer->unconfigCarrier( static_cast<unsigned>(callList->find("Index")->toInt()) ))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(carrierServer->getSetCarrierFailureStr()) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT Index
	// * ENUM(${CARRIER_TYPES}) Type
	// * ENUM(${CARRIER_STATES}) State
	// * ENUM(${CARRIER_SIGNALS}) SigType
	// * FLOAT TxPower (dBm)
	// * FLOAT TxFreq (kHz)
	// * FLOAT RxFreq (kHz)
	// * INT GroupUp
	// * INT GroupDown
	// * FLOAT TxScaling (dBm)
	// * FLOAT UplinkNoise (dBm)
	// * BOOL(off:on) Loopback
	// * INT[] TxContainer
	// * INT[] RxContainer
	// * INT[] TxFibre
	// * INT[] RxFibre
	// * INT UlDlConfig
	// * INT SSConfig
	// * ENUM(normal:extended) UlPrefixLen
	// * ENUM(normal:extended) DlPrefixLen
	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) ulScs
	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) dlScs
	// * ENUM(NONE:256:512:1024:1536:2048:4096) ulFFT
	// * ENUM(NONE:256:512:1024:1536:2048:4096) dlFFT
	// * INT[] ulEAXCID
	// * INT[] dlEAXCID
	// * STRING ulMAC
	// * ENUM(LTE:5GNR) mode
	// * INT ulCp0Size
	// * INT dlCp0Size
	// * INT ulCp1Size
	// * INT dlCp1Size
	//

	// Insert your code here : %%-->
	bool ok ;
	const ICarrier& carrier( getCarrier(ok, callList, returnList) ) ;
	if (!ok)
		return ;


	// * INT Index
	returnList->find("Index")->set(callList->find("Index")->toInt()) ;

	// * ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA) Type
	returnList->find("Type")->set(ICarrier::typeToStr(carrier.getType())) ;

	// * ENUM(DISABLE:ENABLE) State
	returnList->find("State")->set(ICarrier::stateToStr(carrier.getState())) ;

	// * ENUM(NONE:TX:CW:OTHER) SigType
	returnList->find("SigType")->set(ICarrier::signalsToStr(carrier.getSigType())) ;

#define MODEL_GET_POWER(nm, var) \
{ \
	DataVariant* nm(returnList->find(#nm)) ;\
	nm->set( (var).get(Power::str2unit(nm->getUnits())) ) ;\
}

#define MODEL_GET_FREQUENCY(nm, var) \
{ \
	DataVariant* nm(returnList->find(#nm)) ;\
	nm->set( (float)(var).getDbl(Frequency::str2unit(nm->getUnits())) ) ;\
}

	// * FLOAT TxPower
	MODEL_GET_POWER(TxPower, carrier.getTxPower()) ;

	// * FLOAT TxFreq
	MODEL_GET_FREQUENCY(TxFreq, carrier.getTxFrequencySetting());

	// * FLOAT RxFreq
	MODEL_GET_FREQUENCY(RxFreq, carrier.getRxFrequencySetting());

	// * INT GroupUp
	returnList->find("GroupUp")->set( (int)carrier.getGroupSizeUp() ) ;

	// * INT GroupDown
	returnList->find("GroupDown")->set( (int)carrier.getGroupSizeDown() ) ;

	// * FLOAT TxScaling
	MODEL_GET_POWER(TxScaling, carrier.getTxScaling()) ;

	// * FLOAT UplinkNoise
	MODEL_GET_POWER(UplinkNoise, carrier.getUplinkNoise()) ;

	// * BOOL Loopback
	returnList->find("Loopback")->set( (int)carrier.getLoopback() ) ;

	// * INT[] TxContainer
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	unsigned txPaths = carrierServer->getMaxTxPaths() ;
	for (unsigned path=0; path < txPaths; ++path)
	{
		returnList->find("TxContainer")->set( path, (int)carrier.getTxContainer(path) ) ;
	}

	// * INT[] RxContainer
	unsigned rxPaths = carrierServer->getMaxRxPaths() ;
	for (unsigned path=0; path < txPaths; ++path)
	{
		returnList->find("RxContainer")->set( path, (int)carrier.getRxContainer(path) ) ;
	}

	// * INT[] TxFibre
	for (unsigned path=0; path < txPaths; ++path)
	{
		returnList->find("TxFibre")->set( path, (int)carrier.getTxFibre(path) ) ;
	}

	// * INT[] RxFibre
	for (unsigned path=0; path < rxPaths; ++path)
	{
		returnList->find("RxFibre")->set( path, (int)carrier.getRxFibre(path) ) ;
	}

//	// * FLOAT TxFreqOffset
//	MODEL_GET_FREQUENCY(TxFreqOffset, carrier.getTxFrequencyOffset());
//
//	// * FLOAT RxFreqOffset
//	MODEL_GET_FREQUENCY(RxFreqOffset, carrier.getRxFrequencyOffset());

	// * INT UlDlConfig
	returnList->find("UlDlConfig")->set( (int)carrier.getUlDlConfig() ) ;

	// * INT SSConfig
	returnList->find("SSConfig")->set( (int)carrier.getSpSuConfig() ) ;

	// * ENUM(normal,extended) UlPrefixLen
	returnList->find("UlPrefixLen")->set(ICarrier::prefixLenToStr(carrier.getUlPrefixLen()) ) ;

	// * ENUM(normal,extended) DlPrefixLen
	returnList->find("DlPrefixLen")->set(ICarrier::prefixLenToStr(carrier.getDlPrefixLen()) ) ;


	// ORAN/5G

	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) ulScs
	returnList->find("ulScs")->set(ICarrier::scsToStr(carrier.getUlScs()) ) ;

	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) dlScs
	returnList->find("dlScs")->set(ICarrier::scsToStr(carrier.getDlScs()) ) ;

	// * ENUM(NONE:256:512:1024:1536:2048:4096) ulFFT
	returnList->find("ulFFT")->set(ICarrier::fftsizeToStr(carrier.getUlFftSize()) ) ;

	// * ENUM(NONE:256:512:1024:1536:2048:4096) dlFFT
	returnList->find("dlFFT")->set(ICarrier::fftsizeToStr(carrier.getDlFftSize()) ) ;

	// * INT[] ulEAXCID
	for (unsigned path=0; path < rxPaths; ++path)
	{
		returnList->find("ulEAXCID")->set( path, (int)carrier.getUlEaxcId(path) ) ;
	}

	// * INT[] dlEAXCID
	for (unsigned path=0; path < txPaths; ++path)
	{
		returnList->find("dlEAXCID")->set( path, (int)carrier.getDlEaxcId(path) ) ;
	}

	// * STRING ulMAC
	returnList->find("ulMAC")->set(macToStr(carrier.getUlMacId())) ;

	// * ENUM(LTE:5GNR) mode
	returnList->find("mode")->set(ICarrier::modeToStr(carrier.getMode()) ) ;

	// * INT ulCp0Size
	returnList->find("ulCp0Size")->set((int)carrier.getUlCpSize() ) ;

	// * INT dlCp0Size
	returnList->find("dlCp0Size")->set((int)carrier.getDlCpSize() ) ;

	// * INT ulCp1Size
	returnList->find("ulCp1Size")->set((int)carrier.getUlCpOtherSize() ) ;

	// * INT dlCp1Size
	returnList->find("dlCp1Size")->set((int)carrier.getDlCpOtherSize() ) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::getRssi( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT[] Rssi (dBm)
	//

	// Insert your code here : %%-->
	bool ok ;
	const ICarrier& carrier( getCarrier(ok, callList, returnList) ) ;
	if (!ok)
		return ;

	// Return results
	DataVariant* dv(returnList->find("Rssi")) ;

	// Get RSSI for all RX paths
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	unsigned numRxPaths(carrierServer->getMaxRxPaths()) ;
	for (unsigned path=0; path < numRxPaths; ++path)
	{
		std::string error ;
		Power rssi(carrier.getRssi(path, error)) ;
		if (!error.empty())
		{
			// set an error
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set(error) ;
			return ;
		}

		// Show 1-based RX port results
		dv->set(path, rssi.get(), "Rssi[" + std::to_string(path+1) + "]") ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// * [ENUM(${CARRIER_TYPES}) Type]
	// * [ENUM(${CARRIER_STATES}) State]
	// * [ENUM(${CARRIER_SIGNALS}) SigType]
	// * [FLOAT TxPower (dBm)]
	// * [FLOAT TxFreq (kHz)]
	// * [FLOAT RxFreq (kHz)]
	// * [INT GroupUp]
	// * [INT GroupDown]
	// * [FLOAT TxScaling (dBm)]
	// * [INT[] TxContainer]
	// * [INT[] RxContainer]
	// * [INT[] TxFibre]
	// * [INT[] RxFibre]
	// * [FLOAT UplinkNoise (dBm)]
	// * [BOOL(off:on) Loopback]
	// * [INT uldlConfig]
	// * [INT ssConfig]
	// * [ENUM(normal:extended) ulPrefixLen]
	// * [ENUM(normal:extended) dlPrefixLen]
	// * [ENUM(NONE:1.25KHZ:3.75KHZ:5KHZ:7.25KHZ:15KHZ:30KHZ:60KHZ:120KHZ:240KHZ) ulScs]
	// * [ENUM(NONE:1.25KHZ:3.75KHZ:5KHZ:7.25KHZ:15KHZ:30KHZ:60KHZ:120KHZ:240KHZ) dlScs]
	// * [ENUM(NONE:256:512:1024:1536:2048:4096) ulFFT]
	// * [ENUM(NONE:256:512:1024:1536:2048:4096) dlFFT]
	// * [INT[] ulEAXCID]
	// * [INT[] dlEAXCID]
	// * [STRING ulMAC]
	// * [ENUM(LTE:5GNR) mode]
	// * [INT ulCp0Size]
	// * [INT dlCp0Size]
	// * [INT ulCp1Size]
	// * [INT dlCp1Size]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	bool ok ;
	ICarrierSetter& carrierSetter( getCarrierSetter(ok, callList, returnList) ) ;
	if (!ok)
		return ;

	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	unsigned numRxPaths(carrierServer->getMaxRxPaths()) ;
	unsigned numTxPaths(carrierServer->getMaxTxPaths()) ;

	// * [ENUM(NONE:LTE5:LTE10:LTE15:LTE20:WCDMA) Type]
	DataVariant* type(callList->find("Type")) ;
	if (type->isSet())
	{
		std::string typeStr( toUpper(type->toString()) ) ;
		ok = carrierSetter.setType(ICarrier::strToType(typeStr)) ;

		if (!checkState(ok, "Type", returnList))
			return ;
	}

	// * ENUM(DISABLE:ENABLE) State
	DataVariant* state(callList->find("State")) ;
	if (state->isSet())
	{
		std::string stateStr( toUpper(state->toString()) ) ;
		ok = carrierSetter.setState(ICarrier::strToState(stateStr)) ;

		if (!checkState(ok, "State", returnList))
			return ;
	}

	// * [ENUM(NONE:TX:CW:OTHER) SigType]
	DataVariant* sigType(callList->find("SigType")) ;
	if (sigType->isSet())
	{
		std::string sigTypeStr( toUpper(sigType->toString()) ) ;
		ok = carrierSetter.setSigType(ICarrier::strToSignals(sigTypeStr)) ;

		if (!checkState(ok, "SigType", returnList))
			return ;
	}

	// * [FLOAT TxPower (dB)]
	DataVariant* txPower(callList->find("TxPower")) ;
	if (txPower->isSet())
	{
		ok = carrierSetter.setTxPower( Power(txPower->toFloat(), Power::str2unit(txPower->getUnits())) ) ;
		if (!checkState(ok, "TxPower", returnList))
			return ;
	}

	// * [FLOAT TxFreq (kHz)]
	DataVariant* txFreq(callList->find("TxFreq")) ;
	if (txFreq->isSet())
	{
		ok = carrierSetter.setTxFrequency(Frequency(txFreq->toFloat(), Frequency::str2unit(txFreq->getUnits()))) ;
		if (!checkState(ok, "TxFreq", returnList))
			return ;
	}

	// * [FLOAT RxFreq (kHz)]
	DataVariant* rxFreq(callList->find("RxFreq")) ;
	if (rxFreq->isSet())
	{
		ok = carrierSetter.setRxFrequency(Frequency(rxFreq->toFloat(), Frequency::str2unit(rxFreq->getUnits()))) ;
		if (!checkState(ok, "RxFreq", returnList))
			return ;
	}

	// * [INT GroupUp]
	DataVariant* groupUp(callList->find("GroupUp")) ;
	if (groupUp->isSet())
	{
		ok = carrierSetter.setGroupSizeUp( (unsigned)groupUp->toInt() ) ;
		if (!checkState(ok, "GroupUp", returnList))
			return ;
	}

	// * [INT GroupDown]
	DataVariant* groupDown(callList->find("GroupDown")) ;
	if (groupDown->isSet())
	{
		ok = carrierSetter.setGroupSizeDown( (unsigned)groupDown->toInt() ) ;
		if (!checkState(ok, "GroupDown", returnList))
			return ;
	}

	// * [FLOAT TxScaling (dB)]
	DataVariant* txScaling(callList->find("TxScaling")) ;
	if (txScaling->isSet())
	{
		ok = carrierSetter.setTxScaling( Power(txScaling->toFloat(), Power::str2unit(txScaling->getUnits())) ) ;
		if (!checkState(ok, "TxScaling", returnList))
			return ;
	}

	// * [FLOAT UplinkNoise (dB)]
	DataVariant* uplinkNoise(callList->find("UplinkNoise")) ;
	if (uplinkNoise->isSet())
	{
		ok = carrierSetter.setUplinkNoise( Power(uplinkNoise->toFloat(), Power::str2unit(uplinkNoise->getUnits())) ) ;
		if (!checkState(ok, "UplinkNoise", returnList))
			return ;
	}

	// * [BOOL Loopback]
	DataVariant* loopback(callList->find("Loopback")) ;
	if (loopback->isSet())
	{
		ok = carrierSetter.setLoopback( loopback->toBool() ) ;
		if (!checkState(ok, "Loopback", returnList))
			return ;
	}


	// * [INT[] TxContainer]
	DataVariant* txContainer(callList->find("TxContainer")) ;
	if (txContainer->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(txContainer->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numTxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setTxContainer( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "TxContainer", returnList))
				return ;
		}
	}

	// * [INT[] RxContainer]
	DataVariant* rxContainer(callList->find("RxContainer")) ;
	if (rxContainer->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(rxContainer->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numRxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setRxContainer( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "RxContainer", returnList))
				return ;
		}
	}

	// * [INT[] TxFibre]
	DataVariant* txFibre(callList->find("TxFibre")) ;
	if (txFibre->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(txFibre->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numTxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setTxFibre( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "TxFibre", returnList))
				return ;
		}
	}

	// * [INT[] RxFibre]
	DataVariant* rxFibre(callList->find("RxFibre")) ;
	if (rxFibre->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(rxFibre->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numRxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setRxFibre( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "RxFibre", returnList))
				return ;
		}
	}

//	// * [FLOAT TxFreqOffset (kHz)]
//	DataVariant* txFreqOffset(callList->find("TxFreqOffset")) ;
//	if (txFreqOffset->isSet())
//	{
//		// clear out normal frequency setting and only use the offset
//		ok = carrierSetter.setTxFrequency(0.0) ;
//		if (!checkState(ok, "TxFreq", returnList))
//			return ;
//
//		ok = carrierSetter.setTxFrequencyOffset(Frequency(txFreqOffset->toFloat(), Frequency::str2unit(txFreqOffset->getUnits()))) ;
//		if (!checkState(ok, "TxFreqOffset", returnList))
//			return ;
//	}
//
//	// * [FLOAT RxFreqOffset (kHz)]
//	DataVariant* rxFreqOffset(callList->find("RxFreqOffset")) ;
//	if (rxFreqOffset->isSet())
//	{
//		// clear out normal frequency setting and only use the offset
//		ok = carrierSetter.setRxFrequency(0.0) ;
//		if (!checkState(ok, "RxFreq", returnList))
//			return ;
//
//		ok = carrierSetter.setRxFrequencyOffset(Frequency(rxFreqOffset->toFloat(), Frequency::str2unit(rxFreqOffset->getUnits()))) ;
//		if (!checkState(ok, "RxFreqOffset", returnList))
//			return ;
//	}

	// The following are TDD specific parameters. Check the build duplex before trying to access,
	// what could be a null pointer if this is not a TDD radio build.
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	if (appSettings->getDuplex() == IAppSettings::DUPLEX_TDD)
	{
		// * [INT UlDlConfig]
		DataVariant* UlDlConfig(callList->find("UlDlConfig")) ;
		if (UlDlConfig->isSet())
		{
			ok = carrierSetter.setUlDlConfig( (unsigned)UlDlConfig->toInt() ) ;
			if (!checkState(ok, "UlDlConfig", returnList))
				return ;
		}

		// * [INT SSConfig]
		DataVariant* SSConfig(callList->find("SSConfig")) ;
		if (SSConfig->isSet())
		{
			ok = carrierSetter.setSpSuConfig( (unsigned)SSConfig->toInt() ) ;
			if (!checkState(ok, "SSConfig", returnList))
				return ;
		}


	}

	// * [ENUM(normal:extended) UlPrefixLen]
	DataVariant* UlPrefixLen(callList->find("UlPrefixLen")) ;
	if (UlPrefixLen->isSet())
	{
		std::string ulPrefixLenStr( toUpper(UlPrefixLen->toString()) ) ;
		ok = carrierSetter.setUlPrefixLenConfig(ICarrier::strToPrefixLen(ulPrefixLenStr)) ;

		if (!checkState(ok, "UlPrefixLen", returnList))
			return ;
	}

	// * [ENUM(normal:extended) DlPrefixLen]
	DataVariant* DlPrefixLen(callList->find("DlPrefixLen")) ;
	if (DlPrefixLen->isSet())
	{
		std::string dlPrefixLenStr( toUpper(DlPrefixLen->toString()) ) ;
		ok = carrierSetter.setDlPrefixLenConfig(ICarrier::strToPrefixLen(dlPrefixLenStr)) ;

		if (!checkState(ok, "DlPrefixLen", returnList))
			return ;
	}

	// ORAN/5G

	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) ulScs
	DataVariant* ulScs(callList->find("ulScs")) ;
	if (ulScs->isSet())
	{
		std::string ulScsStr( toUpper(ulScs->toString()) ) ;
		ok = carrierSetter.setUlScs(ICarrier::strToScs(ulScsStr)) ;

		if (!checkState(ok, "ulScs", returnList))
			return ;
	}

	// * ENUM(NONE:1kHz25:3kHz75:5kHz:7kHz25:15kHz:30kHz:60kHz:120kHz:240kHz) dlScs
	DataVariant* dlScs(callList->find("dlScs")) ;
	if (dlScs->isSet())
	{
		std::string dlScsStr( toUpper(dlScs->toString()) ) ;
		ok = carrierSetter.setDlScs(ICarrier::strToScs(dlScsStr)) ;

		if (!checkState(ok, "dlScs", returnList))
			return ;
	}

	// * ENUM(NONE:256:512:1024:1536:2048:4096) ulFFT
	DataVariant* ulFFT(callList->find("ulFFT")) ;
	if (ulFFT->isSet())
	{
		std::string ulFFTStr( toUpper(ulFFT->toString()) ) ;
		ok = carrierSetter.setUlFftSize(ICarrier::strToFftsize(ulFFTStr)) ;

		if (!checkState(ok, "ulScs", returnList))
			return ;
	}

	// * ENUM(NONE:256:512:1024:1536:2048:4096) dlFFT
	DataVariant* dlFFT(callList->find("dlFFT")) ;
	if (dlFFT->isSet())
	{
		std::string dlFFTStr( toUpper(dlFFT->toString()) ) ;
		ok = carrierSetter.setDlFftSize(ICarrier::strToFftsize(dlFFTStr)) ;

		if (!checkState(ok, "dlScs", returnList))
			return ;
	}

	// * INT[] ulEAXCID
	DataVariant* ulEAXCID(callList->find("ulEAXCID")) ;
	if (ulEAXCID->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(ulEAXCID->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numRxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setUlEaxcId( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "ulEAXCID", returnList))
				return ;
		}
	}


	// * INT[] dlEAXCID
	DataVariant* dlEAXCID(callList->find("dlEAXCID")) ;
	if (dlEAXCID->isSet())
	{
		std::vector< std::pair<std::string, DataVariant> > dvList(dlEAXCID->getList()) ;
		for (unsigned idx=0; (idx < dvList.size()) && (idx < numRxPaths); ++idx)
		{
			if (!dvList[idx].second.isSet())
				continue ;

			ok = carrierSetter.setDlEaxcId( idx, (unsigned)dvList[idx].second.toInt() ) ;
			if (!checkState(ok, "dlEAXCID", returnList))
				return ;
		}
	}

	// * STRING ulMAC
	DataVariant* ulMAC(callList->find("ulMAC")) ;
	if (ulMAC->isSet())
	{
		std::string macStr(ulMAC->toString()) ;
		ok = carrierSetter.setUlMacId(strToMac(macStr)) ;
		if (!checkState(ok, "ulMAC", returnList))
			return ;
	}

	// * ENUM(LTE:5GNR) mode
	DataVariant* mode(callList->find("mode")) ;
	if (mode->isSet())
	{
		std::string modeStr( toUpper(mode->toString()) ) ;
		ok = carrierSetter.setMode(ICarrier::strToMode(modeStr)) ;

		if (!checkState(ok, "mode", returnList))
			return ;
	}

	// * INT ulCp0Size
	DataVariant* ulCp0Size(callList->find("ulCp0Size")) ;
	if (ulCp0Size->isSet())
	{
		ok = carrierSetter.setUlCpSize( (unsigned)ulCp0Size->toInt() ) ;
		if (!checkState(ok, "ulCp0Size", returnList))
			return ;
	}

	// * INT dlCp0Size
	DataVariant* dlCp0Size(callList->find("dlCp0Size")) ;
	if (dlCp0Size->isSet())
	{
		ok = carrierSetter.setDlCpSize( (unsigned)dlCp0Size->toInt() ) ;
		if (!checkState(ok, "dlCp0Size", returnList))
			return ;
	}

	// * INT ulCp1Size
	DataVariant* ulCp1Size(callList->find("ulCp1Size")) ;
	if (ulCp1Size->isSet())
	{
		ok = carrierSetter.setUlCpOtherSize( (unsigned)ulCp1Size->toInt() ) ;
		if (!checkState(ok, "ulCp1Size", returnList))
			return ;
	}

	// * INT dlCp1Size
	DataVariant* dlCp1Size(callList->find("dlCp1Size")) ;
	if (dlCp1Size->isSet())
	{
		ok = carrierSetter.setDlCpOtherSize( (unsigned)dlCp1Size->toInt() ) ;
		if (!checkState(ok, "dlCp1Size", returnList))
			return ;
	}


	// Apply changes
	if (!carrierServer->setCarrier( carrierSetter ))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		unsigned index( callList->find("Index")->toInt() ) ;
		std::stringstream ss ;
		ss << "Unable to set carrier " << index << " : " << carrierServer->getSetCarrierFailureStr() ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	bool ok ;
	const ICarrier& carrier( getCarrier(ok, callList, returnList) ) ;
	if (!ok)
		return ;

	std::stringstream ss ;
	ss << std::endl ;
	carrier.showCarrier(ss) ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::showAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;

	unsigned numCarriers(carrierServer->getMaxCarriers()) ;
	for (unsigned idx=0; idx < numCarriers; ++idx)
	{
		const ICarrier& carrier( carrierServer->getCarrier(idx) ) ;
		carrier.showCarrier(ss) ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::NumCarriersGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/carrier/NumCarriers"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	returnList->find(pathname)->set((int)carrierServer->getMaxCarriers()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::RxPathsGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/carrier/RxPaths"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	returnList->find(pathname)->set((int)carrierServer->getMaxRxPaths()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CarrierTestHelper::TxPathsGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/carrier/TxPaths"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	returnList->find(pathname)->set((int)carrierServer->getMaxTxPaths()) ;
	// <--%%
}








// Add any statics, private methods etc here %%-->
//=============================================================================================================
// PRIVATE
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
ICarrierSetter& CarrierTestHelper::getCarrierSetter(bool& ok, DataVariantList *callList, DataVariantList *returnList)
{
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	ok = true ;
	unsigned index( callList->find("Index")->toInt() ) ;
	if (index >= carrierServer->getMaxCarriers())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Index " << index << " outside valid range (Number of carrier " << carrierServer->getMaxCarriers() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		ok = false ;
		return carrierServer->getCarrierSetter(0) ;
	}

	return carrierServer->getCarrierSetter(index) ;
}

//-------------------------------------------------------------------------------------------------------------
const ICarrier& CarrierTestHelper::getCarrier(bool& ok, DataVariantList *callList, DataVariantList *returnList)
{
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;
	ok = true ;
	unsigned index( callList->find("Index")->toInt() ) ;
	if (index >= carrierServer->getMaxCarriers())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Index " << index << " outside valid range (Number of carrier " << carrierServer->getMaxCarriers() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		ok = false ;
		return carrierServer->getCarrier(0) ;
	}

	return carrierServer->getCarrier(index) ;
}

//-------------------------------------------------------------------------------------------------------------
bool CarrierTestHelper::checkState(bool ok, const std::string& param, DataVariantList *returnList)
{
	if (!ok)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Unable to set " << param ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return false ;
	}

	return true ;
}

////-------------------------------------------------------------------------------------------------------------
//std::shared_ptr<ITifIoctl> CarrierTestHelper::getChainWorker() const
//{
//	std::shared_ptr<ICarrierModel> carrierModel(ICarrierModel::getInstance(0));
//	std::shared_ptr<ITifIoctl> modelTifioctl( std::dynamic_pointer_cast<ITifIoctl>(carrierModel));
//	if (!modelTifioctl)
//		return nullptr ;
//	std::shared_ptr<ITifIoctl> cfrWorker( modelTifioctl->getObject("ChainWorker") );
//	return cfrWorker ;
//}

// <--%%
