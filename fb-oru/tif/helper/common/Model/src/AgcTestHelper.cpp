/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      AgcTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "AgcTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "IRxAgc.h"
#include "IRadio.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<AgcTestHelper> AgcTestHelper::getInstance()
{
	static std::shared_ptr<AgcTestHelper> instance(std::make_shared<AgcTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
AgcTestHelper::AgcTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
AgcTestHelper::~AgcTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AgcTestHelper::getMode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(auto:manual) mode
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());

    DataVariant* mode = returnList->find("mode");

    if( radio->getRxAttenMode() == IRxAgc::RxAgcMode::RX_AGC_MODE_AUTO)
    {
        mode->set("auto");
    }
    else
    {
        mode->set("manual");
    }
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AgcTestHelper::setMode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(auto:manual) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());

	if( callList->find("mode")->toString() == "auto")
	{
		radio->setRxAttenMode(IRxAgc::RxAgcMode::RX_AGC_MODE_AUTO);
	}
	else
	{
		radio->setRxAttenMode(IRxAgc::RxAgcMode::RX_AGC_MODE_MANUAL);
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AgcTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::vector< std::shared_ptr<IRxAgc> > agcs(IRxAgcFactory::getAgcs()) ;

	std::stringstream ss ;
	ss << std::endl ;

	for (auto agc : agcs)
	{
		agc->show(ss) ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AgcTestHelper::showDetail( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::vector< std::shared_ptr<IRxAgc> > agcs(IRxAgcFactory::getAgcs()) ;

	std::stringstream ss ;
	ss << std::endl ;

	for (auto agc : agcs)
	{
		agc->showDetail(ss) ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
