/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      RegDevicesTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "RegDevicesTestHelper.h"

// Add any specific includes here %%-->
#include <iomanip>
#include <sstream>
#include "IRegModel.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<RegDevicesTestHelper> RegDevicesTestHelper::getInstance()
{
	static std::shared_ptr<RegDevicesTestHelper> instance(std::make_shared<RegDevicesTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
RegDevicesTestHelper::RegDevicesTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
RegDevicesTestHelper::~RegDevicesTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void RegDevicesTestHelper::data( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IRegModelMgr> regMgr(IRegModelMgr::singleton()) ;
	std::string name(callList->find("name")->toString()) ;
	IRegModel* reg(regMgr->regModel(name)) ;
	if (!reg)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Invalid device name") ;
		return ;
	}

	unsigned deviceWidth(reg->dataWidth()) ;
	unsigned formatWidth( (deviceWidth+3) / 4 ) ;

	std::stringstream ss ;
	bool regSet(false) ;
	ss << "'" << name << "' Registers" << std::endl ;
	std::vector<uint32_t> regs(reg->regValues()) ;
	for (unsigned i=0; i < regs.size(); ++i)
	{
		if (!reg->regIsSet(i))
			continue ;

		ss << "R" << std::setw(3) << std::setfill(' ') << std::left << i << " 0x" <<
			std::hex << std::right << std::setfill('0') << std::setw(formatWidth) << regs[i] << std::dec << std::endl ;
		regSet = true ;
	}
	if (!regSet)
		ss << ">> No registers set <<" << std::endl ;

	returnList->find("Info")->set(ss.str()) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void RegDevicesTestHelper::names( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IRegModelMgr> regMgr(IRegModelMgr::singleton()) ;
	std::stringstream ss ;
	ss << "Register Devices" << std::endl ;
	for (auto name : regMgr->names())
		ss << name << std::endl ;
	returnList->find("Info")->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void RegDevicesTestHelper::regs( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING name
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IRegModelMgr> regMgr(IRegModelMgr::singleton()) ;
	std::string name(callList->find("name")->toString()) ;
	IRegModel* reg(regMgr->regModel(name)) ;
	if (!reg)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Invalid device name") ;
		return ;
	}

	unsigned deviceWidth(reg->addressWidth() + reg->dataWidth()) ;
	unsigned formatWidth( (deviceWidth+3) / 4 ) ;

	std::stringstream ss ;
	bool regSet(false) ;
	ss << "'" << name << "' Registers" << std::endl ;
	std::vector<uint32_t> regs(reg->deviceValues()) ;
	for (unsigned i=0; i < regs.size(); ++i)
	{
		if (!reg->regIsSet(i))
			continue ;

		ss << "R" << std::setw(3) << std::setfill(' ') << std::left << i << " 0x" <<
			std::hex << std::right << std::setfill('0') << std::setw(formatWidth) << regs[i] << std::dec << std::endl ;
		regSet = true ;
	}
	if (!regSet)
		ss << ">> No registers set <<" << std::endl ;

	returnList->find("Info")->set(ss.str()) ;

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
