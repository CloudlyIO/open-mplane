/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      HeartbeatTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "HeartbeatTestHelper.h"

// Add any specific includes here %%-->
#include "IHeartbeat.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<HeartbeatTestHelper> HeartbeatTestHelper::getInstance()
{
	static std::shared_ptr<HeartbeatTestHelper> instance(std::make_shared<HeartbeatTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
HeartbeatTestHelper::HeartbeatTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
HeartbeatTestHelper::~HeartbeatTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::getEnable( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL(OFF:ON) enable
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find("enable")->set(heartbeat->getEnable()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::getState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL(OK:EXPIRED) state
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find("state")->set(heartbeat->isExpired()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::getTimeout( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT timeout (s)
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find("timeout")->set( static_cast<int>(heartbeat->getTimeoutSecs()) ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::ping( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	heartbeat->resetTimer() ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::setEnable( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * BOOL(OFF:ON) enable
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	heartbeat->setEnable(callList->find("enable")->toBool()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::setTimeout( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT timeout (s)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	heartbeat->setTimeoutSecs( static_cast<unsigned>(callList->find("timeout")->toInt()) ) ;

	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool HeartbeatTestHelper::enableSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/heartbeat/enable"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	heartbeat->setEnable(value->toBool()) ;
	return true ;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::enableGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/heartbeat/enable"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find(pathname)->set(heartbeat->getEnable()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
bool HeartbeatTestHelper::timeoutSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/heartbeat/timeout"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	heartbeat->setTimeoutSecs( static_cast<unsigned>(value->toInt()) ) ;
	return true ;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::timeoutGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/heartbeat/timeout"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find(pathname)->set( static_cast<int>(heartbeat->getTimeoutSecs()) ) ;
	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
void HeartbeatTestHelper::stateGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/heartbeat/state"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IHeartbeat> heartbeat(IHeartbeat::getInstance()) ;
	returnList->find(pathname)->set(heartbeat->isExpired()) ;
	// <--%%
}








// Add any statics, private methods etc here %%-->

// <--%%
