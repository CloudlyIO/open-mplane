/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      SystemIpTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "SystemIpTestHelper.h"

// Add any specific includes here %%-->
#include <arpa/inet.h>

#include <sstream>

#include "IBootEnv.h"
#include "NetDevice.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

//=============================================================================================================
// CONSTANTS
//=============================================================================================================
static const std::string ENV_IP{"ipaddr"} ;
static const std::string ENV_NETMASK{"netmask"} ;
static const std::string ENV_GATEWAY{"gatewayip"} ;


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<SystemIpTestHelper> SystemIpTestHelper::getInstance()
{
	static std::shared_ptr<SystemIpTestHelper> instance(std::make_shared<SystemIpTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
SystemIpTestHelper::SystemIpTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
SystemIpTestHelper::~SystemIpTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemIpTestHelper::clear( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IBootEnv> bootEnv(IBootEnv::getInstance()) ;

	// Delete any settings
	if (!bootEnv->deleteVar({ENV_IP, ENV_NETMASK, ENV_GATEWAY}))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(bootEnv->getError()) ;
		return ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemIpTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING ip
	// * STRING netmask
	// * STRING gateway
	//

	// Insert your code here : %%-->
	std::shared_ptr<IBootEnv> bootEnv(IBootEnv::getInstance()) ;
	returnList->find("ip")->set( bootEnv->getVar(ENV_IP) ) ;
	returnList->find("netmask")->set( bootEnv->getVar(ENV_NETMASK) ) ;
	returnList->find("gateway")->set( bootEnv->getVar(ENV_GATEWAY) ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemIpTestHelper::set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [STRING ip]
	// * [STRING netmask]
	// * [STRING gateway]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::map<std::string, std::string> settings ;

	DataVariant* dv ;

	// IP
	dv = callList->find("ip") ;
	if (dv->isSet())
	{
		if (!isValidIp(dv->toString()))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("IP address is invalid") ;
			return ;
		}
		settings[ENV_IP] = dv->toString() ;
	}

	// MASK
	dv = callList->find("netmask") ;
	if (dv->isSet())
	{
		if (!isValidIp(dv->toString()))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Net mask is invalid") ;
			return ;
		}
		settings[ENV_NETMASK] = dv->toString() ;
	}

	// GATEWAY
	dv = callList->find("gateway") ;
	if (dv->isSet())
	{
		if (!isValidIp(dv->toString()))
		{
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set("Gateway address is invalid") ;
			return ;
		}
		settings[ENV_GATEWAY] = dv->toString() ;
	}

	if (settings.empty())
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("No arguments supplied") ;
		return ;
	}


	std::shared_ptr<IBootEnv> bootEnv(IBootEnv::getInstance()) ;
	if (!bootEnv->setVar(settings))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(bootEnv->getError()) ;
		return ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemIpTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IBootEnv> bootEnv(IBootEnv::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;
    std::string ip(bootEnv->getVar(ENV_IP)) ;
    std::string netmask(bootEnv->getVar(ENV_NETMASK)) ;
    std::string gateway(bootEnv->getVar(ENV_GATEWAY)) ;
    ss << "Static IP Settings" << std::endl ;
    ss << "IP.........: " << ip << std::endl ;
    ss << "Net mask...: " << netmask << std::endl ;
    ss << "Gateway....: " << gateway << std::endl ;
    if (ip.empty() || gateway.empty())
    	ss << "Will use DHCP - need to set both ip and gateway to enable static ip" << std::endl ;
    ss << std::endl ;

    std::vector<std::shared_ptr<NetDevice>> interfaces(NetDevice::getInterfaces()) ;

    ss << "Network Interfaces" << std::endl ;
    for (auto netDev : interfaces)
    {
    	std::string name(netDev->getName()) ;

    	// skip local
    	if (name == "lo")
    		continue ;

    	static const unsigned NAME_WIDTH{15} ;
    	ss << name << std::string(NAME_WIDTH-name.size(), '.') << ":" << netDev->getAddr() ;
    	ss << " " ;
    	ss << "  Mask:" << netDev->getNetmask() ;
    	ss << "  Bcast:" << netDev->getBroadcastAddr() ;
    	ss << "  MAC:" << netDev->getMac() ;
    	ss << " [" ;
    	ss << (netDev->isUp() ? "UP" : "DOWN") ;
    	ss << (netDev->isBroadcast() ? " BROADCAST" : "") ;
    	ss << (netDev->isMulticast() ? " MULTICAST" : "") ;
    	ss << "]" << std::endl ;
    }
    ss << std::endl ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}










// Add any statics, private methods etc here %%-->

//=============================================================================================================
// PRIVATE
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
bool SystemIpTestHelper::isValidIp(const std::string& ip) const
{
	struct sockaddr_in sa;
	return (::inet_pton(AF_INET, ip.c_str(), &(sa.sin_addr)) == 1) ;
}

// <--%%
