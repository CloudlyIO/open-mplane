/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      I2cTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "I2cTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "II2cBusMgr.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<I2cTestHelper> I2cTestHelper::getInstance()
{
	static std::shared_ptr<I2cTestHelper> instance(std::make_shared<I2cTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
I2cTestHelper::I2cTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
I2cTestHelper::~I2cTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void I2cTestHelper::read( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING path
	// * INT i2cAddress
	// * INT offset
	// * [INT numBytes=1]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * HEXINT[] Hex
	//

	// Insert your code here : %%-->
	std::shared_ptr<II2cBus> i2c(II2cBusMgr::singleton()->deviceBus(callList->find("path")->toString(), callList->find("i2cAddress")->toInt())) ;
	if (!i2c)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Cannot open I2c device") ;
		return ;
	}

	unsigned offset(callList->find("offset")->toInt()) ;
	unsigned numBytes(callList->find("numBytes")->toInt()) ;

	for (unsigned i=0; i < numBytes; ++i, ++offset)
	{
		uint8_t byte ;
		if (!i2c->readByte(offset, byte))
		{
			// set an error
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			returnList->find(RtiKeyword::MESSAGE_VAR)->set(i2c->error()) ;
			return ;
		}

		std::stringstream ss ;
		ss << "0x" << std::hex << std::uppercase << offset ;
		returnList->find("Hex")->set(i, (int)byte, ss.str()) ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void I2cTestHelper::write( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING path
	// * INT i2cAddress
	// * INT offset
	// * INT byte
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<II2cBus> i2c(II2cBusMgr::singleton()->deviceBus(callList->find("path")->toString(), callList->find("i2cAddress")->toInt())) ;
	if (!i2c)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Cannot open I2c device") ;
		return ;
	}

	unsigned offset(callList->find("offset")->toInt()) ;
	unsigned byte(callList->find("byte")->toInt() & 0xff) ;

	if (!i2c->writeByte(offset, (uint8_t)byte))
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(i2c->error()) ;
		return ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void I2cTestHelper::writeShort( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING path
	// * INT i2cAddress
	// * INT offset
	// * INT short
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<II2cBus> i2c(II2cBusMgr::singleton()->deviceBus(callList->find("path")->toString(), callList->find("i2cAddress")->toInt())) ;
	if (!i2c)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Cannot open I2c device") ;
		return ;
	}

	unsigned offset(callList->find("offset")->toInt()) ;
	unsigned val(callList->find("short")->toInt() & 0xffff) ;

	if (!i2c->writeShort(offset, (uint16_t)val))
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(i2c->error()) ;
		return ;
	}

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
