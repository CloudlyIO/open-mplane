/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      SystemMemTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "SystemMemTestHelper.h"

// Add any specific includes here %%-->
#include "IMemMon.h"
#include "TcpPortHelper.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->
using namespace std;


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<SystemMemTestHelper> SystemMemTestHelper::getInstance()
{
	static std::shared_ptr<SystemMemTestHelper> instance(std::make_shared<SystemMemTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
SystemMemTestHelper::SystemMemTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
SystemMemTestHelper::~SystemMemTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * UINT rate (sec)
	// * BOOL(OFF:ON) logging
	// * ENUM(PERIODIC:ONCHANGE) logRate
	// * UINT threshold (kB)
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;

	returnList->find("rate")->setUint( memMon->getUpdateRate() ) ;
	returnList->find("logging")->setBool( memMon->getLogging() ) ;
	returnList->find("logRate")->set( (memMon->getLogRate() == IMemMon::PERIODIC ? "PERIODIC" : "ONCHANGE") ) ;
	returnList->find("threshold")->setInt( memMon->getThreshold() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::set( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [UINT rate (sec)]
	// * [BOOL(OFF:ON) logging]
	// * [ENUM(PERIODIC:ONCHANGE) logRate]
	// * [UINT threshold (kB)]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;

	DataVariant* dv ;

	dv = callList->find("rate") ;
	if (dv->isSet())
	{
		memMon->setUpdateRate(dv->toUint()) ;
	}

	dv = callList->find("logging") ;
	if (dv->isSet())
	{
		memMon->setLogging(dv->toBool()) ;
	}

	dv = callList->find("logRate") ;
	if (dv->isSet())
	{
		memMon->setLogRate( static_cast<IMemMon::LogRate>(dv->toUint()) ) ;
	}

	dv = callList->find("threshold") ;
	if (dv->isSet())
	{
		memMon->setThreshold( static_cast<long>(dv->toInt())) ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::tcpClose( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setLogFunction(IMemMon::LogFunction()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::tcpOpen( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [UINT{1024..65535} tcp]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!TcpPortHelper::portValid(msgParser, "tcp", callList, returnList))
		return ;

	std::shared_ptr<TcpPortHelper> port(new TcpPortHelper(msgParser, "tcp", callList) ) ;

	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setLogFunction([this,port](const std::string& msg){
		port->send(msg) ;
	}) ;


	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool SystemMemTestHelper::LogRateSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/mem/LogRate"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setLogRate( static_cast<IMemMon::LogRate>(value->toUint()) ) ;
	return true;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::LogRateGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/mem/LogRate"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	returnList->find(pathname)->set( (memMon->getLogRate() == IMemMon::PERIODIC ? "PERIODIC" : "ONCHANGE") ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
bool SystemMemTestHelper::LoggingSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/mem/Logging"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setLogging(value->toBool()) ;
	return true;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::LoggingGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/mem/Logging"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	returnList->find(pathname)->setBool( memMon->getLogging() ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
bool SystemMemTestHelper::ThresholdSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/mem/Threshold"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setThreshold( static_cast<long>(value->toInt())) ;
	return true;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::ThresholdGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/mem/Threshold"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	returnList->find(pathname)->setInt( memMon->getThreshold() ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
bool SystemMemTestHelper::UpdateRateSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/system/mem/UpdateRate"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	memMon->setUpdateRate(value->toUint()) ;
	return true ;
	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::UpdateRateGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/mem/UpdateRate"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;
	returnList->find(pathname)->setUint( memMon->getUpdateRate() ) ;
	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
void SystemMemTestHelper::UsageGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/mem/Usage"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IMemMon> memMon(IMemMon::getInstance()) ;

	returnList->find(pathname)->setInt( memMon->getCurrentMemUsage() ) ;

	// <--%%
}








// Add any statics, private methods etc here %%-->


// <--%%
