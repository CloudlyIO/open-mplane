/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      SystemTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "SystemTestHelper.h"

// Add any specific includes here %%-->
#include <iomanip>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <memory>
#include <algorithm>
#include <cmath>
#include <cstdlib>

#include "stringfunc.hpp"
#include "Task.h"
#include "IAppSettings.h"
#include "IAppSettingsFactory.h"
#include "IRadio.h"
#include "IRadioInfo.h"
#include "IAppControl.h"
#include "ISystemClockInput.h"
#include "ISystemReboot.h"
#include "IFrequencyConst.h"
#include "ICarrierServer.h"
#include "ITxPort.h"
#include "IServicesMonitor.h"
#include "IServicesMonitorFactory.h"

#ifdef BUILD_IF_CPRI
#include "ICpri.h"
#endif

#include "IFpgaMgr.h"
#include "PowerSaver.h"
#include "IBootEnv.h"
#include "Maths.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->
using namespace std;


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<SystemTestHelper> SystemTestHelper::getInstance()
{
	static std::shared_ptr<SystemTestHelper> instance(std::make_shared<SystemTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
SystemTestHelper::SystemTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
SystemTestHelper::~SystemTestHelper()
{
	// Insert your code here : %%-->


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getBoardId( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT BoardID
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadioInfo> radioInfo = IRadioInfoFactory::create();

    returnList->find("BoardID")->set( (int) radioInfo->getHardwareID() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getDateTime( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING dateTime
	//

	// Insert your code here : %%-->
	// ~ # date -Iseconds
	// 1970-01-01T00:04:09+0000

	std::string dateCmd = "date -Iseconds > /tmp/dateTime.txt";

	int dateCmdRet = system(dateCmd.c_str());

	if(dateCmdRet == 0)
	{
		// If the data command was successful then read in the data from the
		// file we just wrote
		std::ifstream dateTimeFile("/tmp/dateTime.txt");

		if(dateTimeFile.is_open())
		{
			std::string dateTimeResp;
			std::getline(dateTimeFile, dateTimeResp);

			std::string dateTime = dateTimeResp.substr(0, 10);
			dateTime += " ";
			dateTime += dateTimeResp.substr(11, 8);

			returnList->find("dateTime")->set( dateTime.c_str() ) ;

			dateTimeFile.close();
		}
		else
		{
			returnList->find("dateTime")->set( "Unable to get system time, could not open /tmp/dateTime.txt" ) ;
		}
	}
	else
	{
		returnList->find("dateTime")->set( "Unable to get system time, system command date -Iseconds failed" ) ;
	}

	std::remove("/tmp/dateTime.txt");

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getDuplex( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING duplex
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find("duplex")->set( appSettings->getDuplexString().c_str() ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getHostName( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("hostname");
    returnList->find("result")->set( string.str() );
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getHwBoardSerialNumber( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("hwBoardSerialNum");
    returnList->find("result")->set( string.str() );
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getLimits( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT numTx
	// * INT numRx
	// * INT numCarriers
	// * INT numFibres
	// * FLOAT[] minPower (dB)
	// * FLOAT[] maxPower (dB)
	// * FLOAT minTxFreq (kHz)
	// * FLOAT maxTxFreq (kHz)
	// * FLOAT minRxFreq (kHz)
	// * FLOAT maxRxFreq (kHz)
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());
    std::shared_ptr<IRxFrequencyConst> rxf(IRxFrequencyConstFactory::getInterface());
    std::shared_ptr<ITxFrequencyConst> txf(ITxFrequencyConstFactory::getInterface());
    std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;

    unsigned int num_txports( radio->getNumberOfTxPorts() );
    returnList->find("numTx")->setInt(num_txports) ;
    returnList->find("minTxFreq")->setFloat(txf->getMinimum().getDbl(Frequency::KHz)) ;
    returnList->find("maxTxFreq")->setFloat(txf->getMaximum().getDbl(Frequency::KHz)) ;
    for( unsigned int index = 0; index < num_txports; index ++)
    {
        returnList->find("maxPower")->set(index, radio->getTxPort(index).getMaxPower().get(Power::dBm)) ;
        returnList->find("minPower")->set(index, radio->getTxPort(index).getMinPower().get(Power::dBm)) ;
    }
    returnList->find("numRx")->setInt(IRadioFactory::getInterface()->getNumberOfRxPorts()) ;
    returnList->find("minRxFreq")->setFloat(rxf->getMinimum().getDbl(Frequency::KHz)) ;
    returnList->find("maxRxFreq")->setFloat(rxf->getMaximum().getDbl(Frequency::KHz)) ;
    returnList->find("numCarriers")->setInt(carrierServer->getMaxCarriers()) ;

#ifdef BUILD_IF_CPRI
    std::shared_ptr<ICpri> cpri( ICpri::getInterface() ) ;
    returnList->find("numFibres")->setInt(cpri->getNumCpriPorts()) ;
#else
    returnList->find("numFibres")->setInt(1) ;
#endif


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getProductCode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("productCode");
    returnList->find("result")->set( string.str() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getSerialNumber( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("sysSerialNum");
    returnList->find("result")->set( string.str() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(INITIALISING:STABLE:FAILED) appState
	//

	// Insert your code here : %%-->

	std::shared_ptr<IServicesMonitor> servicesMon(IServicesMonitorFactory::getInterface()) ;
	IServicesMonitor::ApplicationState state(servicesMon->getApplicationState()) ;
	returnList->find("appState")->setInt( static_cast<int>(state) ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getSupplyVoltage( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value
	//

	// Insert your code here : %%-->

    std::shared_ptr<IRadio> radio = IRadioFactory::getInterface();

    returnList->find("value")->set(  radio->getSupplyVoltage() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::getTemperature( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT temperature (DegC)
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());
    float temperature = radio->getFpgaTemperature();
    returnList->find("temperature")->set(temperature);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::powerDown( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<PowerSaver> powerSaver(PowerSaver::getInstance()) ;
	powerSaver->shutdown() ;

	returnList->find(RtiKeyword::INFO_VAR)->set("Entering power saving state, reboot to power up.") ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::reboot( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ISystemReboot> reboot = ISystemReboot::getInstance();
	int rc = reboot->now();
	if ( rc != 0 )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Failed to run reboot command") ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::services( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(suspend:resume) control
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	// Create radio
	std::shared_ptr<IAppControl> appControl( IAppControlFactory::getInterface() );

	// get the mode
	DataVariant* control = callList->find("control");
	if( control )
	{
		if (control->toString() == "suspend")
		{
			appControl->suspend();
		}
		else
		{
			appControl->resume();
		}
	}



	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::setClockIn( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(INTERNAL:External_10MHz:FIBRE:10G_SYNCE:25G_SYNCE) clkin
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ISystemClockInput> clkIn(ISystemClockInput::getInstance()) ;

	ISystemClockInput::ClkSource clkSource(ISystemClockInput::clkStrToEnum(callList->find("clkin")->toString())) ;

	if (!clkIn->setClockInput(clkSource))
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to set clock input") ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::setDateTime( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING date
	// * STRING time
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::string setDate = callList->find("date")->toString();
	std::string setTime = callList->find("time")->toString();

	// Make sure the data is in the correct format first
	// YYYY-MM-DD hh:mm[:ss]
	std::string::size_type yearDelimiter  = setDate.find("-");
	std::string::size_type monthDelimiter = setDate.find("-", 5);
	std::string::size_type hmDelimiter    = setTime.find(":");
	std::string::size_type msDelimiter    = setTime.find(":", 5);

	if( yearDelimiter  == std::string::npos ||
		monthDelimiter == std::string::npos ||
		hmDelimiter    == std::string::npos ||
		msDelimiter    == std::string::npos )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Incorrect time and/or date format") ;
	}

	std::string date = setDate.substr(0, 10);
	std::string time = setTime.substr(0, 8);

#ifndef OFF_TARGET  // Only issue the system command if we are on target.
	std::string dateCommand  = "date -s ";
				dateCommand += date;

	std::string timeCommand  = "date -s ";
				timeCommand += time;

	int dateRet = system( dateCommand.c_str() ) ;
	int timeRet = system( timeCommand.c_str() ) ;

	if( dateRet != 0 || timeRet != 0 )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to set time and or date") ;
	}

#endif /* OFF_TARGET */
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::showLimits( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());
	std::shared_ptr<IRxFrequencyConst> rxf(IRxFrequencyConstFactory::getInterface());
	std::shared_ptr<ITxFrequencyConst> txf(ITxFrequencyConstFactory::getInterface());
	std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;

	unsigned int num_txports( radio->getNumberOfTxPorts() );

	std::stringstream ss ;
	ss << std::endl ;

	ss << "Number of Tx ports     = " << num_txports << std::endl ;
	ss << "Maxiumum Tx Frequency  = " << txf->getMaximum() << std::endl ;
	ss << "Miniumum Tx Frequency  = " << txf->getMinimum() << std::endl ;
	for( unsigned int index = 0; index < num_txports; index ++)
	{
		ss << "Maximum output Tx" << index << "     = " << radio->getTxPort(index).getMaxPower() << std::endl ;
		ss << "Minimum output Tx" << index << "     = " << radio->getTxPort(index).getMinPower() << std::endl ;
	}
	ss << "Number of Rx ports     = " << IRadioFactory::getInterface()->getNumberOfRxPorts() << std::endl ;
	ss << "Maxiumum Rx Frequency  = " << rxf->getMaximum() << std::endl ;
	ss << "Miniumum Rx Frequency  = " << rxf->getMinimum() << std::endl ;
	ss << "Max number of carriers = " << carrierServer->getMaxCarriers() << std::endl ;

#ifdef BUILD_IF_CPRI
    std::shared_ptr<ICpri> cpri( ICpri::getInterface() ) ;
	ss << "Number of CPRI ports   = " << cpri->getNumCpriPorts() << std::endl ;
#endif

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::showTasks( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

    std::stringstream ss ;
    ss << std::endl ;
    TaskList::getInstance()->show(ss);
    returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::ApplicationGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Application"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getAppString().c_str() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::BoardGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Board"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getBoardString().c_str() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::BuildGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Build"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( static_cast<int>(appSettings->getBuildNumber()) ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::ClockInGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/ClockIn"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<ISystemClockInput> clkIn(ISystemClockInput::getInstance()) ;

	ISystemClockInput::ClkSource clkSource(clkIn->getClockInput()) ;

	returnList->find(pathname)->set(ISystemClockInput::clkinToStr(clkSource)) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::CurrentFpgaBuildGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/CurrentFpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->


	auto fpga( IFpgaMgr::getIFpgaSystemRegs() );

	unsigned short version = fpga->read_fpgaBuildNum();
	char result[6];
	sprintf(result, "%04d",version);
	returnList->find(pathname)->set( result ) ;



	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::CustomerGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Customer"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getCustomerString().c_str() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::DuplexGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Duplex"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getDuplexString().c_str() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::FibreInterfaceGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FibreInterface"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getFibreInterfaceString().c_str() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::FpgaBuildGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaBuild"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getFpgaBuild() ) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::FpgaPartGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/FpgaPart"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getFpgaPart() ) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::HwIdGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/HwId"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );

    std::string hwId = bootEnv->getVar("hwSystemId");

    if(0 == hwId.length())
    {
    	hwId = "Information Unavailable";
    }
    returnList->find(pathname)->set( hwId ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::HwRevGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/HwRev"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );

    std::string hwRev = bootEnv->getVar("hwSystemRev");

    if(0 == hwRev.length())
    {
    	hwRev = "Information Unavailable";
    }
    returnList->find(pathname)->set( hwRev ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTestHelper::VersionGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/system/Version"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->

	std::shared_ptr<IAppSettings> appSettings( IAppSettingsFactory::getInterface() ) ;
	returnList->find(pathname)->set( appSettings->getBuildVersion() ) ;


	// <--%%
}








// Add any statics, private methods etc here %%-->


// <--%%
