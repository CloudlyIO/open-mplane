/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      GpioTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "GpioTestHelper.h"

// Add any specific includes here %%-->
#include "IDevices.h"
#include "IDevice.h"
#include "IRadio.h"
#include "IGpioExp.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<GpioTestHelper> GpioTestHelper::getInstance()
{
	static std::shared_ptr<GpioTestHelper> instance(std::make_shared<GpioTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
GpioTestHelper::GpioTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
GpioTestHelper::~GpioTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void GpioTestHelper::readPort( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(FEM:I2C0) type
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * UINT value
	//

	// Insert your code here : %%-->

	std::shared_ptr<IGpioExp> exp(getGpioExp(callList->find("type")->toString()));

	UINT8 value = 0;
	ReturnType::State status = exp->read8BitPort(callList->find("port")->toInt(), value);
	if (status != ReturnType::RT_OK)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to read Port") ;
		return ;
	}

	returnList->find("value")->set(value);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void GpioTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(FEM:I2C0) type
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<IGpioExp> exp(getGpioExp(callList->find("type")->toString()));

	std::stringstream ss ;
	ss << std::endl ;
	exp->show(ss) ;

	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void GpioTestHelper::writePort( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(FEM:I2C0) type
	// * INT port
	// * UINT value
	// * UINT mask
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IGpioExp> exp(getGpioExp(callList->find("type")->toString()));

	ReturnType::State status = exp->write8BitPort(callList->find("port")->toInt(),
			callList->find("value")->toInt(), callList->find("mask")->toInt());
	if (status != ReturnType::RT_OK)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Unable to write Port") ;
		return ;
	}

	// <--%%
}










// Add any statics, private methods etc here %%-->

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<IGpioExp> GpioTestHelper::getGpioExp(std::string type)
{
	std::shared_ptr<IDevices> devices =  IDevicesFactory::create();
	if (type == "FEM")
	{
		std::shared_ptr<IDevice> device(devices->getDevice(IDevice::EXP, IDevices::DeviceCollection::FEM, 0)) ;
		return (std::dynamic_pointer_cast<IGpioExp>(device));
	}
	else
	{
		std::shared_ptr<IDevice> device(devices->getDevice(IDevice::EXP, 0)) ;
		return (std::dynamic_pointer_cast<IGpioExp>(device));
	}
}
// <--%%
