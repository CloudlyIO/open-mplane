/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      TxPclTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "TxPclTestHelper.h"

// Add any specific includes here %%-->

#include "ITxPcl.h"
#include "IRadio.h"
#include "Frequency.h"
#include "Power.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<TxPclTestHelper> TxPclTestHelper::getInstance()
{
	static std::shared_ptr<TxPclTestHelper> instance(std::make_shared<TxPclTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
TxPclTestHelper::TxPclTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
TxPclTestHelper::~TxPclTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING state
	// * FLOAT targetPower (dBm)
	// * FLOAT openLoopTarget (dB)
	// * FLOAT rfOutputPower (dBm)
	// * FLOAT digitalInputPower (dB)
	// * FLOAT gainError (dB)
	// * FLOAT attenuation (dB)
	//

	// Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;

        DataVariant* state(returnList->find("state")) ;
        state->set( pcl->getStateStr() );
        DataVariant* target(returnList->find("targetPower")) ;
        target->set( pcl->getTargetPower().get() );
        DataVariant* openLoop(returnList->find("openLoopTarget")) ;
        openLoop->set( pcl->getOpenLoopTarget().get() );
        DataVariant* output(returnList->find("rfOutputPower")) ;
        output->set( pcl->getRfOutputPower().get() );
        DataVariant* input(returnList->find("digitalInputPower")) ;
        input->set( pcl->getDigitalInputPower().get() );
        DataVariant* gainError(returnList->find("gainError")) ;
        gainError->set( pcl->getGainError().get() );
        DataVariant* attenuation(returnList->find("attenuation")) ;
        attenuation->set( pcl->getAttenuation().get() );
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::getState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING state
	//

	// Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {

        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;

        DataVariant* state(returnList->find("state")) ;

        state->set( pcl->getStateStr() );
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::setAuto( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {

        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;
        pcl->setAuto();
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::setManual( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {

        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;
        pcl->setManual();
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::setTesting( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;

        if (!pcl->setTesting())
        {
        	// if not supported by the implementation then let the user know
        	returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        	std::stringstream ss ;
        	ss << " This command is not supported " ;
        	returnList->find(RtiKeyword::MESSAGE_VAR)->set( ss.str() );
        }
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;

        pcl->showPcl();
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPclTestHelper::update( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    // Insert your code here : %%-->
    int path;

    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<ITxPcl> pcl(ITxPcl::getInstance(path)) ;

        pcl->timerUpdate();
    }
	// <--%%
}










// Add any statics, private methods etc here %%-->

bool TxPclTestHelper::checkPath(DataVariantList* callList,
        DataVariantList* returnList, int &path) const
{
    path = callList->find("path")->toInt();

    path--;    // convert port number to internal software index

    if (path < 0  || path >= IRadioFactory::getInterface()->getNumberOfTxPorts())
    {
        returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusERROR);

        std::stringstream ss;
        ss << "path " << path + 1 << " outside valid range (Number of ports "
                << IRadioFactory::getInterface()->getNumberOfTxPorts() << ")";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str());

        return false;
    }
    return true;
}


// <--%%
