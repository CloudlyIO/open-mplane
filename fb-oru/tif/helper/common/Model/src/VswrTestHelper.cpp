/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      VswrTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "VswrTestHelper.h"

// Add any specific includes here %%-->
#include "IRadio.h"
#include "IVswr.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<VswrTestHelper> VswrTestHelper::getInstance()
{
	static std::shared_ptr<VswrTestHelper> instance(std::make_shared<VswrTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
VswrTestHelper::VswrTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
VswrTestHelper::~VswrTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void VswrTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT path
	// * ENUM(active:inactive) state
	// * FLOAT returnloss (dB)
	// * FLOAT threshold (dB)
	// * INT period (sec(s))
	// * ENUM(clear:set) fault
	//

	// Insert your code here : %%-->

    int path;
    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<IVswr> vswr = IVswr::getInstance( path );

        DataVariant* state(returnList->find("state")) ;
        state->set( vswr->isActive() ? "active":"inactive" );
        DataVariant* thePath(returnList->find("path")) ;
        thePath->set( path+1 );
        DataVariant* reverse(returnList->find("returnloss")) ;
        reverse->set( vswr->getReturnLoss().get() );
        DataVariant* threshold(returnList->find("threshold")) ;
        threshold->set( vswr->getThreshold().get() );
        DataVariant* period(returnList->find("period")) ;
        period->set( vswr->getPeriod() );
        DataVariant* fault(returnList->find("fault")) ;
        fault->set( vswr->faultState() ? "set":"clear" );
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void VswrTestHelper::getShutdown( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT path=1]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(auto:manual) mode
	//

	// Insert your code here : %%-->

    int path;
    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<IVswr> vswr = IVswr::getInstance( path );

		DataVariant* mode(returnList->find("mode")) ;
		mode->set( vswr->getShutdownMode() ? "manual":"auto" );
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void VswrTestHelper::setPeriod( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// * INT period (sec(s))
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;
    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<IVswr> vswr = IVswr::getInstance( path );
        int   period = callList->find("period")->toInt();
        vswr->setPeriod( period );
    }
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void VswrTestHelper::setShutdown( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(auto:manual) mode
	// * [INT path=1]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;
    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
		/* Get the requested instance of the VSWR */
		std::shared_ptr<IVswr> vswr = IVswr::getInstance( path ); // Actually it doesn't matter which path as the implementation is common to both.

		if (callList->find("mode")->toString() == "auto")
		{
			vswr->setShutdownMode( IVswr::vswrShutdownMode_T::automatic );
		}
		else if (callList->find("mode")->toString() == "manual")
		{
			vswr->setShutdownMode( IVswr::vswrShutdownMode_T::manual );
		}
    }
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void VswrTestHelper::setThreshold( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT path
	// * FLOAT threshold (dB)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    int path;
    /* Check whether the requested path is valid */
    if (checkPath(callList, returnList, path))
    {
        /* Get the requested instance of the PCL */
        std::shared_ptr<IVswr> vswr = IVswr::getInstance( path );
        float  threshold = callList->find("threshold")->toFloat();
        Power setThresh( threshold );
        vswr->setThreshold( setThresh );
    }

	// <--%%
}










// Add any statics, private methods etc here %%-->
bool VswrTestHelper::checkPath(DataVariantList* callList,
        DataVariantList* returnList, int &path) const
{
    path = callList->find("path")->toInt();

    path--;    // convert port number to internal software index

    if (path < 0  || path >= IRadioFactory::getInterface()->getNumberOfTxPorts())
    {
        returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusERROR);

        std::stringstream ss;
        ss << "path " << path + 1 << " outside valid range (Number of ports "
                << IRadioFactory::getInterface()->getNumberOfTxPorts() << ")";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str());

        return false;
    }
    return true;
}


// <--%%
