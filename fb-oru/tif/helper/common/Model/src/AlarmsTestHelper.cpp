/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      AlarmsTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "AlarmsTestHelper.h"

// Add any specific includes here %%-->
#include <chrono>
#include "IAlarm.h"
#include "IAlarmsList.h"
#include "IAlarmMonitor.h"
#include "IFault.h"
#include "IFaultsList.h"
#include "TcpPortHelper.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<AlarmsTestHelper> AlarmsTestHelper::getInstance()
{
	static std::shared_ptr<AlarmsTestHelper> instance(std::make_shared<AlarmsTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
AlarmsTestHelper::AlarmsTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
AlarmsTestHelper::~AlarmsTestHelper()
{
	// Insert your code here : %%-->


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::clearFault( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	std::shared_ptr<IFaultsList> faultsList(IFaultsList::getInstance()) ;

	unsigned int ident = ((callList->find("ident")->toInt()));

	if( (0 != ident) && ((unsigned int)faultsList->getSize() >= ident) )
	{
		std::shared_ptr<IFault> faultToClear = faultsList->getFault(ident);

		faultToClear->clearFaultForTesting();

		ret = ReturnType::RT_OK;
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "value", returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::getAlarm( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	std::stringstream ss ;
	ss << std::endl ;

	std::shared_ptr<IAlarmsList> alarmsList(IAlarmsList::getInstance()) ;

	unsigned int ident = ((callList->find("ident")->toInt()));

	if( (0 != ident) && ((unsigned int)alarmsList->getSize() >= ident) )
	{
		std::shared_ptr<IAlarm> alarmToShow = alarmsList->getAlarm(ident);

		alarmToShow->showAlarmAndFault(ss);

		returnList->find(RtiKeyword::INFO_VAR)->set(ss.str());

		ret = ReturnType::RT_OK;
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "value", returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::getPeriod( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT period (s)
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	returnList->find("period")->set(static_cast<int>(monitor->getPeriod())) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::periodicPortClose( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	monitor->unregisterPeriodicHandler() ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::periodicPortOpen( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1024..65353} port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!TcpPortHelper::portValid(msgParser, "port", callList, returnList))
		return ;

	std::shared_ptr<TcpPortHelper> port(new TcpPortHelper(msgParser, "port", callList) ) ;

	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	monitor->registerPeriodicHandler([this,port](const std::vector<std::shared_ptr<IAlarm>>& activeAlarms){
		periodicReport(port, activeAlarms) ;
	}) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::portClose( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	monitor->unregisterHandler() ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::portOpen( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1024..65353} port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!TcpPortHelper::portValid(msgParser, "port", callList, returnList))
		return ;

	std::shared_ptr<TcpPortHelper> port(new TcpPortHelper(msgParser, "port", callList) ) ;

	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	monitor->registerHandler([port](const IAlarm& alarm){

		std::string status("ALARM " + alarm.getName() + " " + alarm.getAlarmStateString()) ;
		port->send(status) ;
	}) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::raiseFault( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT ident]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	std::shared_ptr<IFaultsList> faultsList(IFaultsList::getInstance()) ;

	unsigned int ident = ((callList->find("ident")->toInt()));

	if( (0 != ident) && ((unsigned int)faultsList->getSize() >= ident) )
	{
		std::shared_ptr<IFault> fault = faultsList->getFault(ident);

		fault->raiseFaultForTesting();

		ret = ReturnType::RT_OK;
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}
	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "value", returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::setPeriod( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{5..} period (s)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmMonitor> monitor(IAlarmMonitor::getInstance()) ;
	monitor->setPeriod( static_cast<unsigned>(callList->find("period")->toInt()) ) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::showAlarmId( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmsList> alarmsList(IAlarmsList::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;
	alarmsList->showNamesAndIds(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str());
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::showAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmsList> alarmsList(IAlarmsList::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;
	alarmsList->show(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str());


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::showFaultId( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IFaultsList> faultsList(IFaultsList::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;
	faultsList->showNamesAndIds(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str());
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::status( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IAlarmsList> alarmsList(IAlarmsList::getInstance()) ;
	std::vector<std::shared_ptr<IAlarm>> alarms(alarmsList->getActiveAlarms()) ;
	if (alarms.empty())
		return ;

	std::string alarmsStr ;
	for (auto alarm : alarms)
	{
		if (!alarmsStr.empty())
			alarmsStr.append(", ") ;
		alarmsStr.append(alarm->getName()) ;
	}
	returnList->find(RtiKeyword::STATUS_VAR)->set(RtiKeyword::StatusOK);
	returnList->find(RtiKeyword::INFO_VAR)->set(RtiKeyword::StatusERROR);
	returnList->find(RtiKeyword::MESSAGE_VAR)->set("Active alarms:" + alarmsStr);


	// <--%%
}










// Add any statics, private methods etc here %%-->
//-------------------------------------------------------------------------------------------------------------
bool AlarmsTestHelper::checkState(ReturnType::State ret, const std::string& param, DataVariantList *returnList) const
{
	if (ret != ReturnType::RT_OK)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Unable to set " << param << " : ERROR" << ReturnType::getState(ret) ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return false ;
	}

	return true ;
}

//-------------------------------------------------------------------------------------------------------------
void AlarmsTestHelper::periodicReport(std::shared_ptr<TcpPortHelper> port,
		const std::vector<std::shared_ptr<IAlarm> >& activeAlarms)
{
	std::string status("NoAlarm") ;
	if (!activeAlarms.empty())
	{
		std::string alarmIds;
		std::string alarmNames;
		for (auto alarm : activeAlarms)
		{
			if (!alarmIds.empty())
				alarmIds += "," ;
			alarmIds += std::to_string( alarm->getId() ) ;

			if (!alarmNames.empty())
				alarmNames += "," ;
			alarmNames += alarm->getName() ;
		}
		status = "AID=" + alarmIds + " " + alarmNames ;
	}

	auto unix_timestamp = std::chrono::seconds(std::time(NULL));
	port->send(std::to_string(unix_timestamp.count()) + " " + status) ;
}
// <--%%
