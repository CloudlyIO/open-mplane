/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      EqualiserTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "EqualiserTestHelper.h"

// Add any specific includes here %%-->

#include "CommonEqualiser.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<EqualiserTestHelper> EqualiserTestHelper::getInstance()
{
	static std::shared_ptr<EqualiserTestHelper> instance(std::make_shared<EqualiserTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
EqualiserTestHelper::EqualiserTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
EqualiserTestHelper::~EqualiserTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EqualiserTestHelper::getPassthrough( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL(OFF:ON) passthrough
	//

	// Insert your code here : %%-->

    std::vector< std::shared_ptr<IEqualiser> > txEqualisers(ITxEqualiserFactory::getEqualisers());

    //The passthrough mode is globally applied to tx and rx paths
    returnList->find("passthrough")->set(txEqualisers[0]->getPassthroughMode());


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EqualiserTestHelper::setPassthrough( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * BOOL(OFF:ON) passthrough
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::vector< std::shared_ptr<IEqualiser> >::iterator it;

    std::vector< std::shared_ptr<IEqualiser> > txEqualisers(ITxEqualiserFactory::getEqualisers());

    for (it = txEqualisers.begin(); it != txEqualisers.end(); it++ )
    {
    	(*it)->setPassthroughMode(callList->find("passthrough")->toBool());
    }

    std::vector< std::shared_ptr<IEqualiser> > rxEqualisers(IRxEqualiserFactory::getEqualisers());

    for (it = rxEqualisers.begin(); it != rxEqualisers.end(); it++ )
    {
    	(*it)->setPassthroughMode(callList->find("passthrough")->toBool());
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EqualiserTestHelper::showAll( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::vector< std::shared_ptr<IEqualiser> >::iterator it;

    std::vector< std::shared_ptr<IEqualiser> > txEqualisers(ITxEqualiserFactory::getEqualisers());

    std::ostringstream str;
    for (it = txEqualisers.begin(); it != txEqualisers.end(); it++ )
    {
    	(*it)->show(str);
    	returnList->find(RtiKeyword::MESSAGE_VAR)->set(str.str()) ;
    }

    std::vector< std::shared_ptr<IEqualiser> > rxEqualisers(IRxEqualiserFactory::getEqualisers());

    for (it = rxEqualisers.begin(); it != rxEqualisers.end(); it++ )
    {
    	(*it)->show(str);
    	returnList->find(RtiKeyword::MESSAGE_VAR)->set(str.str()) ;
    }
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EqualiserTestHelper::showRx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

    std::vector< std::shared_ptr<IEqualiser> > rxEqualisers(IRxEqualiserFactory::getEqualisers());

    unsigned int index = callList->find("Index")->toUint() - 1;

    std::ostringstream str;
    if (index < rxEqualisers.size())
    {
    	rxEqualisers[index]->show(str);
    	returnList->find(RtiKeyword::MESSAGE_VAR)->set(str.str()) ;
    }
    else
    {
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Invalid equaliser index") ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void EqualiserTestHelper::showTx( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT Index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

    std::vector< std::shared_ptr<IEqualiser> > txEqualisers(ITxEqualiserFactory::getEqualisers());

    unsigned int index = callList->find("Index")->toUint() - 1;

    std::ostringstream str;
    if (index < txEqualisers.size())
    {
    	txEqualisers[index]->show(str);
    	returnList->find(RtiKeyword::MESSAGE_VAR)->set(str.str()) ;
    }
    else
    {
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Invalid equaliser index") ;
    }

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
