/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      TxPortTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "TxPortTestHelper.h"

// Add any specific includes here %%-->
#include <cmath>
#include <string>
#include <sstream>
#include "IRadio.h"
#include "ITxPort.h"
#include "ITxCalPort.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->
using namespace std;



// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<TxPortTestHelper> TxPortTestHelper::getInstance()
{
	static std::shared_ptr<TxPortTestHelper> instance(std::make_shared<TxPortTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
TxPortTestHelper::TxPortTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
TxPortTestHelper::~TxPortTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (dB)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("value")->setPower( txPort->getAttenuation() );
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getAvgRawRfPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT result (Cts)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxCalPort> txPort = getTxCalPort(   callList, returnList );

	if( txPort )
	{
		int returnValue = txPort->getAvgRawRfPower();

		returnList->find("result")->set( returnValue );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getCWPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT result (dBFS)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("result")->setPower( txPort->getCWPower() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getDacDCOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT ioffset
	// * INT qoffset
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(callList, returnList);
	if (!txPort)
		return ;

	int ioffset ;
	int qoffset ;
	txPort->getDacDCOffset(ioffset, qoffset) ;
	returnList->find("ioffset")->setInt(ioffset);
	returnList->find("qoffset")->setInt(qoffset);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getDacMagOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT ioffset
	// * INT qoffset
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(callList, returnList);
	if (!txPort)
		return ;

	int ioffset ;
	int qoffset ;
	txPort->getDacMagOffset(ioffset, qoffset) ;
	returnList->find("ioffset")->setInt(ioffset);
	returnList->find("qoffset")->setInt(qoffset);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getDacNco( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (MHz)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("value")->set( (float)txPort->getDacIfOffset() );
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getDacPhaseOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT ioffset
	// * INT qoffset
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(callList, returnList);
	if (!txPort)
		return ;

	int ioffset ;
	int qoffset ;
	txPort->getDacPhaseOffset(ioffset, qoffset) ;
	returnList->find("ioffset")->setInt(ioffset);
	returnList->find("qoffset")->setInt(qoffset);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getExtFilterLoss( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (dB)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("value")->setPower( txPort->getExtFilterLoss() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getFifoLevel( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT level
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	returnList->find("level")->set(0) ;

	if( txPort )
	{
		 unsigned level = txPort->getFifoLevel();
		 returnList->find("level")->set( static_cast<int>(level) );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getFilter( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );
	std::stringstream outString;
	ReturnType::State ret = ReturnType::RT_OK;

	if( txPort )
	{
		ITxPort::LowPassFilterState state = txPort->getLowPassFilter();
		if ( ITxPort::LowPassFilterState::FILTER_ON == state )
		{
			outString << "on";
		}
		else if ( ITxPort::LowPassFilterState::FILTER_OFF == state )
		{
			outString << "off";
		}
		else
		{
			outString << "Failed to read state";
			ret = ReturnType::RT_ERROR;
		}
		if( checkState(ret, outString.str(), returnList) )
		{
			returnList->find(RtiKeyword::INFO_VAR)->set(outString.str()) ;
		}
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getFreq( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (kHz)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		Frequency freq = txPort->getFrequency();
		DataVariant* value(returnList->find("value")) ;
		value->setInt( (int)freq.getInt(Frequency::str2unit(value->getUnits()) ) ) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getFwdPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT rf (dBm)
	// * FLOAT digital (dB)
	//

	// Insert your code here : %%-->

	ReturnType::State returnValue = ReturnType::RT_ERROR;

	std::shared_ptr<ITxPort> txPort = getTxPort( callList, returnList );

	if( txPort )
	{
		Power rf;
		Power digital;

		returnValue = txPort->getFwdPower( rf, digital );

		if(returnValue == ReturnType::RT_OK)
		{
			DataVariant* rfValue(returnList->find("rf")) ;
			rfValue->set( rf.get() ) ;

			DataVariant* digitalValue(returnList->find("digital")) ;
			digitalValue->set( digital.get() ) ;
		}
	}

	checkState(returnValue, "value", returnList);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getIfAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (dB)
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("value")->setPower( txPort->getIFAttenuation() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getOutputAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );
	std::stringstream outString;
	ReturnType::State ret = ReturnType::RT_OK;

	if( txPort )
	{
		ITxPort::AttenPadState state = txPort->getOpAttenPad();
		if ( ITxPort::AttenPadState::PAD_ON == state )
		{
			outString << "on";
		}
		else if ( ITxPort::AttenPadState::PAD_OFF == state )
		{
			outString << "off";
		}
		else
		{
			outString << "Failed to read state";
			ret = ReturnType::RT_ERROR;
		}
		if( checkState(ret, outString.str(), returnList) )
		{
			returnList->find(RtiKeyword::INFO_VAR)->set(outString.str()) ;
		}
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getPath( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT path
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( !txPort.get() )
		return ;

	returnList->find("path")->set(txPort->getPath());
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getRawRfPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT result (Cts)
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxCalPort> txPort = getTxCalPort(   callList, returnList );

	if( txPort )
	{
		int returnValue = txPort->getRawRfPower();

		returnList->find("result")->set( returnValue );
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getRawRfPowerVariation( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT result (Cts)
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxCalPort> txPort = getTxCalPort(   callList, returnList );

	if( txPort )
	{
		int returnValue = txPort->getRawRfPowerVariantion();

		returnList->find("result")->set( returnValue );
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getRevPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT rf (dBm)
	// * FLOAT digital (dB)
	//

	// Insert your code here : %%-->

	ReturnType::State returnValue = ReturnType::RT_ERROR;

	std::shared_ptr<ITxPort> txPort = getTxPort( callList, returnList );

	if( txPort )
	{
		Power rf;
		Power digital;

		returnValue = txPort->getRevPower( rf, digital );

		if(returnValue == ReturnType::RT_OK)
		{
			DataVariant* rfValue(returnList->find("rf")) ;
			rfValue->set( rf.get() ) ;

			DataVariant* digitalValue(returnList->find("digital")) ;
			digitalValue->set( digital.get() ) ;
		}
	}

	checkState(returnValue, "value", returnList);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getRfAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value (dB)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("value")->setPower( txPort->getRFAttenuation() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getRfPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT result (dBm)
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("result")->setPower( txPort->getRfPower() );
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getScaler( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT result (dBfs)
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		returnList->find("result")->setPower( txPort->getDigitalPowerScaler() );
	}



	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * INT state
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	// Retrieve an instance of the Tx port
	std::shared_ptr<ITxPort> txPort = getTxPort(  callList, returnList );

	if( txPort )
	{
		DataVariant *state = returnList->find("state");
		if( txPort->isTxOn() )
		{
			state->set(1);
		}
		else
		{
			state->set(0);
		}
	}
	else
	{
		// Could not "get" port!
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "state", returnList);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::getTemp( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT result (DegC)
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		Temperature returnValue = txPort->getTemperature( );

		returnList->find("result")->set( returnValue.get() );
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::resetFifo( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_OUT_OF_RANGE ;

	if( txPort )
	{
		 ret = txPort->resetFifo();
	}
	checkState(ret, "index", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (dB)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		ReturnType::State result = txPort->setAttenuation( callList->find("value")->toPower() );
		checkState(result, "Atten", returnList) ;
	}
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setCWPower( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * [FLOAT value (dBFS)]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_OUT_OF_RANGE ;

	if( txPort )
	{
		DataVariant* value(callList->find("value")) ;
		if (value->isSet())
		{
			ret = txPort->setCWPower(value->toPower());
		}
	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setDacDCOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * INT ioffset
	// * INT qoffset
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED ;

	if( txPort )
	{
		DataVariant* ioffset(callList->find("ioffset")) ;
		DataVariant* qoffset(callList->find("qoffset")) ;


		ret = txPort->setDacDCOffset( ioffset->toInt(), qoffset->toInt() );

	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setDacMagOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * INT ioffset
	// * INT qoffset
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED ;

	if( txPort )
	{
		DataVariant* ioffset(callList->find("ioffset")) ;
		DataVariant* qoffset(callList->find("qoffset")) ;


		ret = txPort->setDacMagOffset( ioffset->toInt(), qoffset->toInt() );

	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setDacNco( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (MHz)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED ;

	if( txPort )
	{
		DataVariant* value(callList->find("value"));
		double ifoffset(value->toFloat()) ;

		if ( ( ifoffset > 120.0 ) || ( ifoffset < -120.0 ) )
		{
			std::stringstream ss;
			// set an error
			returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
			ss << "Unable to set value : ERROR ";
			ss << "Input value should be an offset within +/-120MHz";
			returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str());
		}
		else
		{
			ret = txPort->setDacIfOffset( ifoffset );
		}
	}

	checkState(ret, "value", returnList);

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setDacPhaseOffset( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * INT ioffset
	// * INT qoffset
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED ;

	if( txPort )
	{
		DataVariant* ioffset(callList->find("ioffset")) ;
		DataVariant* qoffset(callList->find("qoffset")) ;


		ret = txPort->setDacPhaseOffset( ioffset->toInt(), qoffset->toInt() );

	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setEnable( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * ENUM(on:off:follow) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	// Retrieve an instance of the Tx port
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		// get the mode
		if (callList->find("mode")->toString() == "on")
		{
			txPort->setTxOn();

			// The PA control will be handled by setTxOnLowLevel()
		}
		else if (callList->find("mode")->toString() == "off")
		{
			txPort->setTxOff();

			// The PA control will be handled by setTxOffLowLevel()
		}
		else if (callList->find("mode")->toString() == "follow")
		{
			// TODO This will follow the FPGA TX TDD frame timing (RRH mode). Set to not supported for the time being.
		   ret = ReturnType::RT_NOT_SUPPORTED;
		}
	}
	else
	{
		// Could not "get" port!
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "value", returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setExtFilterLoss( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT{0.0..3.0} value (dB)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED ;

		DataVariant* value(callList->find("value")) ;
		if (value->isSet())
		{
			ret = txPort->setExtFilterLoss( value->toPower());
		}
		checkState(ret, "value", returnList) ;

	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setFilter( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * ENUM(on:off) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED;

	if( txPort )
	{
		// get the mode
		if (callList->find("mode")->toString() == "on")
		{
			ret = txPort->setLowPassFilter( ITxPort::LowPassFilterState::FILTER_ON );
		}
		else if (callList->find("mode")->toString() == "off")
		{
			ret = txPort->setLowPassFilter( ITxPort::LowPassFilterState::FILTER_OFF );
		}
		else
		{
			ret = ReturnType::RT_NOT_SUPPORTED;
		}
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "result", returnList) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setFreq( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (kHz)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		ReturnType::State ret = ReturnType::RT_OK ;

		// * [FLOAT NCOFreq]
		DataVariant* value(callList->find("value")) ;
		if (value->isSet())
		{
			ret = txPort->setFrequency(Frequency(value->toFloat(), Frequency::str2unit(value->getUnits()))) ;

			if (!checkState(ret, "value", returnList))
				return ;
		}
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setIfAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (dB)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		txPort->setIFAttenuation( callList->find("value")->toPower() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setMode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * ENUM(modulated:cw) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	ReturnType::State ret = ReturnType::RT_OK;

	// Retrieve an instance of the Tx port
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );


	if( txPort )
	{
		// get the mode
		if (callList->find("mode")->toString() == "modulated")
		{
			ret = txPort->setMode(ITxPort::Mode::MODULATED);
		}
		else if (callList->find("mode")->toString() == "cw")
		{
			ret = txPort->setMode( ITxPort::Mode::CW_TEST );
		}
		else
		{
			ret = ReturnType::RT_NOT_SUPPORTED;
		}
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "result", returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setOutputAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * ENUM(on:off) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_NOT_SUPPORTED;

	if( txPort )
	{
		// get the mode
		if (callList->find("mode")->toString() == "on")
		{
			ret = txPort->setOpAttenPad( ITxPort::AttenPadState::PAD_ON );
		}
		else if (callList->find("mode")->toString() == "off")
		{
			ret = txPort->setOpAttenPad( ITxPort::AttenPadState::PAD_OFF );
		}
		else
		{
			ret = ReturnType::RT_NOT_SUPPORTED;
		}
	}
	else
	{
		ret = ReturnType::RT_OUT_OF_RANGE;
	}

	// Check to see if the return value is anything other than RT_OK. This will
	// provide error feedback or just return a value result of 0 if everything is
	// ok.
	checkState(ret, "result", returnList) ;


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setPath( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * INT path
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(callList, returnList);

	if( !txPort.get() )
		return ;

	ReturnType::State result = txPort->setPath( callList->find("path")->toInt()  );

	checkState(result, "Path", returnList) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setRawRfAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * INT value
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxCalPort> txPort = getTxCalPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_OUT_OF_RANGE ;

	if( txPort )
	{

		// * [INT PWM]
		DataVariant* value(callList->find("value")) ;
		if (value->isSet())
		{
			ret = txPort->setRawRFAtten( (unsigned int)value->toInt() );
		}
	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setRfAtten( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (dB)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( txPort )
	{
		txPort->setRFAttenuation( callList->find("value")->toPower() );
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setScaler( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * [FLOAT value (dBFS)]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	ReturnType::State ret = ReturnType::RT_OUT_OF_RANGE ;

	if( txPort )
	{
		DataVariant* value(callList->find("value")) ;
		if (value->isSet())
		{
			ret = txPort->setDigitalPowerScaler(value->toFloat() );
		}
	}

	checkState(ret, "value", returnList);


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::setSynth( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// * FLOAT value (kHz)
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ITxPort> txPort = getTxPort(   callList, returnList );

	if( !txPort )
		return ;

	ReturnType::State ret = ReturnType::RT_OK ;

	// * [FLOAT NCOFreq]
	DataVariant* value(callList->find("value")) ;
	if (value->isSet())
	{
		// call the low-level method for setting frequency which simply sets the synth
		ret = txPort->setSynth(Frequency(value->toFloat(), Frequency::str2unit(value->getUnits()))) ;
		if (!checkState(ret, "value", returnList))
			return ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::showSynth( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1..${NUM_TX_PORTS}} index
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	int txIndex = callList->find("index")->toInt() ;
	txIndex--; // called by port number, change to zero based index

	std::shared_ptr<IRadio>radio( IRadioFactory::getInterface() );
	IDevices& devices( radio->getDevices() ) ;
	std::shared_ptr<ISynth> txSynth( devices.getTxSynth( txIndex ) ) ;

	std::stringstream ss ;
	ss << std::endl ;
	txSynth->show(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void TxPortTestHelper::PortsGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/tx/Ports"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::vector< std::shared_ptr<ITxPort> > txPorts = ITxPortFactory::getPorts( ) ;
	returnList->find(pathname)->setInt(txPorts.size()) ;
	// <--%%
}








// Add any statics, private methods etc here %%-->

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<ITxPort> TxPortTestHelper::getTxPort(DataVariantList *callList, DataVariantList *returnList) const
{
	std::vector< std::shared_ptr<ITxPort> > txPorts = ITxPortFactory::getPorts( ) ;

	int index( callList->find("index")->toInt() ) ;
	index--;    // convert port number to internal software index
	if( index < 0 || index >= IRadioFactory::getInterface()->getNumberOfTxPorts() )
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "index " << index+1 << " outside valid range (Number of ports "
				<< IRadioFactory::getInterface()->getNumberOfTxPorts() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return std::shared_ptr<ITxPort>() ;

	}
	return txPorts[index];
}

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<ITxCalPort> TxPortTestHelper::getTxCalPort(DataVariantList *callList, DataVariantList *returnList) const
{
	std::vector< std::shared_ptr<ITxCalPort> > txPorts = ITxCalPortFactory::getPorts( ) ;

	int index( callList->find("index")->toInt() ) ;

	index--;    // convert port number to internal software index

	if( index < 0 || index >= IRadioFactory::getInterface()->getNumberOfTxPorts() )
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "index " << index+1 << " outside valid range (Number of ports "
				<< IRadioFactory::getInterface()->getNumberOfTxPorts() << ")" ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return std::shared_ptr<ITxCalPort>() ;

	}
	return txPorts[index];
}

//-------------------------------------------------------------------------------------------------------------
bool TxPortTestHelper::checkState(ReturnType::State ret, const std::string& param, DataVariantList *returnList) const
{
	if (ret != ReturnType::RT_OK)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

		std::stringstream ss ;
		ss << "Unable to set " << param << " : ERROR" << ReturnType::getState(ret) ;
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

		return false ;
	}

	return true ;
}

// <--%%
