/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      CalTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "CalTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include <memory>

#include "xstringfunc.hpp"

#include "ICalDownloadManagement.h"
#include "ICarrierServer.h"
#include "ICarrierHardware.h"
#include "ICalData.h"
#include "IRadio.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<CalTestHelper> CalTestHelper::getInstance()
{
	static std::shared_ptr<CalTestHelper> instance(std::make_shared<CalTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
CalTestHelper::CalTestHelper()
// Insert additional inheritance constructors here : %%-->
: 	mMutex(),
 	mFileStatus(IFileStatus::simpleTracker()),
 	mLatestStatus(mFileStatus),
	mCalPort(),
	mCalFileWriter(),
	mInstallingCal(false),
	mInstalledCal(false)

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
CalTestHelper::~CalTestHelper()
{
	// Insert your code here : %%-->


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::getMode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(enable:disable) mode
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());

    DataVariant* mode = returnList->find("mode");

    if( radio->getCalMode() )
    {
        mode->set("enable");
    }
    else
    {
        mode->set("disable");
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::install( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(${CAL_FILE_TYPES}) type
	// * [STRING url]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	// Download
	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;

	std::string failReason ;
	bool ok = true;

	// with no url specified, use default filename and previous url setting
	std::string type(callList->find("type")->toString()) ;
	std::string url(callList->find("url")->toString()) ;
	if (url.empty())
	{
		ok = calMgr->getAndInstall(type,
				IFileStatus::simpleOutput([&msgParser](const std::string& status){
					msgParser.sendOutput(status);
				}),
				failReason) ;
	}
	else
	{
		ok = calMgr->getAndInstall(type, url,
				IFileStatus::simpleOutput([&msgParser](const std::string& status){
					msgParser.sendOutput(status);
				}),
				failReason) ;
	}

	if (!ok)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::installStatus( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * BOOL done
	// * BOOL fail
	// * INT totalProgress (%)
	// * STRING file
	// * STRING op
	// * INT fileProgress (%)
	// * STRING error
	//

	// Insert your code here : %%-->
	if (!mInstallingCal && !mInstalledCal)
	{
		returnList->find("done")->set(false) ;
		returnList->find("totalProgress")->set(0) ;
		returnList->find("fileProgress")->set(0) ;
		returnList->find("fail")->set(true) ;

		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("No zip file has been installed") ;
		return ;
	}

	returnList->find("done")->set(mLatestStatus->isComplete()) ;
	returnList->find("totalProgress")->set( static_cast<int>(mLatestStatus->getTotalProgress()) ) ;
	returnList->find("file")->set(mLatestStatus->getFilename()) ;
	returnList->find("op")->set(mLatestStatus->getOperation()) ;
	returnList->find("fileProgress")->set( static_cast<int>(mLatestStatus->getProgress()) ) ;

	std::string error(mLatestStatus->getError()) ;
	bool fail(!error.empty()) ;
	returnList->find("error")->set(error) ;
	returnList->find("fail")->set(fail) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::installTcp( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(${CAL_FILE_TYPES}) type
	// * INT tcp
	// * INT size
	// * [INT timeout=60]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	if (!TcpPortHelper::portValid(msgParser, "tcp", callList, returnList))
		return ;

	Mutex::Lock lock(mMutex) ;

	mCalPort = std::make_shared<TcpPortHelper>(msgParser, "tcp", callList) ;

	unsigned expectedSize( static_cast<unsigned>(callList->find("size")->toInt()) ) ;
	unsigned timeoutSecs( static_cast<unsigned>(callList->find("timeout")->toInt()) ) ;
	std::string type(callList->find("type")->toString()) ;

	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;

	std::string failReason ;
	mCalFileWriter = calMgr->getCalFileWriter(type, mFileStatus, expectedSize, failReason) ;
	if (!mCalFileWriter)
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}

	// Initiate the transfer (in a background thread)
	mInstallingCal = true ;
	mLatestStatus = mFileStatus ;
	bool ok = calMgr->calInstall(

		type,
		mFileStatus,

		// Receive function
		[this, expectedSize, timeoutSecs]()->bool {
			bool ok = mCalPort->receive([this](const std::vector<uint8_t>& data)->bool {
//				std::cerr << "CalTestHelper::installTcp [tfr callback] write size=" << data.size() << std::endl ;
					return mCalFileWriter->addData(data) ;
				},
				expectedSize,
				timeoutSecs
			) ;

//			std::cerr << "CalTestHelper::installTcp tfr callback done - ok=" << ok << std::endl ;

			return ok ;
		},

		// Cleanup function
		[this](){ calInstallComplete(); },

		failReason
	) ;

	if (!ok)
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}

	returnList->find(RtiKeyword::INFO_VAR)->set("Transfer running in background. Use 'installStatus' command to check progress.") ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::load( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

    ICalDataFactory::getInterface()->load();

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::setMode( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(enable:disable) mode
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::shared_ptr<IRadio> radio(IRadioFactory::getInterface());

    std::shared_ptr<ICarrierServer> carrierServer(ICarrierServer::getInstance()) ;

    if( callList->find("mode")->toString() == "enable")
    {
        radio->setCalMode(true);
        carrierServer->setCalibrationMode(true) ;
    }
    else
    {
        radio->setCalMode(false);
        carrierServer->setCalibrationMode(false) ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;
	std::stringstream ss ;
	ss << std::endl ;

	calMgr->show(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::showTemperatures( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;
	std::stringstream ss ;
	ss << std::endl ;

	calMgr->showTemperatures(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;
	// <--%%
}



//-------------------------------------------------------------------------------------------------------------
bool CalTestHelper::urlSet( const std::string& pathname, DataVariant *value, DataVariantList *returnList )
{
	// Setter for "/cal/url"
	//
	// Use the value passed in as something like:
	//
	//    int newValue = value->toInt() ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;

	std::string failReason ;
	if ( !calMgr->setRemoteUrl(value->toString(), failReason) )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return false ;
	}
	return true ;


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::urlGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/cal/url"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//

	// Insert your code here : %%-->
	std::shared_ptr<ICalDownloadManagement> calMgr( ICalDownloadManagement::getInstance() ) ;
	returnList->find(pathname)->set( calMgr->getRemoteUrl() ) ;


	// <--%%
}









// Add any statics, private methods etc here %%-->
//=============================================================================================================
// PRIVATE
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void CalTestHelper::calInstallComplete()
{
	Mutex::Lock lock(mMutex) ;

	// create a copy of the last install status
	mLatestStatus = IFileStatus::simpleTracker() ;
	mLatestStatus->copy(mFileStatus) ;

	// reset
	mFileStatus->restart(1) ;
	mInstallingCal = false ;
	mInstalledCal = true ;
	mCalPort.reset() ;
	mCalFileWriter.reset() ;

//std::cerr << "CalTestHelper::calInstallComplete()" << std::endl ;
}


// <--%%
