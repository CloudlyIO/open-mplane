/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      PsuTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "PsuTestHelper.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->
#include "IPsu.h"

// List of methods implemented in base class:
//
// @gentool: suppress apiVersion
// @gentool: suppress checkApi
// @gentool: suppress debugStatus
// @gentool: suppress dump
// @gentool: suppress frd
// @gentool: suppress fwr
// @gentool: suppress get
// @gentool: suppress set
// @gentool: suppress logClose
// @gentool: suppress logOpen
// @gentool: suppress logShow
// @gentool: suppress portClose
// @gentool: suppress portOpen
// @gentool: suppress portShow
// @gentool: suppress restart

//=============================================================================================================
// CLASSES
//=============================================================================================================

//=============================================================================================================
// CONSTANTS
//=============================================================================================================

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<PsuTestHelper> PsuTestHelper::getInstance()
{
	static std::shared_ptr<PsuTestHelper> instance(std::make_shared<PsuTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
PsuTestHelper::PsuTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
PsuTestHelper::~PsuTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void PsuTestHelper::disableExtRfSupply( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(DISABLED:ENABLED:UNKNOWN) value
	//

	// Insert your code here : %%-->

    ReturnType::State returnState;
    IPsu::PsuState currentState;
    std::stringstream string;

    // Used to disable the function
    bool feature_disabled = true;
    if (feature_disabled)
    {
        returnState = ReturnType::RT_NOT_SUPPORTED;
        string << "This feature is currently not supported";
        checkState(returnState, string.str(), returnList);
        return;
    }

    IPsu::PsuState value = IPsu::UNKNOWN;
    std::shared_ptr<IPsu> Psu = getPsuInterface(callList, returnList);

    if (Psu.get())
    {
        returnState = Psu->psuDisable();
        currentState = Psu->getState();

        if ((returnState == ReturnType::RT_OK) && (currentState == IPsu::DISABLED))
        {
            string << "External RF power supply disabled";
            value = IPsu::DISABLED;
            returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
        }
        else
        {
            returnState = ReturnType::RT_ERROR;
            string << "Unable to disable the external RF power supply";
        }
    }
    else
    {
        returnState = ReturnType::RT_ERROR;
        string << "Unable to obtain the external RF power supply interface";
    }

    returnList->find("value")->set(value);
    checkState(returnState, string.str(), returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void PsuTestHelper::enableExtRfSupply( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(DISABLED:ENABLED:UNKNOWN) value
	//

	// Insert your code here : %%-->

    ReturnType::State returnState;
    IPsu::PsuState currentState;
    std::stringstream string;

    // Used to disable the function
    bool feature_disabled = true;
    if (feature_disabled)
    {
        returnState = ReturnType::RT_NOT_SUPPORTED;
        string << "This feature is currently not supported";
        checkState(returnState, string.str(), returnList);
        return;
    }

    IPsu::PsuState value = IPsu::UNKNOWN;
    std::shared_ptr<IPsu> Psu = getPsuInterface(callList, returnList);

    if (Psu.get())
    {
        returnState = Psu->psuEnable();
        currentState = Psu->getState();

        if ((returnState == ReturnType::RT_OK) && (currentState == IPsu::ENABLED))
        {
            string << "External RF power supply enabled";
            value = IPsu::ENABLED;
            returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
        }
        else
        {
            returnState = ReturnType::RT_ERROR;
            string << "Unable to enable the external RF power supply";
        }
    }
    else
    {
        returnState = ReturnType::RT_ERROR;
        string << "Unable to obtain the external RF power supply interface";
    }

    returnList->find("value")->set(value);
    checkState(returnState, string.str(), returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void PsuTestHelper::getExtRfSupplyState( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * ENUM(DISABLED:ENABLED:UNKNOWN) value
	//

	// Insert your code here : %%-->

    ReturnType::State returnState;
    std::stringstream string;

    // Used to disable the function
    bool feature_disabled = true;
    if (feature_disabled)
    {
        returnState = ReturnType::RT_NOT_SUPPORTED;
        string << "This feature is currently not supported";
        checkState(returnState, string.str(), returnList);
        return;
    }

    IPsu::PsuState value = IPsu::UNKNOWN;
    std::shared_ptr<IPsu> Psu = getPsuInterface(callList, returnList);

    if (Psu.get())
    {
        IPsu::PsuState mPsuState;
        mPsuState = Psu->getState();

        if (mPsuState == IPsu::ENABLED)
        {
            returnState = ReturnType::RT_OK;
            string << "External RF supply is enabled";
            value = IPsu::ENABLED;
            returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
        }
        else if (mPsuState == IPsu::DISABLED)
        {
            returnState = ReturnType::RT_OK;
            string << "External RF supply is disabled";
            value = IPsu::DISABLED;
            returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
        }
        else
        {
            returnState = ReturnType::RT_ERROR;
            string << "Unable to determine the state of the external RF power supply";
        }
    }
    else
    {
        returnState = ReturnType::RT_ERROR;
        string << "Unable to obtain the external RF power supply interface";
    }

    returnList->find("value")->set(value);
    checkState(returnState, string.str(), returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void PsuTestHelper::getExtRfSupplyVoltage( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * FLOAT value
	//

	// Insert your code here : %%-->

    ReturnType::State returnState;
    std::stringstream string;

    // Used to disable the function
    bool feature_disabled = true;
    if (feature_disabled)
    {
        returnState = ReturnType::RT_NOT_SUPPORTED;
        string << "This feature is currently not supported";
        checkState(returnState, string.str(), returnList);
        return;
    }

    std::shared_ptr<IPsu> Psu = getPsuInterface(callList, returnList);

    if (Psu.get())
    {
        double voltage = Psu->getVoltage();
        voltage = round(voltage * 10)/10;

        if ((voltage >= 18.9) && (voltage <= 32.1))
        {
            returnList->find("value")->set((float)voltage);
            returnState = ReturnType::RT_OK;
            string << "Voltage reading successful";
            returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
        }
        else
        {
            returnState = ReturnType::RT_ERROR;
            string << "Unable to read the voltage of the external RF power supply";
        }
    }
    else
    {
        returnState = ReturnType::RT_ERROR;
        string << "Unable to obtain the external RF power supply interface";
    }

    checkState(returnState, string.str(), returnList);
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void PsuTestHelper::setExtRfSupplyVoltage( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * FLOAT value
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

    ReturnType::State returnState;
    std::stringstream string;

    // Used to disable the function
    bool feature_disabled = true;
    if (feature_disabled)
    {
        returnState = ReturnType::RT_NOT_SUPPORTED;
        string << "This feature is currently not supported";
        checkState(returnState, string.str(), returnList);
        return;
    }

    std::shared_ptr<IPsu> Psu = getPsuInterface(callList, returnList);

    if (Psu.get())
    {
        double voltage = ((callList->find("value")->toDouble()));
        voltage = round(voltage * 10)/10;

        if ((voltage >= 18.9) && (voltage <= 32.1))
        {
            returnState = Psu->setVoltage(voltage);
            double currentVoltage = Psu->getVoltage();

            if ((returnState == ReturnType::RT_OK) && (abs(currentVoltage - voltage) <= 0.1))
            {
                string << "Voltage change successful";
                returnList->find(RtiKeyword::INFO_VAR)->set(string.str());
            }
            else
            {
                returnState = ReturnType::RT_ERROR;
                string << "Voltage change failed";
            }
        }
        else
        {
            returnState = ReturnType::RT_OUT_OF_RANGE;
            string << "Voltage out of range [18.9, 32.1]";
        }
    }
    else
    {
        returnState = ReturnType::RT_ERROR;
        string << "Unable to obtain the external RF power supply interface";
    }

    checkState(returnState, string.str(), returnList);
	// <--%%
}










// Add any statics, private methods etc here %%-->

std::shared_ptr<IPsu> PsuTestHelper::getPsuInterface(DataVariantList *callList, DataVariantList *returnList) const
{
    std::shared_ptr<IPsu> Psu = IPsu::getInterface();

    return Psu;
}

bool PsuTestHelper::checkState(ReturnType::State ret, const std::string& param, DataVariantList *returnList) const
{
    if (ret != ReturnType::RT_OK)
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );

        std::stringstream ss ;
        ss << param << " : ERROR" << ReturnType::getState(ret) ;
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;

        return false ;
    }

    return true ;
}

// <--%%
