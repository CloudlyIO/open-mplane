/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      IpTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "IpTestHelper.h"

// Add any specific includes here %%-->
#include "IBootEnv.h"
#include <string>
#include <sstream>
#include <vector>

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<IpTestHelper> IpTestHelper::getInstance()
{
	static std::shared_ptr<IpTestHelper> instance(std::make_shared<IpTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
IpTestHelper::IpTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
IpTestHelper::~IpTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::deleteStaticIp( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );

    // Clear all the static ip entries
    if ( !bootEnv->setVar("ipaddr", "") || !bootEnv->setVar("fibreipaddr", "") ||
         !bootEnv->setVar("gatewayip", "") || !bootEnv->setVar("netmask", ""))
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to delete one or more static ip information ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::getFibreIpAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("fibreipaddr");
    returnList->find("result")->set( string.str() );
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::getGatewayAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("gatewayip");
    returnList->find("result")->set( string.str() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::getIpAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("ipaddr");
    returnList->find("result")->set( string.str() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::getNetMask( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * STRING result
	//

	// Insert your code here : %%-->
    std::stringstream string;
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
    string << bootEnv->getVar("netmask");
    returnList->find("result")->set( string.str() );

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::setDhcpOnly( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );

    // Clear all the static ip entries
    if ( !bootEnv->setVar("ipaddr", "") || !bootEnv->setVar("fibreipaddr", "") ||
         !bootEnv->setVar("gatewayip", "") || !bootEnv->setVar("netmask", ""))
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to delete one or more static ip information ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::setFibreIpAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING address
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::string addr(callList->find("address")->toString());
    if ( isIpAddress( addr ) )
    {
        std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
        if ( !bootEnv->setVar("fibreipaddr", addr) )
        {
            // set an error
            returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
            std::stringstream ss;
            ss << "Unable to write fibre ip address ";
            returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
        }
    }
    else
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to set fibre ip address as invalid address input ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::setGatewayAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING address
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::string addr(callList->find("address")->toString());
    if ( isIpAddress( addr ) )
    {
        std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
        if ( !bootEnv->setVar("gatewayip", addr) )
        {
            // set an error
            returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
            std::stringstream ss;
            ss << "Unable to write gateway address ";
            returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
        }
    }
    else
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to set gateway address as invalid address input ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::setIpAddress( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING address
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::string addr(callList->find("address")->toString());
    if ( isIpAddress( addr ) )
    {
        std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
        if ( !bootEnv->setVar("ipaddr", addr) )
        {
            // set an error
            returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
            std::stringstream ss;
            ss << "Unable to write ip address ";
            returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
        }
    }
    else
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to set ip address as invalid address input ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpTestHelper::setNetMask( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING address
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
    std::string addr(callList->find("address")->toString());
    if ( isIpAddress( addr ) )
    {
        std::shared_ptr<IBootEnv> bootEnv( IBootEnv::getInstance() );
        if ( !bootEnv->setVar("netmask", addr) )
        {
            // set an error
            returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
            std::stringstream ss;
            ss << "Unable to write subnet address ";
            returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
        }
    }
    else
    {
        // set an error
        returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
        std::stringstream ss;
        ss << "Unable to set netmask as invalid address input ";
        returnList->find(RtiKeyword::MESSAGE_VAR)->set(ss.str()) ;
    }

	// <--%%
}










// Add any statics, private methods etc here %%-->

std::vector<std::string> &IpTestHelper::split(const std::string &s, char delim, std::vector<std::string> &elems) const
{
    std::stringstream ss(s);
    std::string item;
    while(getline(ss, item, delim))
    {
       elems.push_back(item);
    }
    return elems;
}

std::vector<std::string> IpTestHelper::split(const std::string &s, char delim) const
{
   std::vector<std::string> elems;
   return split(s, delim, elems);
}

bool IpTestHelper::isIpAddress(std::string  ipaddr)
{
    if (ipaddr.length())
    {
        std::vector<std::string> ip=split(ipaddr,'.');
        if (ip.size()==4)
        {
            for (int i=0; i < 4; i++)
            {
                for (unsigned int j=0; j < ip[i].length(); j++)
                {
                    if (!isdigit(ip[i][j]))
                    {
                        return false;
                    }
                    if ((atoi(ip[i].c_str()) < 0) || (atoi(ip[i].c_str()) > 255))
                    {
                        return false;
                    }
                    if ( ( ip[i].length() > 1 ) && ( j == 0 ) && ( ip[i][j] == '0' ) )
                    {
                        return false;
                    }
                }
            }
            return true;
        }
    }
    return false;
 }


// <--%%
