/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      FpgaTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "FpgaTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "IFpgaMgr.h"
//#include "IFpgaMonitor.h"

#include "IRadio.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<FpgaTestHelper> FpgaTestHelper::getInstance()
{
	static std::shared_ptr<FpgaTestHelper> instance(std::make_shared<FpgaTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
FpgaTestHelper::FpgaTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
FpgaTestHelper::~FpgaTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void FpgaTestHelper::modify( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..1048575} Offset
	// * UINT{0..65535} WriteValue
	// * UINT{0..65535} Mask
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	auto fpga(IFpgaMgr::getIFpgaSystemRegs());

	unsigned offset = static_cast<unsigned>( callList->find("Offset")->toInt()) ;
	UINT16 value = static_cast<UINT16>( callList->find("WriteValue")->toInt()) ;
	UINT16 mask = static_cast<UINT16>( callList->find("Mask")->toInt()) ;
	fpga->kernel()->modify(offset, value, mask) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void FpgaTestHelper::read( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..1048575} Offset
	// * [UINT{1..} Count]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	// * HEXINT[] Hex
	//

	// Insert your code here : %%-->
	auto fpga(IFpgaMgr::getIFpgaSystemRegs());

	unsigned offset = static_cast<unsigned>( callList->find("Offset")->toInt()) ;
	unsigned count = 1 ;
	DataVariant* countDv( callList->find("Count") ) ;
	if (countDv->isSet())
		count = static_cast<unsigned>( countDv->toInt() ) ;

	for (unsigned idx=0; idx < count; ++idx)
	{
		UINT16 value ;
		fpga->kernel()->read(offset, &value) ;

	//	returnList->find("Dec")->set(value) ;

		std::stringstream ss ;
		ss << "0x" <<
				std::hex << std::uppercase << offset ;
		returnList->find("Hex")->set(idx, value, ss.str()) ;

		offset += 2 ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void FpgaTestHelper::write( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * UINT{0..1048575} Offset
	// * UINT{0..65535} WriteValue
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	auto fpga(IFpgaMgr::getIFpgaSystemRegs());

	unsigned offset = static_cast<unsigned>( callList->find("Offset")->toInt()) ;
	UINT16 value = static_cast<UINT16>( callList->find("WriteValue")->toInt()) ;
	fpga->kernel()->write(offset, value) ;
	// <--%%
}










// Add any statics, private methods etc here %%-->

#if 0
//-------------------------------------------------------------------------------------------------------------
void FpgaTestHelper::monitor( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * BOOL(OFF:ON) enable
	// * UINT{0..1048575} Offset
	// * UINT{1024..65535} port
	// * [UINT{0..65535} mask]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : % % -->
	unsigned port( static_cast<unsigned>(callList->find("port")->toInt()) ) ;
	if ( (port < 1024) || (port > 65535) )
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Port number must be between 1024..65535") ;
		return ;
	}

	// Error if port is not open yet
	if (!msgParser.tcpIsPortOpen(port))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("TCP port has not been opened yet (use tcp command)") ;
		return ;
	}

	unsigned address( static_cast<unsigned>(callList->find("offset")->toInt()) ) ;
	UINT16 mask( 0xFFFF ) ;
	if ( callList->find("mask")->isSet() )
		mask = static_cast<UINT16>(callList->find("mask")->toInt()) ;

	std::shared_ptr<IFpgaMonitor> monitor(IFpgaMonitor::getInstance()) ;

	if (callList->find("enable")->toBool())
		monitor->addRegister(
			address,
			mask,
			[&msgParser,port](unsigned address, UINT16 newValue, UINT16 oldValue, UINT16 mask){
				char buff[256] ;
				snprintf(buff, sizeof(buff), "0x%05x: 0x%04x -> 0x%04x (Mask 0x%04x)", address, oldValue, newValue, mask) ;
				msgParser.tcpPortSend(port, std::string(buff)) ;
			},
			[port](std::ostream& os){
				os << port ;
			}) ;
	else
		monitor->delRegister(address, mask) ;


	// <-- % %
}


//-------------------------------------------------------------------------------------------------------------
void FpgaTestHelper::monitorShow( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : % % -->
	std::shared_ptr<IFpgaMonitor> monitor(IFpgaMonitor::getInstance()) ;

	std::stringstream ss ;
	ss << std::endl ;
	monitor->show(ss, "Port") ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <-- % %
}

#endif

// <--%%
