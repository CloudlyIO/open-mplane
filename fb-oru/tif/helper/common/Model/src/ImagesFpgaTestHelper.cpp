/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      ImagesFpgaTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "ImagesFpgaTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include <memory>
#include "IImageManagement.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<ImagesFpgaTestHelper> ImagesFpgaTestHelper::getInstance()
{
	static std::shared_ptr<ImagesFpgaTestHelper> instance(std::make_shared<ImagesFpgaTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
ImagesFpgaTestHelper::ImagesFpgaTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
ImagesFpgaTestHelper::~ImagesFpgaTestHelper()
{
	// Insert your code here : %%-->


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void ImagesFpgaTestHelper::clean( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IImageManagement> imageMgr( IImageManagement::getInstance() ) ;

	std::string failReason ;
	if ( !imageMgr->cleanImages(IImageTypes::IMAGE_FPGA, failReason) )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void ImagesFpgaTestHelper::installFile( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING filename
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::string filename(callList->find("filename")->toString()) ;

	// Download
	std::shared_ptr<IImageManagement> imageMgr( IImageManagement::getInstance() ) ;

	std::string failReason ;
	if (!imageMgr->getAndInstall(IImageTypes::IMAGE_FPGA, filename,
			IFileStatus::simpleOutput([&msgParser](const std::string& status){ msgParser.sendOutput(status); }),
			failReason))
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void ImagesFpgaTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IImageManagement> imageMgr( IImageManagement::getInstance() ) ;

	std::stringstream ss ;
	ss << std::endl ;
	imageMgr->show(IImageTypes::IMAGE_FPGA, ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}










// Add any statics, private methods etc here %%-->


// <--%%
