/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      SystemTcpTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "SystemTcpTestHelper.h"

// Add any specific includes here %%-->
#include <sstream>
#include "ITcpPortIoTypes.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->
using namespace std;


// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<SystemTcpTestHelper> SystemTcpTestHelper::getInstance()
{
	static std::shared_ptr<SystemTcpTestHelper> instance(std::make_shared<SystemTcpTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
SystemTcpTestHelper::SystemTcpTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
SystemTcpTestHelper::~SystemTcpTestHelper()
{
	// Insert your code here : %%-->


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTcpTestHelper::close( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	unsigned port( static_cast<unsigned>(callList->find("port")->toInt()) ) ;

	std::string failReason ;
	if (!msgParser.tcpPortClose(port, failReason))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTcpTestHelper::open( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT{1024..65353} port
	// * [ENUM(IN:OUT:INOUT) type=OUT]
	// * [INT connections=1]
	// * [BOOL binary=false]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::string typeStr("OUT") ;
	if (callList->find("type")->isSet())
		typeStr = callList->find("type")->toString() ;

	ITcpPortIoTypes::TcpPortType portType(ITcpPortIoTypes::TCP_PORT_OUT) ;
	if (typeStr == "IN")
		portType = ITcpPortIoTypes::TCP_PORT_IN ;
	else if (typeStr == "INOUT")
		portType = ITcpPortIoTypes::TCP_PORT_INOUT ;

	unsigned maxConnections(static_cast<unsigned>(callList->find("connections")->toInt())) ;
	if ( (portType != ITcpPortIoTypes::TCP_PORT_OUT) && (maxConnections > 1) )
	{
		// set an error
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("'IN' or 'INOUT' TCP ports can support at most 1 connection") ;
		return ;
	}


	unsigned port( static_cast<unsigned>(callList->find("port")->toInt()) ) ;
	if ( (port < 1024) || (port > 65535) )
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set("Port number must be between 1024..65535") ;
		return ;
	}

	std::string failReason ;
	if (!msgParser.tcpPortOpen(portType, port, maxConnections, failReason))
	{
		returnList->find(RtiKeyword::STATUS_VAR)->set( RtiKeyword::StatusERROR );
		returnList->find(RtiKeyword::MESSAGE_VAR)->set(failReason) ;
		return ;
	}

	bool binary( callList->find("binary")->toBool()) ;
	if (binary)
	{
		msgParser.tcpPortSetBinary(port, true) ;
	}


	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void SystemTcpTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::stringstream ss ;

	ss << std::endl ;
	msgParser.tcpPortShow(ss) ;
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;


	// <--%%
}










// Add any statics, private methods etc here %%-->


// <--%%
