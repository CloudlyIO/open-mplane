/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      IpListTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "IpListTestHelper.h"

// Add any specific includes here %%-->
#include <iomanip>
#include <sstream>
#include "IIpPortMgr.h"

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<IpListTestHelper> IpListTestHelper::getInstance()
{
	static std::shared_ptr<IpListTestHelper> instance(std::make_shared<IpListTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
IpListTestHelper::IpListTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->


	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
IpListTestHelper::~IpListTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpListTestHelper::add( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * STRING address
	// * INT{0..65353} port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IIpPortMgrWriter> ipPort(IIpPortMgrWriter::singleton()) ;
	ipPort->addEntry(callList->find("address")->toString(), callList->find("port")->toInt()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpListTestHelper::clear( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IIpPortMgrWriter> ipPort(IIpPortMgrWriter::singleton()) ;
	ipPort->clear() ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpListTestHelper::get( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IIpPortMgrWriter> ipPort(IIpPortMgrWriter::singleton()) ;
	std::vector<std::pair<std::string, unsigned>> list(ipPort->list()) ;

	std::stringstream ss ;
	for (auto pair : list)
	{
		ss << pair.first << "=" << pair.second << " " ;
	}
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpListTestHelper::save( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IIpPortMgrWriter> ipPort(IIpPortMgrWriter::singleton()) ;
	ipPort->save() ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void IpListTestHelper::show( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	std::shared_ptr<IIpPortMgrWriter> ipPort(IIpPortMgrWriter::singleton()) ;
	std::vector<std::pair<std::string, unsigned>> list(ipPort->list()) ;

	unsigned nameSize(15) ;
	for (auto pair : list)
	{
		if (nameSize < pair.first.size())
			nameSize = pair.first.size() ;
	}
	nameSize += 5 ;

	std::stringstream ss ;
	ss << std::endl ;
	for (auto pair : list)
	{
		ss << std::setw(nameSize) << std::setfill('.') << std::left << pair.first << ": " << pair.second << std::endl ;
	}
	returnList->find(RtiKeyword::INFO_VAR)->set(ss.str()) ;

	// <--%%
}










// Add any statics, private methods etc here %%-->


// <--%%
