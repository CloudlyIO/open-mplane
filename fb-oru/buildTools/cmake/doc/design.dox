/**
\mainpage CMake Build Document
<CENTER>
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section cmake_scope Scope
<hr>

This document describes the cmake build environment.

Note that the git repositories <b>must</b> be installed into the path: <b>/data/git/rse</b>. This allows us to standardise the scripts, Eclipse
settings etc. across all development machines.

<hr>
\section cmake_sec_1 Overview
<hr>

The previous build system was based on autotools and suffered a variety of problems, foremost of which was getting the
scripts to produce the required link line (e.g. to resolve depedencies, static link etc). In order to work around all
these (and more) issues a Perl script was created which pre-processed Makefile templates to create the automake Makefile.
Over time, the script ended up doing more work (and the templates got more complicated) as we tried to handle the increasing
list of things we need to do to build multiple products.

Replacing this with a cmake based system has greatly simplified the build and actually made it more flexible

@image html cmake-flow.png

The diagram above shows the complete flow of which programs are run and their inputs and outputs.

The in-house utility 'repo-cmakelists.pl' can be run to create the initial CMakeLists.txt files (or they can be
created by hand). Subsequent runs of the repo-cmakelists.pl script should then only modify CMakeLists.txt files if
more source files are added.

Running cmake in a build directory causes a Makefile to be created in that build directory, then the normal make run
to build the required targets.

Full details of the cmake suite can be found at:

\li http://www.cmake.org/
\li http://www.cmake.org/cmake/help/v3.0/


<hr>
\section cmake_sec_2 Repository Project Structure
<hr>

Rather than  use the repository directories as projects, we now treat the sub-directories as sub-projects. These
sub-projects have their own build directories and are collected together as needed to form the complete project for a
particular project.

For example, the hardware repository has a 'common' sub-project used by all products, an 'ETNA' sub-project used by
all products based on ETNA board, an ETNA_FTU sub-project used specifically on ETNA-based FTU product, and an ETNA_RRH
sub-project for ETNA-based RRH products.

In Eclipse, these sub-projects are collected together in 'working sets' and 'team sets'.

As stated above, each sub-project contains a 'build' directory for all builds. In this build directory, a sub-directory
is created for every build product (i.e. combination of processor, board, customer, and application).

@image html cmake-build.png

The diagram above shows a build directory under the 'common' repository where the ART product is being built both for
ppc and x86_64. These build sub-directories contain all the build files specific for that target.


<hr>
\section cmake_sec_3 Special Directories
<hr>

Requiring us to adhere to a directory structure standard means scripts can be used to analyse the directories and
allows our cmake functions to operate correctly.

The expected directories are listed below.

\subsection cmake_sec_3_1 inc

Any directory named 'inc' is expected to contain header files (with file extension .h or .hpp). A list of all 'inc'
directories is created to build the compiler include path. The 'inc' directory can be up to 3 dub-directory levels
below the repository directory.

\subsection cmake_sec_3_2 src

Any directory named 'src' is assumed to contain source C++ files (with file extension .cpp) that need to be placed into
a repository library.

The 'src' directory can be up to 3 sub-directory levels below the repository directory. Also, source files can be either
directly inside the 'src' directory or in a sub-directory under 'src'

\subsection cmake_sec_3_3 test

Any directory named 'test' is assumed to contain
CPPUNIT test files which will be compiled into an executable test program in a corresponding path in the build
directory.

\subsection cmake_sec_3_4 gtest

Any directory named 'gtest' is assumed to contain
Google Test test files which will be compiled into an executable test program in a corresponding path in the build
directory.

\subsection cmake_sec_3_5 test-lib-{name}

Any directory starting 'test-lib-' is expected to contain source files that need to be compiled and added to the test
library repo<i>name</i>Test. For example, source files under 'test-lib-vhi' in the repository 'hardware' will be
compiled into library 'hardwareVhiTest'

\subsection cmake_sec_3_6 v{name}i

Any directory matching 'v*i' is expected to contain virtual interface header files. That is, every file must contain only abstract virtual
classes. No concrete entites can be defined in these directories.

The cmake build system automatically searches out for header files in these directories and will amend the include path accordingly. Nothing
needs to be manually specified.



<hr>
\section cmake_sec_4 repo-cmakelists.pl
<hr>

To help with initial creation of CMakeLists.txt file(s), I created a simple Perl utility which which scans a repository
and creates a CMakeLists.txt file wherever there are source directories. I then expanded the utility so that it can
now update existing files with new source/test files when the directory content changes.

Note: This utility is meant to assist the hand-editing of CMakeLists.txt files and is <b>not</b> meant to be totally
automatic. You must check and amend the file after first creation or update.

To run the utility on a repository run:

@code
$ /data/git/rse/buildTools/cmake/utils/repo-cmakelists.pl <path to repository>
@endcode

If you want to run the script in a more targetted fashion, only updating a sub-project then use the '-dir' option. For example
to run on the 'common' sub-project of 'hardware' run:

@code
$ /data/git/rse/buildTools/cmake/utils/repo-cmakelists.pl /data/git/rse/hardware -dir common
@endcode

To foxus in even more onto a particular sub-directory of a sub-project use the '-path' option. For example, to update the
'adc' in 'common' sub-project of 'hardware' run:

@code
$ /data/git/rse/buildTools/cmake/utils/repo-cmakelists.pl /data/git/rse/hardware -path common/adc
@endcode

When the utility runs it lists all of the sub-projects processed and whether the cmake file is new, modified, or unchanged.
If it is modified by the script then the original is saved as CMakeLists.txt.bak. It is also useful to compare with the
checked in version.

Note that the Eclipse cmake target 'cmakefiles' runs the utility on all repositories and displays the status in the console
window.

<hr>
\section cmake_sec_5 cmake run
<hr>

CMake is run in the build directory and given the path to the sub-project's top-level CMakeLists.txt file. Also, in our case
we are using the cross-compile option even for local builds (since we're using a locally compiled GCC 4.8.1). In order to
do this we tell CMake that we're using a toolchain by specifying the toolchain file.

For example, building in the x86_64-ETNA-AXIS-FTU sub-directory under build we would run:

@code
$ cmake -DCMAKE_TOOLCHAIN_FILE=/data/git/rse/buildTools/cmake/Toolchain/x86_64.cmake ../..
@endcode

@image html cmake-dirs.png

All of the directories under buildTools/cmake are related to the new cmake build system. However, the directories shown
in the diagram above are specifically used by CMake.

\section cmake_sec_5_1 inc

Template files used in the CMake functions. The templates consist of such things as config.h configure file, the tarball
package manifest file and various other template files used during the build.

\section cmake_sec_5_2 Modules

During the cmake stage, various macros and functions are used to simplify the per-project CMakeLists.txt files. These functions
are stored in cmake module files in this directory. Each module has the '.cmake' extension and is used in the CMakeLists.txt
file by 'include()'. For example:

@code
include(rse)
@endcode

Loads the rse.cmake module file.

\section cmake_sec_5_3 Toolchains

As mentioned above, we use these toolchain files to tell cmake that we are cross-compiling. These files contain the usual
CMake script code, but mainly they need to specify a variety of cmake variables that cmake then uses to configure the build.

For our build system they also need to define the variable ${TARGET} that is then used inside our scripts/functions.


<hr>
\section cmake_sec_6 Test Mocks and Interfaces
<hr>

In the past we had test mocks in a VRH library which depended on 'hardware/common' library. Sadly, a lot of
hardware/common tests used the VRH library, which lead to all sorts of cyclic dependency problems and never
knowing whether you ahd an executable that was using a VRH test mock or a local test mock.

When I ported to cmake, in order to use packages, it wasn't possible to run cmake with these cyclic dependencies so I needed
to break the cycle.

What I did was make the VRH test mocks true, self-contained mocks of each interface. So, for any tests that just need a
simple implementation of an interface and don't care about the behaviour, using these mocks is ideal.

Then, for those tests that rely on the old behaviour (where the "mock" is actually an implementation of the common
class defined in hardware/common) I've added the new idea of storing shared test classes in a 'test-common' directory.

Here, the source and headers are, as usual, stored in 'src' and 'inc' directories respectively. However, instead of
compiling into a library, the source files are manually added to a test executable link list of source files. Various
CMake functions assist with this process as shown in the snippet of a CMakeLists.txt file shown below (for full details see
@ref cmake_sec_7_2):

@code
	addTestCommon(TEST_COMMON hardware)

	set(gtest_src
		gtest/CarrierFunctional_unittest.cpp
		gtest/CommonCarrierServer_fixture.cpp
		gtest/CommonCarrierServer_unittest.cpp
		gtest/CommonCarrierTests.cpp

		# Test mocks
	    ${TEST_COMMON}/TestCommonFpga.cpp
		${TEST_COMMON}/TestTxFreqConstFactory.cpp
	)
@endcode

The new self-contained test mocks are stored in the vhi sub-directory of hardware, in the test-lib-vhi subdirectory.
The CMakeLists.txt file for test-lib-vhi creates the library 'hardwareVhiTest' and can be linked to by using
some RSE CMake functions as shown below:

@code
	# use VHI test mocks
	addRepoLib(libs hardware vhi test)
	...
	addGtest(carrier_GTEST "${libs}" ${gtest_src})

@endcode


<hr>
\section cmake_sec_7 CMake for Library
<hr>

\section cmake_sec_7_1 Library top-level file

The top-level CMake file of a library generally sets the project name, loads a list of sub-directories then lets the
common library tasks do the rest. An example file is:

@code
##======================================================================================================================
## Cmake file for hardware/ETNA lib
##
##======================================================================================================================

##----------------------------------------------------------------------------------------------------------------------
cmake_minimum_required (VERSION 3.0.1 FATAL_ERROR)
project (hardwareETNA CXX)
set (version "0.1")

##----------------------------------------------------------------------------------------------------------------------
if (NOT GITDIR)

	get_filename_component (GITDIR ${PROJECT_SOURCE_DIR} DIRECTORY)
	list(APPEND CMAKE_MODULE_PATH ${GITDIR}/buildTools/cmake/Modules)

endif ()

##----------------------------------------------------------------------------------------------------------------------
## Get shared include
include(rse)

##----------------------------------------------------------------------------------------------------------------------
## Add all the includes directories under this directory
addIncludes ()

##----------------------------------------------------------------------------------------------------------------------
# Uses VHI & VSI interfaces
include_directories(${VHI_PATH}/inc)
include_directories(${VSI_PATH}/inc)

##----------------------------------------------------------------------------------------------------------------------
# Use of the repository libs
useRepoLib (common)
useRepoLib (hardware common)

##----------------------------------------------------------------------------------------------------------------------
## Library Source
add_subdirectory (delay)
add_subdirectory (waveform)
add_subdirectory (carrier)
add_subdirectory (radio)

##----------------------------------------------------------------------------------------------------------------------
## Perform all of the common tasks required to create the library package
include(libraryCommonTasks)

@endcode

The first section sets the project name and specifies the minmum allowed version of cmake. The next section sets the
GITDIR if not already specified (GITDIR should always have been specified by this point, but I left this in for debugging).

Next we include the rse.cmake module which sets up some commonly used variables for the build and then includes the
rse_functions.cmake module which defines all of the RSE macros and functions.

The 'addIncludes()' RSE macro finds any directories named 'inc' in the current sub-project and adds them to the C++ include
list.

Next we also add the include directories for the VHI and VSI header files. This ensures that we can compile the library
source.

The 'useRepoLib' RSE function finds the specified repository project/sub-project and loads in it's list of include
directories. DUring compilation we use the cmake feature of being able to package up a project's build area making it's
object files, headers etc. available without actually installing them. This function uses the first parameter as the
repository and the optional second parameter specifies a sub-project. Using these names, and knowing the current build
settings, the function goes off and finds the build area for that sub-project and loads it's package information.

Basically all this means is that, if your source requires some header files defined in another sub-project then you need
to add a 'useRepoLib' to load it.

Next comes the use of standard cmake function 'add_subdirectory' for each subdirectory in the sub-project. Each of these
sub-directories will need their own CMakeLists.txt file (see below).

The last thing we do is pass control to the RSE module libraryCommonTasks.cmake which performs a set of common operations
like setting up testing, coverage, memory leak checks etc., as well as packaging the library for use by others.


\section cmake_sec_7_2 Library low-level file

Each of the sub-directories added via 'add_subdirectory' need their own CMakeLists.txt file. An example of this is:

@code
# Cmake file for common/carrier

add_sources (SOURCES
	src/CommonCarrier.cpp
	src/CommonCarrierFail.cpp
	src/CommonCarrierHardware.cpp
	src/CommonCarrierModel.cpp
	src/CommonCarrierModelListWorker.cpp
	src/CommonCarrierModelWorker.cpp
	src/CommonCarrierServer.cpp
)

## Cppcheck
include (cppcheck)
addCppcheck(carrier)

if (${TARGET} STREQUAL "x86_64")

	set (libs "")
	addRepoLib (libs common)

	# use VHI test mocks
	addRepoLib(libs hardware vhi test)

	# Load google test
	include (gtest)

	addTestCommon(TEST_COMMON hardware)

	include_directories(gtest)
	set(gtest_src
		gtest/CarrierFunctional_unittest.cpp
		gtest/CommonCarrierServer_fixture.cpp
		gtest/CommonCarrierServer_unittest.cpp
		gtest/CommonCarrierTests.cpp

		# Test mocks
	    ${TEST_COMMON}/TestCommonFpga.cpp
		${TEST_COMMON}/TestTxFreqConstFactory.cpp
	)
	addGtest(carrier_GTEST "${libs}" ${gtest_src})

	# Load cppunit
	include (cppunit)

	include_directories(test)
	set(test_src
		test/CarrierTests.cpp
		test/CommonCarrierFailTestCase.cpp
		test/CommonCarrierHardwareListTestCase.cpp
		test/CommonCarrierHardwareTestCase.cpp
		test/CommonCarrierModelTestCase.cpp
		test/CommonCarrierServerTestCase.cpp
		test/CommonCarrierTestCase.cpp

		# Test Mocks
		${TEST_COMMON}/TestTxFreqConstFactory.cpp
	    ${TEST_COMMON}/TestCommonFpga.cpp
	    ${TEST_COMMON}/TestCommonSpi.cpp
	    ${TEST_COMMON}/TestCommonSpiFactory.cpp
	    ${TEST_COMMON}/TestCommonDevices.cpp
	    ${TEST_COMMON}/TestCommonRadio.cpp
	    ${TEST_COMMON}/TestCommonRadioInfoSingleton.cpp
	    ${TEST_COMMON}/TestCommonRadioFactories.cpp
	    ${TEST_COMMON}/TestCommonRxPortSingleton.cpp
	    ${TEST_COMMON}/TestCommonSRxPortSingleton.cpp
	    ${TEST_COMMON}/TestCommonTxPortSingleton.cpp

	)
	addCppunitTest(carrier_TEST "${libs}" ${test_src})


	# Add code coverage
	include (coverage)
	addCoverage(carrier_GTEST)
	addCoverage(carrier_TEST)

	# Add memory leak check
	include (valgrind)
	addMemcheck(carrier_GTEST)
	addMemcheck(carrier_TEST)


endif (${TARGET} STREQUAL "x86_64")

@endcode

Note that this file will always be run in the scope of the top-level file so we already have access to the rse.cmake module
and it's included functions.

The main purpose of this file is to define the list of source files, which is done via the RSE macro 'add_sources' adding
to the ${SOURCES} variable (stored in the parent file's scope). Cppcheck checks are also defined for all targets
via the RSE function 'addCppcheck' (located in the cppcheck.cmake module).

However, if the build is for x86_64 then additional operations are performed to build and run test executables, hence the
code contained within the IF()..ENDIF() that checks for x86_64 processor.

The contents of this area are split into 3 sections: defining Google tests, defining CPPUNIT tests, and then adding those
test executables to coverage and memory leak checks.

The last section, addng for coverage and memory leaks, is fairly self-explanatory: you first load the cmake module containing
the required functions, then call the function on each executable. The above example shows 2 executables being added via
'addCoverage' and 'addMemcheck'.

Defining the build for test executables is a bit more involved but is very similar for Google test and for CPPUNIT, so
I'll just explain one.

The first section shown adds the source for creating a Google test. First, the ${libs} variable is cleared ready to have
each used library added to it's list. The RSE function 'addRepoLib' is used to specify a repository, an optional sub-project,
and an optional 'test' keyword. The library corresponding to these names is searched for and the actual library name
is appended to ${libs}. Examples of the libraries found with various specifications are shown below:

<CENTER>
<TABLE BORDER=1 CELLSPACING=0>
<TR><TH>Call</TH><TH>Library name</TH></TR>

<TR>
	<TD>addRepoLib(libs common)</TD>
	<TD>common</TD>
</TR>

<TR>
	<TD>addRepoLib(libs hardware ETNA)</TD>
	<TD>hardwareETNA</TD>
</TR>

<TR>
	<TD>addRepoLib(libs hardware vhi test)</TD>
	<TD>hardwareVhiTest</TD>
</TR>

</TABLE>
</CENTER>

Using the 'addRepoLib' function means that you don't need to know the actual library name (which may be changed in the future)

Each 'addRepoLib' call also adds all of that library's include directories for this link. The final value of ${libs} will
contain a list of the library names to link against and is used in the 'addGtest' and 'addCppunit' functions.

The command 'include(gtest)' includes the gtest.cmake module to provide the gtest-specific functions. The command
'include_directories(gtest)' looks similar but actually refers to the gtest sub-directory and adds it as a search path
for header files (it just looks confusing because the 'gtest' name refers to different things).

The lines starting 'set(gtest_src ...' create a list of all of the source files that make up the google test executable.
This list is then linked by calling the RSE function 'addGtest' which creates an executable 'carrier_GTEST' linking the
source files (defined in ${gtest_src}) with the libraries (defined in ${libs}).

The RSE function 'addTestCommon' creates a variable ${TEST_COMMON} that contains the path to the 'test-common' source
directory in repository 'hardware'. This variable is then used to add test objects to the list of source files.

Following the call to 'addGtest' is a similar section defining a CPPUNIT test executable, finishing with the call to
'addCppunitTest'.


<hr>
\section cmake_sec_8 CMake for Application
<hr>

All of the repositories create libraries (sed by each other), all repositories except 'applications'. The applications
repository defines the final executables for each product. The repository also contains the build area for the tarball
packages that are delivered to customers.

\section cmake_sec_8_1 Application top-level file

The following is an example application top-level CMakeLists.txt file. I'll just describe the differences between this and
a library top-level file.

@code
##======================================================================================================================
## Cmake file for applications/AXIS-FTU
##
##======================================================================================================================

##----------------------------------------------------------------------------------------------------------------------
cmake_minimum_required (VERSION 3.0.1 FATAL_ERROR)
project (applicationsAxisFtu CXX)
set (version "0.1")

##----------------------------------------------------------------------------------------------------------------------
if (NOT GITDIR)

	get_filename_component (GITDIR ${PROJECT_SOURCE_DIR} DIRECTORY)
	list(APPEND CMAKE_MODULE_PATH ${GITDIR}/buildTools/cmake/Modules)

endif ()

##----------------------------------------------------------------------------------------------------------------------
## Get shared include
include(rse)
include(installSettings)

##----------------------------------------------------------------------------------------------------------------------
## Add all the includes directories under this directory
addIncludes ()

##----------------------------------------------------------------------------------------------------------------------
# Uses VHI & VSI interfaces
include_directories(${VHI_PATH}/inc)
include_directories(${VSI_PATH}/inc)


##----------------------------------------------------------------------------------------------------------------------
# Use of the repository libs
useRepoLib (common)
useRepoLib (tif common)

##----------------------------------------------------------------------------------------------------------------------
## Dummy target to allow 'make lib' to run
add_custom_target(lib)

##======================================================================================================================
## Executables

## one of these should set the variable $STARTUP_APP to the start application
set (STARTUP_APP "NOT SET")
add_subdirectory (AxisFTUProcess)
add_subdirectory (FtuGetIPAddr)


##======================================================================================================================
## INSTALL
include (installCommonTasks)

@endcode

The first difference is that applications 'include' the cmake module 'installSettings.cmake'. All this does is set up
various global variables used for building and installing the application (things like ${APP_ROOTFS} which is the path
to the root filesystem for the application tarball).

When this file includes subdirectories, it expects one of those subdirectories to set ${STARTUP_APP} to the name of the
executable that will be run on power up.

Finally control is passed over to the RSE cmake module 'installCommonTasks.cmake' which sets things up for creating the
file systems, creating tarballs etc.


\section cmake_sec_8_2 Application low-level file

@code
##======================================================================================================================
## Cmake file for applications/AXIS-FTU/AxisFTUProcess
##
##======================================================================================================================

set (app AxisFTUProcess)
initialCapital(board ${BUILD_BOARD})
set (boardApp ${board}${app})

set (SOURCES
    bin-src/${app}.cpp
)

## Uses pcap
addRosLib(libs pcap)

## Libraries used
addRepoLib( libs  common )
addRepoLib( libs  hardware common )
addRepoLib( libs  hardware ${BUILD_BOARD} )
addRepoLib( libs  hardware ${BUILD_BOARD}_${BUILD_APPLICATION} )
addRepoLib( libs  services common )
addRepoLib( libs  services ${BUILD_APPLICATION} )
addRepoLib( libs  tif common )
addRepoLib( libs  tif ${BUILD_BOARD} )
addRepoLib( libs  tif ${BUILD_BOARD}_${BUILD_APPLICATION} )
addRepoLib( libs  tif ${BUILD_BOARD}-${BUILD_CUSTOMER}-${BUILD_APPLICATION} )

## Executable
add_executable(${boardApp} ${SOURCES})
addLinkLibs(${boardApp} ${libs})
set (STARTUP_APP ${boardApp} PARENT_SCOPE)

install(TARGETS ${boardApp} RUNTIME DESTINATION ${APP_ROOTFS}/bin)

@endcode

In a similar fashion to library sub-directories, this creates an executable from a list of source files. The first few lines
set the ${app} variable to the current sub-directory and set the ${boardApp} to contain the board name as a prefix
(e.g. for ETNA board this will be "EtnaAxisFTUProcess"). The ${boardApp} is the name of the final executable.

Following the list of source files is the use of an RSE function 'addRosLib' which appends the full path the a ROS compiled
library (in this case the pcap lib) to the ${libs} variable used to link the executable.

Next are the list of all of the repository libraries used in the link. Again they are added to ${libs} using the 'addRepoLib'
described in the library section (@ref cmake_sec_7_2).

The 'add_executable' cmake function creates the final executable, and the RSE function 'addLinkLibs' associates all of the
libraries in ${libs} with the executable link.

The ${STARTUP_APP} variable is set in this file because this executable is the main application that should be started
on power up.

Finally, the cmake 'install' function is called to specify where this executable needs to be installed (under the
root filesystem for the application tarball).

<hr>
\section cmake_sec_9 Top-level Make
<hr>

The top-level makefile in buildTools/cmake provides all of the targets used to build and distribute the products. The
functionality of the make is split into several files stored in the make sub-directory and loaded by the top-level
makefile.

The makefile is effectively "dynamic" in that it configures itself based on the build settings.

The top-level makefile contains the list of repositories that will be scanned to create the final makefile.

The diagram below shows the directory structure:

@image html cmake-make.png

\subsection cmake_sec_9_1 buildVars.mk

Processes the environment variables (like TARGET, CUSTOMER etc) into internally used build variables (BUILD_TARGET,
BUILD_CUSTOMER etc). This file also contains the targets which save and read the build variables to/from the hidden
file .build stored in the cmake directory.

Also creates various other variables derived from the build variables.

\subsection cmake_sec_9_2 functions.mk

Contains makefile functions that are used to create the targets.

\subsection cmake_sec_9_3 settings.mk

This is a simple file that sets up some variables based on the level of debug set (via the 'V' environment variable)

\subsection cmake_sec_9_4 targets.mk

This is where the main targets (e.g. 'tests', 'libs' etc) are defined. They use the functions in functions.mk to define
targets for each of the repositories.


\subsection cmake_sec_9_5 tools.mk

Specifies the targets to build the toolchain and local tools (installed in buildTools/sysroot). Building the target
'tools' makes just the tools; 'toolchain' just the toolchain; and 'local-bootstrap' builds both.

Note that the targets will only build once.



<hr>
\section cmake_sec_11 Debugging Make
<hr>

I've minimised the amount of output generated during builds so that it's easier to spot failures and where the failure
occurred. That's great for spotting the fault, but not much use when you're trying to work out why!

Luckily, each build make has the option to enable verbose output. By setting V to 1 or 2 on the top-level make sets the
appropriate verbose flag on the sub-projects. For example:

@code
$ make V=2
@endcode

In a particular build directory, to run make in verbose mode run with VERBOSE=1:

@code
common/build/current-x86_64 $ make VERBOSE=1
@endcode



<hr>
\section cmake_sec_12 Jenkins
<hr>

I've now amended the Jenkins job to use the cmake make. The job now looks like:

@code
# CMake build for Jenkins
#

# Start by setting the target product
cd $WORKSPACE/buildTools/cmake
make GITDIR=$WORKSPACE save-settings BOARD=ETNA CUSTOMER=AXIS APPLICATION=FTU TARGET=x86_64

##----------------------------------------------------------------------------------------------
# Build GCC4.8.1
cd $WORKSPACE/ros
make toolchain BUILD_BOARD=HOST

# Build local tools
cd $WORKSPACE/buildTools/cmake
make GITDIR=$WORKSPACE tools


##----------------------------------------------------------------------------------------------
# Build libs, UTs
cd $WORKSPACE/buildTools/cmake
#make GITDIR=$WORKSPACE full-clean
make GITDIR=$WORKSPACE

# run all checks
make GITDIR=$WORKSPACE run-all-checks

##----------------------------------------------------------------------------------------------
# Run memory leak checks - now run in nightly builds
# cd $WORKSPACE/buildTools/cmake
# make GITDIR=$WORKSPACE memcheck


##----------------------------------------------------------------------------------------------
# Now update the documentation
cd $WORKSPACE/buildTools/doxygen
./builddox.sh

# RTI doc
cd $WORKSPACE/buildTools/cmake
make GITDIR=$WORKSPACE test-doc


##----------------------------------------------------------------------------------------------
# Run gitinspector
if [ ! -d "$WORKSPACE/htmlgit" ]
then
    mkdir $WORKSPACE/htmlgit
fi

cd $WORKSPACE/buildTools
cp html/gitinspector.html $WORKSPACE/htmlgit/index.html

cd $WORKSPACE/buildTools/gitinspector
declare -a repos=(common services appServices hardware tif applications)
for repo in "${repos[@]}"
do
    python gitinspector.py -wTHl $WORKSPACE/$repo -F html > $WORKSPACE/htmlgit/$repo.html
done
@endcode


<hr>
\section cmake_sec_13 Working In A Repository
<hr>

This section describes setting up a repository for use with cmake, and also how to go about running make directly
in that repository. For the purposes of this description I'll assume your reepositories are all stored under ~/git

\subsection cmake_sec_13_1 Setup
<hr>

The first step to converting a repository to use cmake is to run repo-cmakelists.pl in it:

@code
$ /data/git/rse/buildTools/cmake/utils/repo-cmakelists.pl <path to repository>
@endcode

This creates the CMakeLists.txt in source sub-directories. You then need to create a CMakeLists.txt in each sub-project.
The easiest thing here is to just copy an existing example, from hardware for example. So, if you added an ETNA
sub-project to a repository, copy the CMakeLists.txt from hardware/ETNA and then edit it.


\subsection cmake_sec_13_5 Eclipse CMake Build
<hr>

To edit the CMake files it's useful to install the CMakeEd Eclipse plugin from: http://cmakeed.sourceforge.net/

I've added various make targets to Eclipse in the buildTools/cmake make targets, most of which are just the same as the
makefile targets.

The first thing you need to do before using these targets is set the build settings. Use one of the targets 'set x86_64-ETNA-AXIS-FTU'
or 'set ppc-ETNA-AXIS-FTU'. Once set, all subsequent make targets will use those settings.

To show the settings at any time run 'show-settings'.

To get the make help that describes all of the targets run target 'help'

*/
