##======================================================================================================================
## CMake script to install app tar and manifest
##
##======================================================================================================================

message("installApp - START")

# Define variables - passed across from main script
set (GITDIR "@GITDIR@")
set (TARGET "@TARGET@")
set (DEVTOOLS_INSTALLDIR "@DEVTOOLS_INSTALLDIR@")
set (ROOTFS_FILES "@ROOTFS_FILES@")
set (FPGA_MANIFEST "@FPGA_MANIFEST@")
set (APP_SOURCE_DIR "@PROJECT_SOURCE_DIR@")
set (STARTUP_APP "@STARTUP_APP@")

# Passed down to manifest
set (TOOLCHAIN_LINUX_DIR "@TOOLCHAIN_LINUX_DIR@")
set (GCC_DIR "@GCC_DIR@")
set (GLIBC_DIR "@GLIBC_DIR@")

##----------------------------------------------------------------------------------------------------------------------
## Include Modules
list(APPEND CMAKE_MODULE_PATH ${GITDIR}/buildTools/cmake/Modules)
include(settings)

# sets up the variables used below
include(installSettings)

include(rse_functions)
include(install_functions)

##----------------------------------------------------------------------------------------------------------------------
## Error check

if (FPGA_MANIFEST STREQUAL "")
	message(FATAL_ERROR "FPGA manifest not set (is there a valid fpga for this application?)")
endif ()

if (TMP_ROOTFS STREQUAL "")
	message(FATAL_ERROR "Unable to set tmp rootfs")
endif ()
if (APP_ROOTFS STREQUAL "")
	message(FATAL_ERROR "Unable to set app rootfs")
endif ()

if (PACKAGE_DIR STREQUAL "")
	message(FATAL_ERROR "Unable to set app package dir")
endif ()
if (EXTRAS_DIR STREQUAL "")
	message(FATAL_ERROR "Unable to set app extras dir")
endif ()
if (PACKAGE_APP_NAME STREQUAL "")
	message(FATAL_ERROR "Unable to set app name")
endif ()

if (TOOLCHAIN_LINUX_DIR STREQUAL "")
	message(FATAL_ERROR "Linux tolchain directory not set")
endif ()
if (GCC_DIR STREQUAL "")
	message(FATAL_ERROR "GCC directory not set")
endif ()
#if (GLIBC_DIR STREQUAL "")
#	message(FATAL_ERROR "GLIBC directory not set")
#endif ()

message("installApp : BUILD_NUMBER=${BUILD_NUMBER}")

##----------------------------------------------------------------------------------------------------------------------
## Settings

## Set up the package directory
file(MAKE_DIRECTORY ${PACKAGE_DIR})

##----------------------------------------------------------------------------------------------------------------------
## Install

message("installApp: APP_SOURCE_DIR=${APP_SOURCE_DIR}")
message("APP PKG: ${PACKAGE_APP_NAME}")
message("installApp : BUILD_NUMBER=${BUILD_NUMBER}")

message("InstallApp: TMP_ROOTFS=${TMP_ROOTFS}")
message("InstallApp: APP_ROOTFS=${APP_ROOTFS}")
message("InstallApp: FPGA_MANIFEST=${FPGA_MANIFEST}")
message("InstallApp: PACKAGE_DIR=${PACKAGE_DIR}")
message("InstallApp: PACKAGE_APP_NAME=${PACKAGE_APP_NAME}")
message("InstallApp: APP_SOURCE_DIR=${APP_SOURCE_DIR}")
message("InstallApp: STARTUP_APP=${STARTUP_APP}")


# Manifest
readVariablesFile(${FPGA_MANIFEST})
configure_file(
	${GITDIR}/buildTools/cmake/inc/Manifest.in
	${APP_ROOTFS}/manifest
	@ONLY
)

execute_process(COMMAND find ${APP_ROOTFS} OUTPUT_VARIABLE lsout)
message (STATUS "ls of APP_ROOTFS ${APP_ROOTFS}: ${lsout}")
execute_process(COMMAND ls ${GITDIR}/applications/AXIS-RRH/build/petalinux-ZCU111-AXIS-RRH OUTPUT_VARIABLE lsout)
message (STATUS "ls of build: ${lsout}")
execute_process(COMMAND ls ${GITDIR}/applications/AXIS-RRH/build/petalinux-ZCU111-AXIS-RRH/extras OUTPUT_VARIABLE lsout)
message (STATUS "ls of extras: ${lsout}")

## If there are any extras then copy them over
if (EXISTS ${EXTRAS_DIR})

execute_process(COMMAND ls ${EXTRAS_DIR} OUTPUT_VARIABLE extrasContent ERROR_VARIABLE extrasError)
message (STATUS "ls of EXTRAS_DIR ${EXTRAS_DIR}: ${extrasContent}")

if (NOT extrasContent STREQUAL "")

#	execute_process(COMMAND cp -r "${EXTRAS_DIR}/*" "${APP_ROOTFS}/" )

	file (GLOB dirs LIST_DIRECTORIES true RELATIVE ${EXTRAS_DIR} "${EXTRAS_DIR}/*")
	foreach (dir ${dirs})
	
		if (NOT IS_SYMLINK ${EXTRAS_DIR}/${dir})
			execute_process(
			    WORKING_DIRECTORY ${EXTRAS_DIR}
			    COMMAND cp -r ${dir} "${APP_ROOTFS}/"
			)
		endif()
	
	endforeach()

endif ()

endif ()

## Create tar
tarRootfs(${APP_SOURCE_DIR}/rootfs/filelist.txt ${APP_ROOTFS} ${TMP_ROOTFS} ${PACKAGE_DIR}/${PACKAGE_APP_NAME} "${ROOTFS_FILES}")

# md5
execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND md5sum ${PACKAGE_APP_NAME}.tgz
    OUTPUT_FILE ${PACKAGE_APP_NAME}.tgz.md5
)

# md5list
file (REMOVE ${PACKAGE_DIR}/${PACKAGE_APP_NAME}.tgz.md5list)
file (GLOB_RECURSE files RELATIVE ${APP_ROOTFS} "${APP_ROOTFS}/*")
foreach (file ${files})

	if (NOT IS_SYMLINK ${APP_ROOTFS}/${file})
		execute_process(
		    WORKING_DIRECTORY ${APP_ROOTFS}
		    COMMAND md5sum ${file}
		    OUTPUT_VARIABLE out
		)
		file (APPEND ${PACKAGE_DIR}/${PACKAGE_APP_NAME}.tgz.md5list "${out}")
	endif()

endforeach()

message("installApp - END") 

