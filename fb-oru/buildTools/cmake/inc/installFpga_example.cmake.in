##======================================================================================================================
## CMake script to install fpga tar and manifest
##
##======================================================================================================================

message("installFpga - START")

# Define variables - passed across from main script
set (GITDIR "@GITDIR@")
set (TARGET "@TARGET@")
set (DEVTOOLS_INSTALLDIR "@DEVTOOLS_INSTALLDIR@")
set (FPGA_MANIFEST "@FPGA_MANIFEST@")
set (EMBEDDED_PROJECT "@EMBEDDED_PROJECT@")

# Settings for findFpga
set (FPGA_FIND_FILE "@FPGA_FIND_FILE@")

message ("installFpga - TARGET='${TARGET}'")


##----------------------------------------------------------------------------------------------------------------------
## Include Modules
list(APPEND CMAKE_MODULE_PATH ${GITDIR}/buildTools/cmake/Modules)
include(settings)
include(installSettings)
include(rse_functions)

##----------------------------------------------------------------------------------------------------------------------
## Error check

if (FPGA_MANIFEST STREQUAL "")
	message(FATAL_ERROR "FPGA manifest not set (is there a valid fpga for this application?)")
endif ()

if (TMP_ROOTFS STREQUAL "")
	message(FATAL_ERROR "Unable to set tmp rootfs")
endif ()
if (APP_ROOTFS STREQUAL "")
	message(FATAL_ERROR "Unable to set app rootfs")
endif ()


##----------------------------------------------------------------------------------------------------------------------
## Settings
set(BUILD_FPGADIR images/fpga-images)
set(TEMP_DIR ${TMP_ROOTFS}/tmp)
set (XILINX_BIT2BIN perl ${GITDIR}/buildTools/tools/xilinx-bit2bin.pl)

#message ("TEMP_DIR='${TEMP_DIR}'")

##----------------------------------------------------------------------------------------------------------------------
## Install

message("installFpga: EMBEDDED_PROJECT=${EMBEDDED_PROJECT}")

## Need to build embedded if this is a embedded project
if (NOT EMBEDDED_PROJECT STREQUAL "")

	## Run make
	message(STATUS "Building embedded project ${EMBEDDED_PROJECT}")
	execute_process(
	    COMMAND make "--no-print-directory" "clean" "embedded"
	    WORKING_DIRECTORY ${EMBEDDED_PROJECT}
	)

endif ()

## Can now find fpga
findFpga(FPGA_TGZ)

if (FPGA_TGZ STREQUAL "")
	message(FATAL_ERROR "Unable to find FPGA tarball (is there a valid fpga for this application?)")
endif ()
message(STATUS "Using FPGA: ${FPGA_TGZ}")


## Set up a temp area
file(MAKE_DIRECTORY ${TEMP_DIR})

## Get fpga manifest
execute_process(
    COMMAND rm -f ${TEMP_DIR}/manifest
    WORKING_DIRECTORY ${TEMP_DIR}
)
execute_process(
    COMMAND tar xf ${FPGA_TGZ} -O manifest
    OUTPUT_FILE ${TEMP_DIR}/manifest
    WORKING_DIRECTORY ${TEMP_DIR}
)

file (RENAME ${TEMP_DIR}/manifest ${FPGA_MANIFEST})
readVariablesFile( ${FPGA_MANIFEST} )
#message("Enclosure=${Enclosure}")

## Check current app with fpga
#if (NOT ${BUILD_APPLICATION} STREQUAL ${Enclosure})
#    message (FATAL_ERROR "FPGA ${FPGA_TGZ} application '${Enclosure}' does not match build application '${BUILD_APPLICATION}'")
#endif ()
if (NOT ${BUILD_FIBRE_INTERFACE} STREQUAL ${Fibre})
    message (FATAL_ERROR "FPGA ${FPGA_TGZ} fibre interface '${Fibre}' does not match build interface '${BUILD_FIBRE_INTERFACE}'")
endif ()

## Load in the fpga tarball unzipped
get_filename_component(fpgaTgzName ${FPGA_TGZ} NAME)
string (REGEX REPLACE "\\.tgz$" ".tar" fpgaTarName ${fpgaTgzName})
execute_process(
    COMMAND tar xf ${FPGA_TGZ}
    WORKING_DIRECTORY ${TEMP_DIR}
)

# Check that the fpga has been processed to include a .bin file for loading
file (GLOB binFile RELATIVE ${TEMP_DIR} "${TEMP_DIR}/*.bin")
if (NOT binFile)

    message (STATUS "Creating raw FPGA bin file from bit file")

	file (GLOB bitFile RELATIVE ${TEMP_DIR} "${TEMP_DIR}/*.bit")
	string (REPLACE ".bit" ".bin" binFile ${bitFile})
	execute_process(
	    COMMAND ${XILINX_BIT2BIN} -i ${bitFile} -o ${binFile}
	    WORKING_DIRECTORY ${TEMP_DIR}
	)

endif()


# Remove any bit files
file (GLOB bitFile RELATIVE ${TEMP_DIR} "${TEMP_DIR}/*.bit")
if (bitFile)

    message (STATUS "Removing bit file(s): ${bitFile}")

	# remove the bit file to ensure it doesn't end up in the tarball!
	execute_process(
	    COMMAND rm -f ${bitFile}
	    WORKING_DIRECTORY ${TEMP_DIR}
	)

endif()


file(MAKE_DIRECTORY ${APP_ROOTFS}/${BUILD_FPGADIR})
file (GLOB fpgaFiles RELATIVE ${TEMP_DIR} "${TEMP_DIR}/*")
execute_process(
    WORKING_DIRECTORY ${TEMP_DIR}
    COMMAND tar "cf" "${APP_ROOTFS}/${BUILD_FPGADIR}/${fpgaTarName}" ${fpgaFiles}
)
execute_process(
    COMMAND md5sum "${fpgaTarName}" 
    OUTPUT_FILE "${fpgaTarName}.md5"
    WORKING_DIRECTORY ${APP_ROOTFS}/${BUILD_FPGADIR}
)
execute_process(
    COMMAND ln "-sf" "/${BUILD_FPGADIR}/${fpgaTarName}" "current"
    WORKING_DIRECTORY ${APP_ROOTFS}/${BUILD_FPGADIR}
)

## Add the tarball name to the manifest
file (APPEND ${FPGA_MANIFEST} "fpgaPath=/${BUILD_FPGADIR}/${fpgaTarName}\n")

## Clean up
file (REMOVE_RECURSE ${TEMP_DIR})

message("installFpga - END") 

