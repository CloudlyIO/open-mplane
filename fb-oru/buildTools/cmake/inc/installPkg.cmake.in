##======================================================================================================================
## CMake script to install package file
##
##======================================================================================================================

message("installPkg - START")


# Define variables - passed across from main script
set (GITDIR "@GITDIR@")
set (TARGET "@TARGET@")
set (DEVTOOLS_INSTALLDIR "@DEVTOOLS_INSTALLDIR@")
set (OS_PKG_DIR "@OS_PKG_DIR@")
set (OS_PKG_NAME "@OS_PKG_NAME@")
set (PRODUCT_CODE "@PRODUCT_CODE@")
set (VENDOR_CODE "@VENDOR_CODE@")

##----------------------------------------------------------------------------------------------------------------------
## Include Modules
list(APPEND CMAKE_MODULE_PATH ${GITDIR}/buildTools/cmake/Modules)

message("installPkg - include(settings)")
include(settings)

message("installPkg - include(installSettings)")
include(installSettings)

message("installPkg - include(rse_functions)")
include(rse_functions)

message("installPkg - check..")

message("installPkg: OS_PKG_NAME=${OS_PKG_NAME}")
message("installPkg: OS_PKG_DIR=${OS_PKG_DIR}")
message("installPkg: PACKAGE_DIR=${PACKAGE_DIR}")
message("installPkg: PACKAGE_APP_NAME=${PACKAGE_APP_NAME}")
message("installPkg: PACKAGE_LIB_NAME=${PACKAGE_LIB_NAME}")
message("installPkg: PACKAGE_FILE_NAME=${PACKAGE_FILE_NAME}")


##----------------------------------------------------------------------------------------------------------------------
## Error check

if (OS_PKG_NAME STREQUAL "")
	message(FATAL_ERROR "Could not find the OS package")
endif ()

if (PACKAGE_DIR STREQUAL "")
	message(FATAL_ERROR "Unable to set app package dir")
endif ()
if (OS_PKG_DIR STREQUAL "")
	message(FATAL_ERROR "Unable to set OS package dir")
endif ()
if (PACKAGE_APP_NAME STREQUAL "")
	message(FATAL_ERROR "Unable to set app name")
endif ()
if (PACKAGE_LIB_NAME STREQUAL "")
	message(FATAL_ERROR "Unable to set lib name")
endif ()
if (PRODUCT_CODE STREQUAL "")
	message(FATAL_ERROR "Unable to set product code")
endif ()
if (VENDOR_CODE STREQUAL "")
	message(FATAL_ERROR "Unable to set vendor code")
endif ()

##----------------------------------------------------------------------------------------------------------------------
## Settings

## Set up the package directory
file(MAKE_DIRECTORY ${PACKAGE_DIR})

##----------------------------------------------------------------------------------------------------------------------
## Install

set (PKG_FILES)

# app md5
set (APP_PKG_FILENAME ${PACKAGE_APP_NAME}.tgz)
execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND md5sum ${APP_PKG_FILENAME}
    OUTPUT_VARIABLE appMd5
)
string (SUBSTRING ${appMd5} 0 32 appMd5)
list (APPEND PKG_FILES ${PACKAGE_APP_NAME}.tgz ${PACKAGE_APP_NAME}.tgz.md5 ${PACKAGE_APP_NAME}.tgz.md5list)

# lib md5
set (LIB_PKG_FILENAME ${PACKAGE_LIB_NAME}.tgz)
execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND md5sum ${LIB_PKG_FILENAME}
    OUTPUT_VARIABLE libMd5
)
string (SUBSTRING ${libMd5} 0 32 libMd5)
list (APPEND PKG_FILES ${PACKAGE_LIB_NAME}.tgz ${PACKAGE_LIB_NAME}.tgz.md5 ${PACKAGE_LIB_NAME}.tgz.md5list)

# os md5
set (OS_PKG_FILENAME ${OS_PKG_NAME})
execute_process(
    WORKING_DIRECTORY ${OS_PKG_DIR}
    COMMAND md5sum ${OS_PKG_NAME}
    OUTPUT_VARIABLE osMd5
)
string (SUBSTRING ${osMd5} 0 32 osMd5)


## Create package based on template
configure_file(
    ${GITDIR}/buildTools/cmake/inc/Pkg.in 
    ${PACKAGE_DIR}/${PACKAGE_FILE_NAME}
    @ONLY)

# md5
execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND md5sum ${PACKAGE_FILE_NAME}
    OUTPUT_FILE ${PACKAGE_FILE_NAME}.md5
    OUTPUT_VARIABLE pkgMd5
)
list (APPEND PKG_FILES ${PACKAGE_FILE_NAME} ${PACKAGE_FILE_NAME}.md5)

message("CD ${PACKAGE_DIR} COMMAND md5sum ${PACKAGE_FILE_NAME} : pkgMd5=${pkgMd5}")

## Work out OS package release version
string(REPLACE ".tgz" "" OS_PKG_VERSION ${OS_PKG_NAME})
string(FIND ${OS_PKG_VERSION} "-" pos REVERSE)
if (${pos} GREATER -1)
	math(EXPR pos "${pos} + 1")
	string(SUBSTRING ${OS_PKG_VERSION} ${pos} -1 OS_PKG_VERSION)
endif ()

## Create manifest text based on template
set (MANIFEST_NAME ${PACKAGE_BASE_NAME}-manifest.txt)

configure_file(
    ${GITDIR}/buildTools/cmake/inc/manifest.txt.in 
    ${PACKAGE_DIR}/${MANIFEST_NAME}
    @ONLY)

list (APPEND PKG_FILES ${MANIFEST_NAME})

execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND md5sum ${MANIFEST_NAME}
    OUTPUT_VARIABLE manifestMd5
)
string(REPLACE " " ";" manifestMd5List ${manifestMd5})
list(GET manifestMd5List 0 manifestMd5)


## Create manifest XML based on template
configure_file(
    ${GITDIR}/buildTools/cmake/inc/manifest.xml.in 
    ${PACKAGE_DIR}/manifest.xml
    @ONLY)

list (APPEND PKG_FILES manifest.xml)



## Create a zip of all the files
string(REPLACE ".pkg" ".zip" PKG_ZIP_BASE ${PACKAGE_FILE_NAME})
set (PKG_ZIP ${PACKAGE_DIR}/${PKG_ZIP_BASE})

execute_process(
    WORKING_DIRECTORY ${PACKAGE_DIR}
    COMMAND zip ${PKG_ZIP} ${PKG_FILES}
)
execute_process(
    WORKING_DIRECTORY ${OS_PKG_DIR}
    COMMAND zip -u ${PKG_ZIP} ${OS_PKG_NAME} ${OS_PKG_NAME}.md5
)

#message("installPkg: PKG_ZIP=${PKG_ZIP}")


## Copy OS to application package
execute_process(
    WORKING_DIRECTORY ${OS_PKG_DIR}
    COMMAND cp ${OS_PKG_NAME} ${OS_PKG_NAME}.md5    ${PACKAGE_DIR}
)



#message("installPkg - END") 

