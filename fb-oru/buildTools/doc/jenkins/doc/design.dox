/**
\mainpage Jenkins Installation
<CENTER>
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

This document details the installation of a local Jenkins job for building radio applications.


<hr>
\section jenkins_sec_1_jenkins Jenkins Setup
<hr>

<hr>
\subsection jenkins_sec_1_jenkins_install Jenkins Install
<hr>

All of the steps in this section are meant to be run as root. So start by running:

@code
$ sudo bash
@endcode

Start by ensuring Java is installed:

@code
# yum install java-1.8.0-openjdk-devel
@endcode

The next step is to enable the Jenkins repository. To do that, import the GPG key using the following curl command:

@code
# curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | tee /etc/yum.repos.d/jenkins.repo
@endcode

And add the repository to your system with:
@code
# rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
@endcode


Once the repository is enabled, install the latest stable version of Jenkins by typing:

@code
# yum install jenkins
@endcode

After the installation process is completed, start the Jenkins service with:

@code
# systemctl start jenkins
@endcode

To check whether it started successfully run:

@code
# systemctl status jenkins
@endcode

You should see something similar to this:

@code
‚óè jenkins.service - LSB: Jenkins Automation Server
Loaded: loaded (/etc/rc.d/init.d/jenkins; bad; vendor preset: disabled)
Active: active (running) since Thu 2018-09-20 14:58:21 UTC; 15s ago
    Docs: man:systemd-sysv-generator(8)
Process: 2367 ExecStart=/etc/rc.d/init.d/jenkins start (code=exited, status=0/SUCCESS)
CGroup: /system.slice/jenkins.service
@endcode

Enable the Jenkins service to start on system boot.

@code
# systemctl enable jenkins
@endcode

Finally allow the Jenkins port (8080) through the firewall:

@code
# firewall-cmd --permanent --zone=public --add-port=8080/tcp
# firewall-cmd --reload
@endcode


<hr>
\subsection jenkins_sec_1_jenkins_setup Setting Up Jenkins
<hr>

To set up your new Jenkins installation, open your browser and type your domain or IP address followed by port 8080:

@code
http://localhost:8080
@endcode

A screen similar to the following will appear, prompting you to enter the Administrator password that is created during the installation.

\image html jenkins-unlock.png

Use the following command to print the password on your terminal:

@code
# cat /var/lib/jenkins/secrets/initialAdminPassword
@endcode

You should see a 32-character long alphanumeric password. Copy the password from your terminal, paste it into the
Administrator password field and click Continue.

On the next screen, you will be asked whether you want to install the suggested plugins or to select specific plugins. Click on
the Install suggested plugins box, and the installation process will start immediately.

\note If any of the plugins fail to install then click "continue". Select "Manage Jenkins" from the top left hand list, then
select "Manage Plugins". Select "Available" and use the search to find one of the plugins that failed to install (in my case one of them
was "pipeline") and tick that plugin to install, then click "install without restart". You should now see a list of the plugins that
failed to install which now show "pending". Jenkins will re-install the plugins automatically.

<hr>
\subsection jenkins_sec_1_jenkins_sshkey SSH Key
<hr>

You need to create ssh keys and import the public key to Tuleap in order to access gitolite. To do this:

- Work in Jenkins home directory:
@code
$ sudo su jenkins
$ cd /var/lib/jenkins
@endcode

- Ensure ssh directory is created:
@code
$ mkdir -p .ssh
$ chmod 0700 .ssh
@endcode

- Create credentials:
@code
$ ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''
$ chmod 0600 ~/.ssh/id_rsa*
$ chown -R jenkins:jenkins .ssh
@endcode

- Output public key:
@code
$ cat ~/.ssh/id_rsa.pub
@endcode

- Copy the output and paste into Tuleap ssh keys

\note A quicker alternative is to just copy the <b>.ssh</b> directory from your home user to the jenkins directory (making sure to
set the ownership of the new directory to jenkins)

<hr>
\subsection jenkins_sec_1_jenkins_troubleshoot Jenkins Instance Appears To Be Offline
<hr>

If you get the error saying that Jekins seems to be offline then you can try to fix it be editing /var/lib/jenkins/hudson.model.UpdateCenter.xml

@code
<?xml version='1.1' encoding='UTF-8'?>
<sites>
  <site>
    <id>default</id>
    <url>https://updates.jenkins.io/update-center.json</url>
  </site>
</sites>
@endcode

Change https to http and restart Jenkins


<hr>
\subsection jenkins_sec_1_jenkins_plugins Additional Plugins Required
<hr>

You need to install some additional plugins. Use "Manage Jenkins" -> "Manage Plugins" -> "Available" then tick the following plugins:

\li xUnit
\li cppcheck
\li Cobertura
\li pipeline utility steps
\li Sidebar link
\li Green balls
\li Build symlink

Then click "Download now and install after restart". On the install page click "restart ..." checkbox.

<hr>
\subsection jenkins_sec_1_jenkins_lib Groovy Library
<hr>

In order to run the pipeline jobs properly we need to configure Jenkins so it can shared common Groovy functions stored in our
"jenkinsFiles" repository. Select "Manage Jenkins" -> "Configure SYstem" and scroll down to "Global Pipeline Libraries" and click "add".

Now make the settings look like the following picture:

\image html jenkins-pipeline-libs.png

then click "save"

<hr>
\section jenkins_sec_2_data Data Directory
<hr>

All of the pipeline jobs default to storing all jobs in sub-directories under /data/proj. The easiest thing for you to do is to create
this directory path on your machine and to ensure that the jenkins user owns the proj directory:

@code
# mkdir -p /data/proj
# chown -R jenkins:jenkins /data/proj
@endcode

If you are running out of space on / and have lots of space in /home then you can alternatively create a mount point on / that uses
/home as the storage.

@code
# mkdir /data
# mkdir /home/<user>/data
@endcode

(where <user> is your use name)

Now edit /etc/fstab to add a mount:
@code
# vi /etc/fstab
...
/home/<user>/data       /data       none    defaults,bind   0 0

# mount -a
# mkdir /data/job
# chown -R jenkins:jenkins /data/job
@endcode


<hr>
\section jenkins_sec_3_jenkins_os Creating A Job - OS
<hr>

\subsection jenkins_subsec_3_osname OS Job Name

The first job you need to create is for the OS, since you'll need an OS built before you can build any radio jobs.

All of the pipeline jobs use the job name to determine the type of job being performed. For OS the important part of the name is the
first word which much be one of:

\li shared - for a shared OS
\li release - for a release of the OS

This first word will determine the directory used to store the build results. In this case we can use "shared".

\subsection jenkins_subsec_3_os Create OS Job

In Jenkins select "New Item", enter the name "shared OS" and click "pipeline". In the job configuration go to
"pipeline" and enter the following:

\image html jenkins-os-job.png

\subsection jenkins_subsec_3_osrun OS Job Build

The first "build" of this new job will fail. What it actually does is sets up all the properties and creates the "build with parameters"
settings. Run the first build by clicking "Build Now" in the top left corner.

Once that has failed you should then see "build with parameters" replacing the original "build now" button.

\note Use your web browser refresh to update the screen

Now click "build with parameters" and you should then see a set of parameters that you can modify if you wish. When you're happy with
the parameters just click the "Build" button on this parameters page.

\note Sometimes this second build will also fail due to "parameters change". Just re-run the build.

The OS should now build both the HOST (x86_64) version and all known board variants. This can take a few hours depending on your machine.

\note On my machine, cloning the ros repository took 14 minutes over the vpn!


<hr>
\section jenkins_sec_4_radio Creating A Job - RADIO
<hr>

\subsection jenkins_subsec_4_radioname RADIO Job Name

The radio job uses more of the job name to determine the parameters of the build. The format of the name is:

@code
[release|continuous] <board>-<customer>-<application>
@endcode

The first word specifies whether this is a continuous build or a release build.

The continuous build job will poll for changes in the
repositories and automatically build when any change is spotted. The job will create the x86_64 version and will build and run all
tests, as well as doing static analysis. If all the tests pass then the job creates a board target and archives it suitable for trying
on the board.

The release build job only runs when the user requests a build. The release build needs to be run with the "release" checkbox unticked
in order to create a "release candidate". This does an repo clone/pull or all repos to get the latest code. When the "release" checkbox is
ticked, the job will use whatever was last used for a release candidate. The job will also tag the repos with the release version on successful
completion of the build job.

The second word defines the board/customer/application to be built.

\note The board target is determined from the details stored in this build's configuration file (i.e. the file stored in buildTools/cmake/make/builds/radio)


\subsection jenkins_subsec_4_radio_cont Create Continuous RADIO Job

\note After the first job has been created, when creating subsequent jobs just create a copy of any previous job using the "Copy from" entry
in the new item page.

In Jenkins select "New Item", enter the name "Continuous <board>-<customer>-<application>" and click "pipeline".

In the job configuration go to "pipeline" and enter the following:

\image html jenkins-radio-job.png


\subsection jenkins_subsec_4_radio_rel Create Release RADIO Job

This is almost identical to (@ref jenkins_subsec_4_radio_cont) but use the name "Release <board>-<customer>-<application>".

\subsection jenkins_subsec_4_radio_build Building RADIO

Like (@ref jenkins_subsec_3_osrun) the first build just sets up the parameters then aborts, so you will need to re-run the build with
parameters.

For a release build the parameters include a "release" checkbox that should be ticked if this is a release build. Also for release builds you
need to set the release version and a short comment on this release.

As described earlier, you can only run a release build after running at least one release candidate - this is a run with the "release"
checkbox unticked. So, whenever you need to update the reository contents run a release candidate build. Once done you can then run a release build
that will build based on the repository contents from the release candidate.

*/
