/*-?|Full build system|sprice|c0|?*/
/**
\mainpage Build Tools Document
<CENTER>
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

This document details the RSE build tools. The scripts, programs, and data stored in the buildTools
repository are either directly for supporting building the target applications/libraries, or are for
supporting code development.

Details of each of these are given in:

\li <A HREF="../buildTools-cmake/index.html" target="_blank">buildTools - CMake Document</A>

A description on how toset up and use Jenkins on your local machine is in:

\li <A HREF="../buildTools-doc-jenkins/index.html" target="_blank">Jenkins Installation</A>


The following describes the new build system for the RSE.

<hr>
\section buildsys_sec_1 Overview
<hr>

The RSE build system needs to allow enough flexibility such that it is capable of building executable(s) targetted to a
particular customer, application, and board. This flexibility has several consequences:

\li The board selected implies a fixed list of peripheral devices that need to be interfaced to, whereas the application/customer
may modify the initial settings of each device.

\li The specified application will imply TDD or FDD support, but the fibre interface (e.g. CPRI, OBSAI etc) is most likely
a build option since a customer might require the same application running on the same hardware but providing different
fibre interfaces.

\li The software interface to any fpga(s) will depend both on the application and on the board

\li When the application starts it may then set further constraints on frequencies etc. based on build settings or board variant
(e.g. to support different frequency bands)

Providing this build flexibility in an automated build environment requires the use of build-time settings (e.g. selected
in Jenkins) creating environment variables that can be used in makefiles and code, application-specific settings set as
constants in each application, and runtime selection of derived objects based on settings.

Note that it is a design goal to eliminate (or severely reduce) the use of conditional compilation.

The following sections discuss the new mechanisms implemented.

<hr>
\section buildsys_sec_2 Build Settings
<hr>

The Jenkins parameterised build will set the following settings (as a minimum):

\li CUSTOMER - Customer name (e.g. ALU)
\li APPLICATION - Application type (e.g. RRH, DIT, PIM)
\li BOARD - Board (e.g. ETNA, ETNACR)
\li FIBRE_INTERFACE - Fibre Interface (e.g. CPRI, OBSAI)
\li DUPLEX - Duplex (e.g. TDD, FDD)
\li BUILD_NUMBER - Build number (build number automatically incrementing for each build created)
\li BUILD_VERSION - Build version string in the format Version.Revision

NOTE: the build variant (e.g. supported band) will be based from the board revision (or a file
added to the RRH during factory test)

These settings create environment variables that the top-level makefile will pass to the configure scripts, creating
repository makefile variables and/or C++ constants via #defines (either in config.h or in the C++ command line).

The makefile variables will then control the application make (see @ref buildsys_sec_7); and the C++ constants will be used
in the application itself (see @ref buildsys_sec_4).

<hr>
\section buildsys_sec_9 Build Command Line
<hr>

With the new build system, the default target hardware is (as previously) for local builds. Local builds target the processor
x86_64.

Note that there is a new target 'help' which displays all of the current makefile targets:

@code
$ make help
-----------------------------------------------------------------
 MAKE TARGETS

    all................: Build libraries and programs
    libs...............: Build libraries
    programs...........: Build programs
    microblaze.........: Build microblaze targets
    tgz................: Build tarballs
    pkg................: Build package
    clean..............: Clean the build
    full-clean.........: Delete the build
    help...............: Show help
    save-settings......: Change the saved settings
    show-settings......: Show build settings
    tools..............: One-off build of required tools
    local-bootstrap....: One-off build of tools and toolchain
    eclipse............: Update the project files
    test-interface.....: Rebuild test interface C++ files
    test-doc...........: Create test interface html documents
    test-doc-app.......: Create test interface html (this board/application)
    test-doc-all.......: Create test interface html (all boards/applications)
    test-doc-pdf.......: Create customer test interface PDF document
    cmakefiles.........: Create/modify CMakeLists.txt files

    cppcheck...........: Run cppcheck
    coverage...........: Run coverage (assumes tests have been run)
    tests..............: Run tests
    run-all-checks.....: Run all tests, coverage, cppcheck
    memcheck...........: Run memory leak checks
    memcheck-libs......: Build libraries for memory checks
    memcheck-progs.....: Build test programs for memory checks


-----------------------------------------------------------------
 CURRENT BUILD SETTINGS

    Target.............: x86_64
    Application........: ART
    Customer...........: AXIS
    Board..............: ETNA
    Duplex.............: TDD
    Fibre I/F..........: CPRI
    Version............: 0.0
    App Name...........: AXIS-ART
    Board App..........: ETNA-AXIS-ART

-----------------------------------------------------------------


 Use the 'save-settings' target to change the build settings

 Examples:
    # to just switch the processor setting, keeping other settings the same
    make TARGET=ppc

    # to specify the most common settings
    make TARGET=x86_64 BOARD=ETNA APPLICATION=FTU CUSTOMER=AXIS

@endcode

The current build settings are saved in a hidden file and can be displayed using the 'show-settings' target. If you want
to build a new product, or switch to building for ppc say, then use the 'save-settings' target as:

@code
$ make save-settings CUSTOMER=ALU BOARD=ETNA APPLICATION=RRH TARGET=ppc
@endcode

All or just some of the settings can be changed, the others will retain their current setting. So, to build the same
product on a different processor:

@code
# build for ppc
$ make save-settings TARGET=ppc

# build on local machine
$ make save-settings TARGET=x86_64
@endcode


The build variables being those described in @ref buildsys_sec_2.

You can also temporarily change settings for a particular build. For example, leaving the settings set for local x86_64
builds, but building a tarball set for ppc:

@code
$ make tgz TARGET=ppc
@endcode

<hr>
\section buildsys_sec_9b Building Documentation
<hr>

The targets 'test-doc', 'test-doc-app', and 'test-doc-pdf' build the HTML and pdf documentation for the software. The 'test-doc'
taregt builds everything, whereas the 'test-doc-app' builds just the HTML for current application (documentation includes
hidden commands for internal use). The target 'test-doc-pdf' builds the customer pdf documentation.

Specifically used with 'test-doc-pdf', the environment variable <b>PDF_HEADING</b> can be set to specify a line of heading
text that is used on the fron cover of the pdf document. This is used in a build as follows:

@code
$ make PDF_HEADING="Customer documentation for application EUROPA" test-doc
@endcode


<hr>
\section buildsys_sec_9c Building a Repository
<hr>

On occasion (mainly when running tests) it's useful to make a target for a single repository rather than for all the repositories every time. To do
this, set the <b>repo</b> variable when running make to the repository you want to target.

For example, to skip testing on other repositories and concentrate on the hardware repository run:

@code
$ make repo=hardware tests
@endcode

<hr>
\section buildsys_sec_9d Specifying an FPGA
<hr>

In most cases an application will be built on a board and there will only ever be one FPGA part used for the life of the board/application.

In this case we put the fpga tarball into the fpga repository 'images' subdirectory under the BOARD-CUSTOMER-APPLICATION directory.

However, in some cases we may need to migrate between parts and still support previous FPGA parts. To enable this we need to add an extra
layer of directory, one per FPGA part name, named as the full part name of the FPGA.

For example, the ART aplication running on ECB board may have a structure like:

@code
fpga/
	images/
		ECB-AXIS-ART/
			xc7k160t-ffg676-2/
				EtnaAxisArtFpga-4991.tgz
			xc7k410t-ffg676-2/
				CDRSC2G6_Top-CPRI-4995.tgz
@endcode

When building, not specifying any fpga will leave the build system to work out which tarball to use. Assuming there is only one choice
then this should always work.

When there are multiple choices (like in the example above) you need to specify the FPGA part name that you want to use for the build. You
do this using the <b>FPGA</b> variable, setting it to the part name.

Note that you can use just the start of the part name as long as it uniquely identifies the part. For example these are all equivalent:

@code
$ make FPGA=xc7k160t-ffg676-2
$ make FPGA=xc7k160t-ffg676
$ make FPGA=xc7k160t
$ make FPGA=xc7k160
@endcode

The build system will find the appropriate tarball and then uses the FPGA manifest inside the tarball to derive the fpga full part name
and the fpga build number. These values are then available in AppSettings (and will be shown in the tif 'system' device).


<hr>
\section buildsys_sec_9e Specifying an OS build
<hr>

\note The old build system used to use the environment variable ROS_PATH. This is now obsolete

Normally the build system will search adjacent directories looking for "ros/build" and will use the first it finds. It will then
look in this build directory for the name of the board being built for this application (for example it will look for a ros build "ECB"
when building application "ECB-AXIS-ART").

The search path consists of looking in adjacent directories, then in directories "release", and finally in directories "shared". This search path
is intended to work with Jenkins jobs where we build a release OS and then all board builds share that release.

You can override this behaviour by specifying the ROS_REPO variable in the build config file.

For example, building the sensor application which uses the sensor-os, you would use a build configuration like:

@code
TYPE:=sensor
BOARD:=ENC
CUSTOMER:=AXIS
APPLICATION:=SENSOR
FPGA:=xc7z030
REPOS:=xcommon,common,swtools,sensor-hw,sensor-fpga,sensor-services,tif-common,sensor-cif,applications-common,sensor-apps
FEAT-DISCOVERY:=ENABLE
TARGET=arm

ROS_REPO=sensor-os
@endcode


<hr>
\section buildsys_sec_9f Application Build Configs
<hr>

In order to give the build system information about a particular application build, we have the concept of
a "build config". This is a single file per application build that specifies the various settings that make up the
build. These configuration files are collected under buildTools/cmake/make/builds and are processed by the makefile
whenever it is run.

\image html build-cfg.png

The image above shows the collection of config files along with the contents of one of them. The format of the files is:

@code
BOARD:=ECB
CUSTOMER:=AL
APPLICATION:=FELIX
FPGA:=xc7k160
@endcode

(Note that it is important not to use spaces - otherwise make may misread the config)

Basically you set the build parameters (without the "BUILD_" prefix).

With this list of all valid combinations of build parameters, the build can then create lists of applications
to build, or to run as host application simulations etc.

Normally the OS used with a build is selected based on the board name. You can override this in the config file by specifying the value of ROS. For example:

@code
BOARD:=F400
CUSTOMER:=AL
APPLICATION:=FELIX
FPGA:=xc7k160
ROS:=ECB
@endcode

The above exmaple sets the ROS to be the ECB build.

Configs may also contain any feature settings (for further details see @ref buildsys_sec_10_features)


\subsection buildsys_subsec_9f_naming Application Naming Convention
<hr>

Note that in order for the build system to correctly determine each application's build paths etc, you need
to follow a naming convention for the application directory and executable.

For any application it will have BOARD, CUSTOMER, and APPLICATION name values. The main application needs to be located
in a sub-directory that uses the CUSTOMER, and APPLICATION names with initial letter capitalised and concantenated together.
The final executable uses all three names, again with initial letter capitalised and concantenated together.

The format is:

@code
applications/
	{CUSTOMER}-{APPLICATION}/
		{Customer}{Application}Process/
			bin-src/
				{Customer}{Application}Process.cpp

		...
		build/
			x86_64-{BOARD}-{CUSTOMER}-{APPLICATION}/
				{Customer}{Application}Process/
					{Board}{Customer}{Application}Process

@endcode

As a real example, the FELIX application will be located as follows:

@code
applications/
	AL-FELIX/
		AlFelixProcess/
			bin-src/
				AlFelixProcess.cpp

		...
		build/
			x86_64-ECB-AL-FELIX/
				AlFelixProcess/
					EcbAlFelixProcess

@endcode

\subsection buildsys_subsec_9f_targets Make Application Targets
<hr>

The build system automatically creates a target for each application which will build the PPC target and send it to the <b>swdev</b> server
(from which the install package can be loaded onto a board in the lab).

Additionally, the build system creates a target for each application that will run the host build of the application as a local simmulation.

The build targets are in the form:

@code
build-{BOARD}-{CUSTOMER}-{APPLICATION}
@endcode

To see the complete list, run:

@code
make build-help
@endcode

Note that the package is built with an automatically incrementing number (stored in a hidden file  on your system) and also using your user name
as the "version". This ensures your local builds are both unique and are also easily identifiable as coming from you.

Similarly, the run targets are in the form:

@code
run-{BOARD}-{CUSTOMER}-{APPLICATION}
@endcode

Again, to see the complete list, run:

@code
make run-help
@endcode

Note that the build system will automatically copy cal files and set up the fpga emulator as appropriate for this application (see below for further details)


\subsection buildsys_subsec_9f_cal Cal File Copy for "run"
<hr>

If you have a directory <b>/nandflash</b> on your machine that is writeable by you, then when you run the simulation, the build system will first check the
application directory for cal data. The cal data needs to be stored in the following subdirectory:

@code
applications/
	{CUSTOMER}-{APPLICATION}/
		sim/
			caldata/

@endcode



\subsection buildsys_subsec_9f_fpgaemu FPGA Emulator for "run"
<hr>

When the simulation is run, the build system checks in the hardware repository for this application looking for an application-specific FPGA
emulator config file. The build system looks in the folowing directory:

@code
hardware/
	{BOARD}_{APPLICATION}/
		fpga/
			cfg/

@endcode


If the cfg directory exists then the FPGA emulator is told to look in that directory first for configuration files. Otherwise the default search path is
used.


\subsection buildsys_subsec_9f_ssh Setting Your swdev SSH Credentials
<hr>

The final action of the build-{BOARD}-{CUSTOMER}-{APPLICATION} target (assuming the compilation completed without errors) is for the package files
to be uploaded to <b>swdev</b>.

To make life easier, you can set up your ssh connection with swdev such that you don't need to enter your login password each time you send the files.

<b>On your machine:</b>

Run the following:
@code
    mkdir ~/.ssh
    ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ''
    chmod 600 ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa.pub
    chmod 700 ~/.ssh
@endcode

This creates the public key id_rsa.pub and the private key id_rsa in your ssh directory

You need to copy the public key on to swdev:

@code
    scp .ssh/id_rsa.pub $USER@swdev:~/.ssh/new_key
@endcode

<b>On swdev:</b>

Add the new key in to your authorized keys file (stored in the .ssh directory under your user):

@code
    cd ~/.ssh
    cat new_key >> authorized_keys
@endcode

Depending on the version of OpenSSH, you may need:

@code
    ln -s authorized_keys authorized_keys2
@endcode

Ensure permissions are correct:

@code
    chmod 0700 ~/.ssh
    chmod 0600 ~/.ssh/authorized_keys
@endcode


\subsection buildsys_subsec_9f_exttools Eclipse External Tools
<hr>

In buildtools/eclipseConfig/externalTools, I've added a set of "launch" config files which Eclipse reads and presents
as "External Tools":

\image html build-exttools.png

Each "external tool" is created with it's own .launch file. I've created a launch file for each application's "run" and
"build" make target. Selecting the tool will run it and direct the inpuit and output from/to the Eclipse console.

Note that when you execute a "run" tool to run up a simulation, you actually need to execute the "KILL running application"
tool to terminate it. For some reason pressing the Eclipse red square says it's terminated the process but doesn't!

The "TIF" tool runs a telnet session to the tif interface. This then lets you enter commands at the Eclipse console. Note that
you use "Displayed Selected Console" dropdown on the right of the console display to switch between thge different console windows.

\image html build-eclipse-market.png

Optionally you can extend the Eclipse console to properly display ANSI escape codes. We've used these in a few places to make the output
text bold, or an appropriate colour. To do this open the Help -> Eclipse Marketplace... and search for "ansi". You should see the option
shown above. Installing this adds ANSI support to the standard Eclipse console window:

\image html build-eclipse-console.png

Note that the "A" icon at the far right of the console top menu allows you to disable/enable ANSI support. So you can turn it off if you need to.

<hr>
\section buildsys_sec_3 Repository Directories
<hr>

Most of the standard repositories (common, hardware, services, dpd) must be structured so that the directories
are board-specific, or common.

\image html repo-dirs-hardware.png

The application services and applications repos must contain only application-specific directories without any
board-specific content.

\image html repo-dirs-services.png

The test interface repo is the only repo in which there will be application and board/application directories.

\image html repo-dirs-tif.png

The intent of these restrictions is that the standard repositories contain the building blocks for any application, either
common (non board-specific) parts, or board-specific parts. Similarly, the application repos should contain only
application-specific content. The two layers can then be linked together by the top-level makefile, which selects the
correct board and application components to link into the final application.

It is required to combine customer and application names in a defined way so that the makefile can be written
in a more generic way to automatically build the correct application (see @ref buildsys_sec_7). The format for
application names is:

When the customer name is specified:
@code
	<Customer>-<Application>

Example: ALU-Radio
@endcode

When there is no specific customer the name 'AXIS' shall be used:
@code
	AXIS-<Application>

Example: AXIS-DIT
@endcode

Similarly, for a board-specific instance of an application, the format of the name is:

@code
	<Board>-<Customer>-<Application>

Examples:
	ETNA-ALU-RRH
	ECB-AXIS-PIM
@endcode

<hr>
\section buildsys_sec_4a Application Special Directories
<hr>

The application repository unsuprisingly contains the source for the application executable(s). These
source files are contained in sub-directories under the main {CUSTOMER}-{APP} directory, and are usually
named *Process.

Alongside these source directories are other special directories that are used to create the application
and library tarballs, and these directories are described below.

\subsection buildsys_subsec_appdir_1 rootfs
<hr>

This contains any application-specific files/directories that will be installed onto the board root filesystem. At
minimum there should be an etc/init.d subdirectory which provides the startup script for the application.

Note that any files under the rootfs directory that end in <b>.in</b> are treated as text template files. These
will be processed by cmake, replacing any variables of the form <i> @ VARIABLE @ </i> with that variable's value.

For example, the application start up script usually starts with:

@code
#!/bin/sh
# Startup RSE application

APP=@STARTUP_APP@

@endcode

And cmake will have a setting for tthe variable STARTUP_APP (which should be the name of the main application).

All files under rootfs will be stored in the application tarball.

(For complete details of the application root filesystem settings, see
<A HREF="../applications-common-Application/index.html#app_common_appframework_sec_5" target="_blank">Application Install Files</A>)

\subsection buildsys_subsec_appdir_2 lib-rootfs
<hr>

In a similar fashion to the <b>rootfs</b> directory, <b>lib-rootfs</b> contains files to be installed
into the board's root filesystem. However, here the files are stored in the library tarball.

The intention of this area is to allow large, unchanging files (for example test model 3.1 playback files)
to be installed onto the system from the library tarball. Since the library tarball is large and changes
infrequently, the image management system can optimise download procedures such that, where possible, only
the small application tarball (which changes every build) needs to be downloaded



<hr>
\section buildsys_sec_4b Application Settings
<hr>

Each application will have known fixed settings for itself. There will also be build-specific settings passed down from
the build run. In order to capture these settings for use in the rest of the program, I suggest the creation of a new
IAppSettings class:

@code
class IAppSettings {
public:
	enum DuplexType {DUPLEX_FDD, DUPLEX_TDD} ;
	enum AppType {
		APP_RADIO,
		APP_PIM,
		APP_DIT
	} ;
	enum FibreInterfaceType {
		IF_CPRI,
		IF_OBSAI
	};
	enum BoardType {
		BOARD_ETNA,
		BOARD_ETNACR
	};
	enum CustomerType {
		CUSTOMER_ALU
	};

	virtual DuplexType getDuplexType()=0 ;
	virtual AppType getAppType()=0 ;
	virtual FibreInterfaceType getFibreInterfaceType()=0 ;
	virtual BoardType getBoardType()=0 ;
	virtual CustomerType getCustomerType()=0 ;

	...
};
@endcode

Obviously there will be a constructor that the application will use to set the settings

The application main must create and initialise this settings class before instantiating the Radio class to ensure all
of the Radio objects are selected appropriately.

The application code will then use this singleton object to select the creation and use of the appropriate derived objects
at runtime based on the current settings (as described below).



<hr>
\section buildsys_sec_8 TIF
<hr>

Requirements:
\li Test interface should only show those interface elements for this application and this board
\li Test interface HTML documentation should also only show elements for this application and this board build

Unlike the object selection method detailed above, the test interface needs to be statically defined. The simplest means
of doing this is to put the common application interfaces (i.e. non board specific) into a per application directory. The
board-specific interfaces then go into a directory for each application/board and will be derived from the application.

As an example, refer to the following diagram showing the hierarchy generated for application ETNA-AXIS-ART.

\image html repo-dirs-tif-hierarchy.png

At each level, the test interface is derived from a more abstract parent. So the ETNA-AXIS-ART test interface derives from
the interface in ETNA_ART, which in turn derives from ETNA. That derives from the common test interface
(TestInterface) which is part of the TIF common library. Notice how the specific interface always derives from the
less specific interface down to the generic case for that aplication.

Linking is then a matter of linking against the tif application library and the tif application/board library.

Note that the above hierarchy implies that for any given application there must be a TIF xml definition for:

\li The specific application (e.g. ETNA-AXIS-ART)
\li The board-specific application (e.g. ETNA_ART) where applicable
\li The board-specific (e.g. ETNA)

If there is no need for any specific test interface commands at each of these levels, then just create a simple xml
definition which creates a placeholder for the board. Once created this xml file can be left indefinitely even if extra
xml files are added to create test commands for a level.

An example placeholder xml definition is:

@code
<?xml version="1.0"?>
<TestInterface
 version="1.0"
 xmlns:html="http://www.w3.org/TR/REC-html40">
 	<Board name="ETNA_ART">
		<Device name="EtnaArt" path="/.etna-art" comment="Placeholder for ETNA_ART">
		</Device>
	</Board>
</TestInterface>

@endcode

Note the use of a "dotted" path name. Preceding any path name with '.' causes the path to be hidden. This removes it from any
customer documentation (though not from internal documentation).

For code reuse it makes sense to pull common interface code into general libraries as reusable "utility" objects. So there
will be a set of utility objects in tif common, a set in tif ETNA, and so on. These can get pulled into the test interface
objects but won't be part of the code automatically generated.


<hr>
\section buildsys_sec_10_features Build Features
<hr>


Build features are add on "modules" which add a feature to a standard build. A feature can be boolean - i.e. built in or not. Alternatively it may be an "enumeration" - one of a set of valid values.

All features are defined with a default setting so that any build config that doesn't specify a feature will use the default for that feature (which normally means that the feature is not built into
that application).

When a feature is set so that it will be built into the application, it is the build system that manages building all of the correct source files and automatically linking them into the final application. This is
managed using our usual framework of singleton selection and linking (rather than by conditional compilation).


\subsection buildsys_subsec_10_file Feature File
<hr>

All of the features are defined in one or more "feature files". In fact all of the features could be defined in a single file, but I've taken
the convention of creating a file per feature.

These are stored in buildTools/cmake/make/features sub directory.

\image html feature-build-dir.png buildTools feature directory

Each feature is declared in a feature line of the form:

@code
<TYPE> <FEATURE>=<DEFAULT>
@endcode

Where type can be:

\li BOOL - Boolean type where valid values are true, false, enable, disable, on, off, 1, 0
\li ENUM() - An enumerated colon seperated list e.g. ENUM(NONE:APP:XILINX)

Example feature definitions are:

@code
BOOL DISCOVERY=off
ENUM(NONE:APP:XILINX:ALTERA) DPD=NONE
ENUM(NONE:XILINX) PIM=NONE
@endcode

The above example defines 3 features: DISCOVERY, DPD, and PIM. The DISCOVERY feature can be set to on or off
(or any of the equivalent boolean values). The DPD feature can be set to NONE, APP, XILINX, or ALTERA. The PIM
feature can be set to NONE or XILINX.

As shown in the example, each feature is declared with a default value. This is the value that the feature
will have for any builds which do not override the setting in their config file.

When the build runs, it reads these feature definitions and will only allow builds to define these features
using their valid values. In other words it will check for any typos or invalid config settings.

\subsection buildsys_subsec_10_config Feature In Config
<hr>

A build specifies which feature(s) will be included in it's application by overriding the feature setting in the config file.

It does this by defining additional variable/value pairs of the form:

@code
FEAT-<FEATURE>:=<VALUE>
@endcode

For example:

@code
BOARD:=ECB
CUSTOMER:=AL
APPLICATION:=FELIX
FPGA:=xc7k160
FEAT-DPD:=APP
@endcode

where the DPD feature is set to APP.

Multiple features can be set in the config file, but the value each is set to must conform to the declaration in the feature file

\subsection buildsys_subsec_10_libs Feature Libraries
<hr>

\image html feature-lib.png Feature Library Sub-directory

The source code specific to a feature is stored in a special directory named in the format: <FEATURE>@<VALUE>.

For example: DPD@APP, DPD@XILINX etc.

These feature directories will normally be stored in a library directory 'common.features' but can be in multiple
subdirectories (e.g. ECB.features, EBS_ATG.features etc). But since a feature is meant to be application generic
it is most likely to be stored in a common area usable by all applications (hence the use of 'common.features').

The build mechanism used with these features is for the code to instantiate classes via singletons/factories. The singleton/factory
code is then stored in each variant of the feature setting, each variant having different code to provide the behaviour for that setting.

For example, the DPD feature when it is not NONE (NONE is the setting which stops dpd from being built into the application) uses one implementation
of IMsgQ for the DPD-APP case, and another for the DPD=XILINX case. So the factory code stored in DPD@XILINX directory creates a MsgQ; the
factory code stored in DPD@APP creates a PesudoMsgQ.

The build ensures that the correct directories are built and linked into the application, so that the correct instances are created for
the application with those feature settings.

\subsection buildsys_subsec_10_application Application Features
<hr>

\image html feature-app.png Application Feature Sub-directories

The application features directories are where all the aspects of a feature are pulled together (for more details see
<A HREF="../applications-common-Application/index.html#app_common_appframework_sec_3" target="_blank">Application Features</A>)

<hr>
\section buildsys_sec_10b_doxygen Doxygen Documentation
<hr>

The doxygen documentation generation includes translation of certain template features that can be used in the dox files. The intentions of these features
is to remove display of documentation not appropriate for a particular build (e.g. remove ECB board references from a ZCU111 board build documentation). The
template features also allow for writing some generic text with variables that expand to the correct values.

\subsection buildsys_sec_10b_block Block inclusion/exclusion
<hr>

The block inclusion/exclusion tags are of the form:

@code
{{\@[TAG]{
...
}}\@[TAG]}
@endcode

If <i>TAG</i> is defined then the enclosed block of text is kept; otherwise that text is removed. The tags are created when the doxygen target is being built,
the tags being generated by the build settings.

The first set of tags are the REPO_* tags which are created based on the names of the repositories that are used as part of this build. For example, most builds
use the "common" repo which will lead to the tag REPO_COMMON being defined. Other repos, like for example dpd2, may not be included in the build and so the tag
would only be defined if that repo was used.

The other set of block tags are for the current BOARD, CUSTOMER, APPLICATION settings. The tags BOARD_<i>board</i>, CUSTOMER_<i>customer</i>, APPLICATION_<i>application</i>
will be defined accordingly. For example, the build ZCU111-AXIS-RRH will define the following tags:

@code
BOARD_ZCU111
APPLICATION_RRH
CUSTOMER_AXIS
@endcode

This set of tags, when used with th following dox, will produce the output as shown:

dox:
@code
{{\@BOARD_ZCU111{
<h1>ZCU111</h1>
}}\@BOARD_ZCU111}

{{\@BOARD_ECB{
<h1>ECB board</h1>
}}\@BOARD_ECB}

{{\@APPLICATION_ART{
<h1>ART</h1>
}}\@APPLICATION_ART}

{{\@APPLICATION_RRH{
<h1>RRH</h1>
}}\@APPLICATION_RRH}

{{\@CUSTOMER_AXIS{
<h1>AXIS</h1>
}}\@CUSTOMER_AXIS}

{{\@CUSTOMER_ATG{
<h1>ATG</h1>
}}\@CUSTOMER_ATG}
@endcode

Output:
@code
<h1>ZCU111</h1>

<h1>RRH</h1>

<h1>AXIS</h1>
@endcode

\subsection buildsys_sec_10b_var Variable Definition
<hr>

Along with block expansion, I've added support for some simple variable expansion. The variables defined are for the BOARD, CUSTOMER, and APPLICATION.
Variables are added to the dox file as @\{<i>variable</i>}.

As an example, the above block expansion example could be more simply written in the dox as:

@code
<h1>@\{BOARD}</h1>

<h1>@\{APPLICATION}</h1>

<h1>@\{CUSTOMER}</h1>

@endcode


<hr>
\section buildsys_sec_11_dpd2_feature DPD2 Feature (2020)
<hr>

The new (2020) dpd feature <b>DPD2</b> allos building the DPD application, stored in the new repository <b>dpd2</b>, so that
it can be run in the Linux application or on one of the ARM R5 processors.

The new feature is similar to the old DPD feature (which built the dpd code to run in a Xilinx microblaze embedded processor), but
the changes allow for more flexibility on the definition of the toolchain to be used (whereas the leagcy build used the fpga
vendor so was limited to Xilinx (i.e. Microblaze) or Altera (i.e. Nios)).

The DPD2 feature can be set to NONE, APP, XIL-R5-0, XIL-R5-1, or XIL-R5-0/1. NONE and APP are the same as before (no dpd or run in
Linux application). The XIL-R5-* settings choose either R5-0, R5-1, or both as targets. In each case, the makefile will be created
so that the code for that target will be built into an R5 executable. In the case of XIL-R5-0/1 two executables will be built: one
for each R5.

The DPD2 feature setting will determine the value of the EMBEDDED_TARGET variable. Like the TARGET variable, this sets the toolchain
used to compile the cmake project.

\note For the embedded libraries, they will use cmake toolchain files from buildTools/cmake/Toolchain/embedded (rather than
the usual buildTools/cmake/Toolchains)



*/
