# CMake build for Jenkins
# Continuous integration for applications. Building RM application
#
# Uses the environment variables to set parameters in the script
#
# Required variables:
#
# TARGET = target platform (ppc, arm etc)
#
# WORKSPACE = Jenkins workspace area
# BUILD_BOARD = Board
# BUILD_CUSTOMER = Board
# BUILD_APPLICATION = Board
# BUILD_NUMBER = Jenkins build number
# BUILD_DUPLEX = Supported build duplex
# FPGA = FPGA part
# PDF_HEADING = Heading string for customer pdf
#
#
# Optional:
# V = Set verbose level (normally 0)
# MIGRATE = Set when migrating from an older build system, updating toolset etc
#

VERSION="0.01"

##==============================================================================================
## Functions
##==============================================================================================


##----------------------------------------------------------------------------------------------
doBuild()
{

	# Clean out old application packages
	cd $WORKSPACE
	if [ -d *app*s/$CUSTOMER_APP/build/$TARGET-$BOARD_CUSTOMER_APP/packages ]
	then
		rm -rf *app*s/$CUSTOMER_APP/build/$TARGET-$BOARD_CUSTOMER_APP/packages/*
	fi
	
	# save settings
	cd $WORKSPACE/buildTools/cmake
	make V=$V GITDIR=$WORKSPACE save-settings $TARGET_SETTINGS
	
	if [ -n "$MIGRATE" ]
	then
		echo Migrating, cleaning out any existing builds...
		cd $WORKSPACE/buildTools/cmake
	
		# clean out old build
		make V=$V GITDIR=$WORKSPACE full-clean $TARGET_SETTINGS
	
	fi
	
	# build tools
	make V=$V GITDIR=$WORKSPACE $TOOLS
	if [ $? -ne 0 ]; then
		exit 1
	fi
	
	# build package
	make V=$V GITDIR=$WORKSPACE pkg $TARGET_SETTINGS
	if [ $? -ne 0 ]; then
		exit 1
	fi
	
	# display the settings for the log
	make V=$V GITDIR=$WORKSPACE show-settings $TARGET_SETTINGS
	
	##----------------------------------------------------------------------------------------------
	# Now update the customer documentation
	cd $WORKSPACE
#	if [ -d htmldoc/RTI-Doc ]
#	then
#		rm -f htmldoc/RTI-Doc/*.pdf
#	fi
#	cd $WORKSPACE/buildTools/cmake
#	make V=$V GITDIR=$WORKSPACE PDF_HEADING="$PDF_HEADING" test-doc-pdf
#	if [ $? -ne 0 ]; then
#		exit 1
#	fi
	
	if [ -n "$BUILDING_RELEASE" ]
	then	
		# Create source package
		make V=$V GITDIR=$WORKSPACE src-pkg $TARGET_SETTINGS
	fi	
	
	##----------------------------------------------------------------------------------------------
	# copy os and pdf into package
	cd $WORKSPACE
	cp $OSTGZ $OSTGZMD5 *app*s/$CUSTOMER_APP/build/$TARGET-$BOARD_CUSTOMER_APP/packages
	if [ $? -ne 0 ]; then
		exit 1
	fi
	#cp htmldoc/RTI-Doc/*.pdf *app*s/$CUSTOMER_APP/build/$TARGET-$BOARD_CUSTOMER_APP/packages
	#if [ $? -ne 0 ]; then
	#	exit 1
	#fi
	
}

##==============================================================================================
## Common environment
##==============================================================================================

##----------------------------------------------------------------------------------------------
TOOLS=tools
V=${V:-0}
if [ -n "$MIGRATE" ]
then
	V=2
	TOOLS=update-tools
fi


# Create full settings
SETTINGS="BOARD=$BUILD_BOARD CUSTOMER=$BUILD_CUSTOMER APPLICATION=$BUILD_APPLICATION FPGA=$FPGA"
CUSTOMER_APP="$BUILD_CUSTOMER-$BUILD_APPLICATION"
BOARD_CUSTOMER_APP="$BUILD_BOARD-$BUILD_CUSTOMER-$BUILD_APPLICATION"
TARGET_SETTINGS="TARGET=$TARGET LAB=1 $SETTINGS"

# Get OS paths
cd $WORKSPACE/buildTools/cmake
ROSDIR=$(make $TARGET_SETTINGS show-ros | grep ROSDIR= | sed 's/ROSDIR=//')
ROS_PATH=$(make $TARGET_SETTINGS show-ros | grep ROS_PATH= | sed 's/ROS_PATH=//')

# Get latest OS package 
OSTGZ=$(ls $ROS_PATH/packages/*.tgz 2>/dev/null | tail -1 )
OSTGZMD5=$(ls $ROS_PATH/packages/*.tgz.md5 2>/dev/null | tail -1 )

# Special version if building a release
if [ -n "$BUILDING_RELEASE" ]
then
	# Version is either release version or RC version
	BUILD_VERSION=$RELEASE_VERSION
	if [ ! -n "$BUILD_VERSION" ]
	then
		BUILD_VERSION=rc
	fi
	
	TARGET_SETTINGS="$TARGET_SETTINGS BUILD_VERSION=$BUILD_VERSION"
fi



