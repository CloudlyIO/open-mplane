/**
@mainpage Radio Software Design Overview Document
<BR>
<CENTER>
Copyright (c) Meta Platforms, Inc. and affiliates.
<BR>
<B><H2>Open M-Plane Software Platform Design Overview</H2></B>
</CENTER>
<BR>
<BR>
This document is the Design Overview Document for the <b>Open M-Plane Software Platform</b> that will be
used for all future Open M-Plane product development. It is built from the source code base and is
intended to be a living document that remains in line with the actual code content and software design.

It is to be built and released along with the application firmware to record code
content, design context and unit test coverage and statistics for each end to end
product release.

The document is split into a number of simple sections that can be accessed through the
sections that follow. The software module section provides various links to more detailed
design documentation including those generated for specific product implementations.

@note If a developer adds new software module, product or changes the interaction between
services, the changes must be reflected in this document so that it remains relevant.

@tableofcontents


<!--
@page cr_dod_page_intro Introduction and Overview
-->
<hr>
<hr>
@section design_overview_doc_sec1 Introduction
<hr>
<hr>

This Design Overview Document (DOD) provides a summary of the various layers of
software implemented in the new <b>Open M-Plane Software Platform</b> design along with a link to
more detailed design documents for each. This common design is intended to
be the base line code that can be used for all future product designs whether they are
radios, test or network equipment. As such it is important that the content of each of
these software layers is well understood in order to maximise code reuse and minimise
time to market. Product specific implementations of code or sections of design documents
that are specific to a particular product variant will be identified through a design mnemonic,
and/or and application for example ETNA, ETNA_RRH or ETNA_FTU.

<hr>
@section design_overview_doc_sec2 Overview
<hr>

The principle aim of the Open M-Plane software platform redesign is to improve quality, add
functionality, increase performance and provide long term cost reduction
through re-use and time to market. The new code base will from the outset be
designed with testability in mind, from the implementation of Test Driven
Development techniques to the documenting and automatic generation of external
test interfaces for use in DVT, system and production test.


Modern design techniques are applied using best in class facilities from the
open source community, including static code analysis, code coverage and performance
profiling. The software platform is split into a number of clearly defined layers with strict
rules as to the interaction between the layers. The following is a simple block
diagram showing each of the layers and in principle how they interact.

@image html radio_overview.png


What is important here is the virtual interfaces that expose the capabilities of
the hardware and services to the higher application level implementations. These virtual
interfaces can be implemented by any number of hardware specific implementations
without the higher level software layers being aware of the change. For
example, the VHIs' IRadio interface has the concept of supporting 1 to N Tx paths, the actual
number implemented at runtime is determined by the hardware during initialisation, this
allows the interface to 'self-size' according to the hardware implementation,
i.e. 2 ports, 4, 8 or 20, the interface simply grows as required.

The second advantage is the use of polymorphism to change the actual implementation
without changing the interface, or the higher level software. Let's take a look at a
simple concrete example. The Carrier Manager needs to set the DUC NCO value for
a particular carrier Tx path. The Carrier Manager gets an instance of the TxPath
interface from the Radio interface and calls its setDUC() method, the Carrier Manager
doesn't care what code actually performs this function, simply that the interface is honoured.

@image html vrh_exp.png


So at the lower hardware implementation, the ETNA radio hardware access implementation
for example might set an FPGA register, whilst the implementation on another version of
radio hardware to a Broadcom DFE. The important thing is the Carrier Manager
doesn't care, as long as the interface contract is honoured.


The application software is responsible for controlling all aspects of the hardware
including initialisation, configuration, control and monitoring of its digital and
assets. Each of the layers of the design are saved to dedicated git repositories as follows:

<TABLE BORDER=1 CELLSPACING=0>
<TR><TH>Repository Description </TH><TH ALIGN=LEFT>Repository Name</TH></TR>
<TR><TD>Software Build System and associated development tools</TD><TD>buildTools</TD>
<TR><TD>Top level application implementations</TD><TD>applications</TD>
<TR><TD>Common utilities and functionality</TD><TD>common</TD>
<TR><TD>Services pure virtual interface definition and implementation</TD><TD>services</TD>
<TR><TD>Hardware pure virtual interface definition and implementations</TD><TD>hardware</TD>
<TR><TD>Test Interface Implementations</TD><TD>tif</TD>
<TR><TD>Reusable operating system (basic Linux 3.X implementation)</TD><TD>ros</TD>
</TABLE>

The master git repositories are located in Swindon on the development server designated <b>swin-11</b>.
They are accessed through a secure <b>gitolite</b> interface as supported by the <b>Tuleap -
Application Lifecycle Management (ALM) software</b>.
In a normal development cycle the repositories are cloned to developers machines and may
eventually be distributed to a new, larger server as more new products adopt the
technology. The common, hardware and services code base contain a
great deal of common code that will be reused by many product variants.

A product specific implementation will use a hardware code name, for example <B>ETNA</B>,
as a sub-directory of the hardware directory layer and will implement the hardware specific
functional interfaces defined in the <B>vhi</B> sub-directory.

Common services code, e.g. code that controls the radio TX path power or alarm implementation
is implemented in the services directory and will implement the interfaces
defined in the <b>vsi</B> sub-directory.

The applications repository is where you will find the top level application implementation. This
is generally where the top level executable is defined and it details exactly what hardware
and services implementations will be used to create it. This top level application will
bring together a specific hardware implementation with application specific hardware and
services code.

So we can see with this type of design approach it will be possible to reuse
large sections of the code base as new hardware variants are derived simply by
inheriting from an existing implementation and modifying the behaviour of that
specific instance, an important part of reducing development cycles and time to market.

The following sections will provide a summary of the functionality that is implemented
in each layer along with a link to a more detail low design document.

<hr>
<hr>
@section design_overview_doc_common_guidelines Common Design Guidelines For Open M-Plane Software Platform
<hr>
<hr>

In this section we outline some of the expected common design behaviour to be used
when generating code for the Open M-Plane Software Platform. It does not seek to impose
design solutions but attempts to put forward common techniques that should be considered
for all aspects of the product software design.

Among the key factors for using C++ for the new code base is an attempt to promote
reuse through inheritance and common code design via the use of pure virtual interfaces
and polymorphism.

As described later in this document, there is a dedicated <b>common</b> software repository that
includes a number of base class types that can be used to create tasks (threads),
services (tasks with a common control interface), data types like Frequency and Power
and much more.

Likewise, all repositories or sub-directories of repositories that start with
a v (eg vhi, vsi etc.) contain class definitions that are in the main pure virtual, that
is they no implementation code, just a suitable set of access methods thats can be
used to set or get the data that their eventual implementations will encapsulate.

<hr>
@subsection design_overview_doc_common_keypoints Key Design Points
<hr>

@par
The application, in all its potential forms must adhere to the following basic design goals:

<ul>
<li>The main application is a single process running multiple threads (tasks and services)</li>
<li>The principle control of the product will be through services that can be started, stopped or suspended</li>
<li>All calls to the product hardware must be through a functional call-return interface, using an appropriate virtual interface</li>
<li>Tasks should be used for short term concurrency to perform a background operation, for example a software download</li>
<li>Data should never be exposed through global variables, although access to data through a global object is allowed</li>
<li>Using a single process multi-threaded environment has the advantage that data is easily shared but access to data must be thread safe by design</li>
<li>All common functionality must be implemented as a stand alone class that can be encapsulated or inherited</li>
<li>Event notification between objects must be made through a callback mechanism, where registered objects are called
through a published interface in the context of the data source using the common Service/Observer design  pattern implementation</li>
</ul>

<!--
@page cr_dod_page_des_constraints Software Repository Content and Detailed Design Links
-->

<hr>
<hr>
@section design_overview_doc_sec3 Software Repository Content and Detailed Design Links
<hr>
<hr>

This section provides an overview of the purpose and where necessary the restrictions
placed upon the code modules that will make up the complete product software design. There
should be enough detail that the reader has an understanding of the purpose of
a code repository. For details of individual software module design follow the link
to the detailed design documents at the end of each section.

<hr>
@subsection design_overview_doc_sec3_0  buildTools repository - Tools for the build
<hr>
@par
The makefiles, scripts, programs, and data stored in the buildTools repository are either directly for
supporting building the target applications/libraries, or are for supporting code development and testing.

@par
<b>Details</b>
@par
More details of the functionality provided as part of the <b>buildTools</b> repository can be found here:
<A HREF="./buildTools-doc/index.html" target="_blank">buildTools - Build Tools Document</A>
<BR>

@par
In order to define the FPGA register interface in hardware/common you need to use the register map generator (see
<A HREF="./tif-bin-utils-regtool/index.html" target="_blank"><b>Reg Tool Design Document</b></A> for full details).

<hr>
@subsection design_overview_doc_envvars U-Boot Environment Variables
<hr>
@par
U-Boot provides a flash partition in which system variables are stored. Some of these variables are specific
to U-Boot; the rest of the variables are used by the application.

<b>U-Boot Variables</b>
\li bootcmd				Boot command macro
\li bootdelay			Delay before u-boot starts
\li console				Console command options
\li boot1				Boot from bank1 macro
\li boot2				Boot from bank2 macro
\li kernelsize			Size of kernel flash partition
\li kernelstart1		Kernel bank1 start address (flash)
\li kernelstart2		Kernel bank2 start address (flash)
\li netstart			Start of memory block to use for boot
\li ethaddr				MAC id used for interface eth0 (debug port)

<b>Application Variables</b>
\li hostname			Board host name
\li ethaddr1			MAC id used for interface eth1 (baseband port)
\li ethaddr2			MAC id used for vlan tagged interface (on eth1)
\li hwBoardSerialNum	Board serial number
\li activeos			Current OS boot bank number (1|2)
\li GROUPLOG			System logging save (group)
\li INSTLOG				System logging save (instance)

<b>Variables in code but not used (?)</b>
\li fibreipaddr		?
\li gatewayip		Gateway ip for static address
\li serverip		Gateway ip for static address (alternative variable)
\li ipaddr			Static ip
\li netmask			Netmask for static ip
\li eth1addr		Legacy MAC id
\li productCode		Legacy profuct code (before this was available in build)
\li hwSystemId		?
\li hwSystemRev		?
\li sysSerialNum	Multi-board serial number (?)
\li FEATURE			legacy licensing
\li LICENSE			legacy licensing
\li rx3gMinimum
\li rx3gMaximum
\li rxFilterMinimum
\li rxFilterMaximum
\li rxMinimum
\li rxMaximum
\li rxCentre
\li rxBandwidth
\li rxRaster
\li rxCarrierFlip
\li rxLoInjection
\li tx3gMinimum
\li tx3gMaximum
\li txFilterMinimum
\li txFilterMaximum
\li txMinimum
\li txMaximum
\li txCentre
\li txBandwidth
\li txRaster
\li txCarrierFlip
\li txLoInjection

<!-- {{@BOARD_ZCU111{ -->
<hr>
@subsection design_overview_doc_users Default Users
<hr>
@par
The RFSoC board (ZCU111) os is built with a *root* user and a normal user *axis*. These users are created by modifying the
petalinux rootfs config using:

@code
$ petalinux-config -c rootfs

@endcode

These changes result in a rootfs_config file which contains the modified root password, along with
the list of normal users and their passwords. The rootfs conig file is stored in *ros//configs/petalinux2020.1/ZCU111/shared/project-spec/configs/rootfs_config*
and this file should be consulted for the latest passwords.

The relevant section of the file is shown below:

@code
#
# PetaLinux RootFS Settings
#
CONFIG_ROOTFS_ROOT_PASSWD="XXXX"
CONFIG_ADD_EXTRA_USERS="axis:XXXX;"

@endcode

<!-- }}@REPO_DPD} -->


<!-- {{@REPO_DPD{ -->
<hr>
@subsection design_overview_doc_sec3_17 dpd repository - DPD application
<hr>
@par
The modules in the dpd repository must be DPD application code, or code to be run on an embedded FPGA processor.
The code must implement the virtual abstract interfaces defined by the virtual hardware
hardware interface or vhi.

@subsubsection design_overview_doc_sec3_17_1 vhi sub-directory - DPD Virtual Hardware Interface
@par
The vhi sub-directory or <b>virtual hardware interface</b> is a collection of inter-related C++
abstract classes, containing only pure virtual methods that collectively define an interface to
a generic hardware implementation. The aim of the virtual hardware interface is to
create a common implementation that may be altered or extended by a specific product
implementation. Higher level services and application software that use the interface
are effectively unaware of the details of the underlying hardware implementation as it
is protected from those details through its generic interface.

@par
<b>Constraints</b>
@par
All code in the vhi <b>should not</b> contain any implementation. All classes should be abstract
with all methods defined as pure virtual and must not contain any data.

@par
<b>Detailed Design</b>
@par
More details of the <b>virtual radio hardware</b> interface design can be found here:
<A HREF="./dpd-vhi/index.html" target="_blank"><b><i>vhi</i> - DPD Virtual Hardware Interface Design Document</b></A>
<BR>

@subsubsection design_overview_doc_sec3_17_2 common sub-directory - Common Implementation
@par

@par
It is the intention of the common sub-directory to implement all common DPD functionality.
Any common class implementation can easily be extended by a product specific hardware
implementation. The common implementation can be found in the <b><i>common</i></b> directory.


@par
<b>Detailed Design</b>
@par
More details of the <b>common DPD implementation</b> can be found here:
<A HREF="./dpd-common/index.html" target="_blank"><b><i>dpd/common</i> - Common DPD Implementation Design Document</b></A>


@subsubsection design_overview_doc_sec3_17_3 microblaze sub-directory - Xilinx Microblaze Processor Implementation
@par

@par
It is the intention of the microblaze sub-directory to implement the Xilinx microblaze processor functionality.
The microblaze implementation can be found in the <b><i>microblaze</i></b> directory.

@par
<b>Detailed Design</b>
@par
More details of the <b>microblaze DPD implementation</b> can be found here:
<A HREF="./dpd-microblaze/index.html" target="_blank"><b><i>dpd/microblaze</i> - Microblaze DPD Implementation Design Document</b></A>

<!-- }}@REPO_DPD} -->


<!-- All repo-specific sections will automatically be added here from ${repo}/cmake/doc/repo.inc -->

*/
