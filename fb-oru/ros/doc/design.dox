/**
\mainpage Operating System Document
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section osbuild_sec_0 Overview
<hr>

The RSE OS build system needs to allow enough flexibility such that it is capable of building an operating system targetted to a
particular processor family, and board. The build system also needs to be easily extensible such that updates to the kernel
or tools can esily be accomodated (including the addition (or removal) of new tools).

<strong>!!! When using this latest OS build, ensure you load the DTB into both slots due to u-boot changes !!!</strong>

The following sections discuss how the build is performed and how to add/remove/update the components that are built.

<hr>
\section osbuild_sec_0 Building an OS
<hr>

When building the OS for a particular board from scratch you need to run the following sequence from /data/git/rse/ros:

@code
make clean-all BUILD_BOARD=<board>
make init BUILD_BOARD=<board>
make install BUILD_BOARD=<board>

@endcode

The 'clean-all' target removes any existing contents, the 'init' target ensures all board-specific links have been created (see @ref osbuild_sec_5),
and the 'install' target creates the built OS package.

<hr>
\section osbuild_sec_4 Make Commands
<hr>

When running the build, you must specify the BUILD_BOARD (board name). You can also
specify a BUILD_NUMBER (Jenkins builds will automatically set this).

The default target is 'install' which creates the OS package. So an example minimal make command is:

@code
make BUILD_BOARD=ETNA
@endcode

All build files are created under build/{BOARD} and the OS package will be in build/{BOARD}/packages.

NOTE: Previous version of the makefile required you to specify a BUILD_TARGET (e.g. set to ppc). This is no longer
necessary as the current make uses the board-specific makefile (in the sub-directory 'board-files') which, among
other things, sets the target to the known processor for this board.

Other useful make targets are:

\li help - shows some (possibly) useful help information
\li init - Initialise board-specific files/links
\li install - (Default target) Build the OS package
\li menuconfig - Runs up the kernel menuconfig
\li clean - cleans out most of the build
\li clean-all - totally cleans out all build files
\li toolchain - just build the toolchain
\li kernel - just build the linux kernel


<hr>
\section osbuild_sec_1 Build Settings
<hr>

The Jenkins parameterised build will set the following settings (as a minimum):

\li BUILD_BOARD - Board (e.g. ETNA, ETNACR)
\li BUILD_NUMBER - Build number (build number automatically incrementing for each build created)

The makefile variables will then control the make, creating the correct toolchain and using that toolchain to build the
linux kernel and tools.

<span style="color:red">Do <b>NOT</b> use BUILD_TARGET.</span> Older variants of the build system required teh target be set via this variable.
The latest versions of the build system use the BUILD_BOARD to automatically determine the target. You <i>can</i> specify the target
manually but it will be ignored (and it's use is likely just to cause confusion).

<hr>
\section osbuild_sec_2 Directory Layout
<hr>

The OS build directory is organised into several subdirectories to make it easier to navigate, and also to make it easier
to set up board/processor specific files.

\subsection osbuild_sec_2_1 board-files

The board-files subdirectory contains a directory for each of the supported boards. Each directory is the board name (in capitals)
and contains a set of sub-directories containing board-specific files (see @ref osbuild_sec_5)


\subsection osbuild_sec_2_2 build

The build  directory is not under revision control and is created to hold the current build files when make is run. As
builds are board-specific, there is a subdirectory for each board built containing the build files (along with the packages
that will be installed on the board). See @ref osbuild_sec_9.

\subsection osbuild_sec_2_3 configs

Contains config information for BusyBox and Crosstools-ng. The crosstools config files are collected under a processor
subdirectory, and each is named with the linux version, gcc version, and glibc version that they are configured for.

\subsection osbuild_sec_2_4 include

Contains miscellaneous header files used in building the toolset

\subsection osbuild_sec_2_5 make

The make subdirectory contains all of the sub-makefiles included into the main makefile (see @ref osbuild_sec_3 for further details)


\subsection osbuild_sec_2_6 make-tools

Various tools used during build. The perl script make-gen-init-cpio.pl creates the init-cpio file from a text device list.
This device list being stored in the board configs area (see @ref osbuild_sec_5)

\subsection osbuild_sec_2_7 misc

This directory contains all of the old build files/patches from the original Etna build. I've been mopping them up out of
the main directories and into here. I've kept them just in case we discover downstream that I've missed a patch (or something)

\subsection osbuild_sec_2_8 packages

The packages directory contains the tarballs of all the tools, and linux kernel being built. It also contains a subdirectory
holding all of the tarballs used by crosstools-ng. This saves crosstools-ng from having to re-download each time.

\subsection osbuild_sec_2_9 patches

Contains patches for the kernel and for the tools. Some patches are provided by the tool author, others are created special
for Open M-Plane in order to support our hardware or to workaround build issues when building for a particular processor.

<hr>
\section osbuild_sec_3 Make System
<hr>

The make system consists of a simple top-level makefile that includes the sub-makefiles from directory 'make'. Under the
'make' directory are common sub-makefiles, as well as further sub-directories that contain the sub-makefiles for things
like building the linux kernel, the toolchain etc.

The sub-makefiles under subdirectories are usually selected by version or board name (so not all sub-makefiles will be used
depending on the build).

\image html os-make.png

\subsection osbuild_sec_3_1 buildvars.mk

This file sets up the build variables that can be passed into make via the command line (or environment).

The main variable to be set is the BUILD_BOARD. This then causes the sub-makefile under 'board-files' directory to be included.
It is this boards sub-makefile that contains the BUILD_TARGET i.e. the processor to cross-compile for.

\subsection osbuild_sec_3_2 settings.mk

The settings sub-makefile contains various global settings variables used in the build. Examples of these are the package
directory, root filesystem directory, debug tools install directory and so on.

\subsection osbuild_sec_3_3 selector.mk

The selector sub-makefile sets the versions of all the packages built into the kernel. It also selects which of the tools
will actually be built (along with the version of each tool).

As you can see from the diagram, the selector sets up variables that are then used to drive the rest of the build by determining
which sub-makefiles are included. Each of those included sub-makefiles then set up their own environment as well as
adding themselves to global lists (where appropriate).

\subsection osbuild_sec_3_3 selected.mk

This sub-makefile loads in the common sub-makefiles as well as loading in the appropriate kernel sub-makefile and the list
of tool sub-makefiles. The list of tools is created by selector.mk and set in variable $SELECT_TOOLS_LIST.

Each of the tool sub-makefiles consists of 2 parts: the first part sets up any global variables that can be used by the
rest of the make; the second part performs the actual build of the tool.

In the main makefile, selected.mk is included first with $INCMODE set to VARS which enables the first part of the sub-makefiles.
The next include of selected.mk comes after setting $INCMODE to "VARS TARGETS" causing the second part of the sub-makefiles
to come into play.

This mechanism allows each tool sub-makefile to contain it's build rules along with necessary variables, but ensures that all
the variables are set before any other part of the make tries to use them.

Also, as each tool sub-makefile is included it adds it's install target to the variable $TOOLS_LIST. This is then used
later in the make to ensure all the required tools are built.

<hr>
\section osbuild_sec_5 Board-specific Files
<hr>

Under board-files/{BOARD} are various sub-directories containing source, data, configs etc for board-specific installs.

In order to keep a common set of files and not duplicate files in each board-specific sub-directory I've created a directory
'board-files/common' into which most of the files are stored. Then, in the board-specific directories we actually have
links back to the common area files.

These links are created when a ros build is run and are made by the script 'make-tools/cp-links.bsh'. This creates links
for any files which don't exist in the board-specific directory for the board we are currently building.

There's a problem (as usual) in that Eclipse Egit doesn't support symbolic links and goes nuts if it sees them. To keep
Eclipse happy, each created directory in the board-specific area has a .gitignore created that contains the list of links.
This ensures we don't check in any of the links and prevents Eclipse from trying to manage them.

To ensure these links are correct, run the make 'init' target for the board:

@code
$ make BUILD_BOARD=<board> init
@endcode

\subsection osbuild_sec_5_1 appsrc

Conatins the source for various utilities and libraries (NOTE: These should probably have their own sub-makefile)

\subsection osbuild_sec_5_2 configs

Contains the device_list.txt for this board (used to init cpio).

Also contains the kernel configuration settings for this board. There will be a kernel config file per supported kernel
version.

\subsection osbuild_sec_5_3 dts

The axis DTS file for this board. See @ref osbuild_sec_8 for device tree details.

\subsection osbuild_sec_5_4 fpga

Contains the tarball and md5 for the cut-down boot fpga image for this board. This gets built into the kernel rootfs
and loaded on startup.

\subsection osbuild_sec_5_5 linux-kernel-files

Contains board-specific drivers that get built into the kernel. There is a subdirectory per kernel version.

\subsection osbuild_sec_5_6 rootfs

Contains any files that should be built into the root filesystem ready for kernel startup. At minimum there needs to be
etc/rc.sh for BusyBox to run to start things up.


\subsection osbuild_sec_5_7 u-boot-files

U-boot inititalisation modules specific to this board to init the hardware when u-boot boots.

<hr>
\section osbuild_sec_6 Tools / Developer Tools
<hr>

Crosstools-ng is configured to build certain debug utilities (strace, dmalloc etc). selector.mk is also used to select
which other utilties are built from packages (gdbserver etc).

All of these get copied into:

@code
build/{BOARD}/Linux-ppc/dev-install
@endcode

The OS will not install these (due to NOR flash space limitations), but the application make can install them if it is
making a "developer" build.

<hr>
\section osbuild_sec_7 Application Makefile
<hr>

When the toolchain is built, part of it's build process includes the creation of a makefile segment that can be included
by the RSE application make. This file is created with the path $(BUILDDIR)/make/$(BUILD_TARGET).mk

For example, an ETNA bord build (target processor being 'ppc') would create the file:

@code
$(GITDIR)/ros/build/ETNA/make/ppc.mk
@endcode

The contents of the file tell the application build where the toolchain executables are (amongst other things). An example
file is shown below:

@code
GCC_DIR=gcc-4.3.6
GLIBC_DIR=glibc-2.10.1
TOOLCHAIN_LINUX_DIR=linux-3.10.2
TOOLCHAIN_TARGET=powerpc-405-linux-gnu
TOOLCHAIN_DIR=/home/sprice/git/ros/build/ETNA/tools/linux-3.10.2-gcc-4.3.6-glibc-2.10.1/powerpc-405-linux-gnu
TOOLCHAIN_LIBS=/home/sprice/git/ros/build/ETNA/tools/linux-3.10.2-gcc-4.3.6-glibc-2.10.1/powerpc-405-linux-gnu/powerpc-405-linux-gnu/lib
TOOLCHAIN_BIN=/home/sprice/git/ros/build/ETNA/tools/linux-3.10.2-gcc-4.3.6-glibc-2.10.1/powerpc-405-linux-gnu/bin
TOOLCHAIN_PREFIX=/home/sprice/git/ros/build/ETNA/tools/linux-3.10.2-gcc-4.3.6-glibc-2.10.1/powerpc-405-linux-gnu/bin/powerpc-405-linux-gnu-
TOOLS_INSTALLDIR=/home/sprice/git/ros/build/ETNA/Linux-ppc/install
@endcode

(Obviously the actual paths will vary depending on the system the build is running on)


<hr>
\section osbuild_sec_8 Device Tree
<hr>

The device tree is now used to specify the size and location of all the peripherals on the EBC bus. The intention is to
write the user code so that it interrogates the device tree to access these parameters and adjust accordingly, rather than
using hard-coded values. Re-arrangement of the memory map is then just a matter of changing the DTS (and loaded a new DTB
on the board).

The first change from default behaviour is that I've patched u-boot so that it *doesn't* change the 'ranges' property of
the ebc. Normally it nails the ranges value to be the location/size of the NOR flash. Since we now need to specify
all of the the ranges used, we don't want u-boot messing the values up.

So the dts now has the ebc entry:

@code
	EBC0: ebc {
		compatible = "ibm,ebc-405ex", "ibm,ebc";
		#address-cells = <2>;
		#size-cells = <1>;
		ranges = <
			0 0 0xff800000 0x00800000
			1 0 0xff000000 0x00100000
			2 0 0xff500000 0x00100000
			3 0 0xf0000000 0x01000000
		>;
		...
@endcode

This sets the address/size of all 4 of the chip select regions.

Next, I've modified the old Open M-Plane ndfc-compat.c so that it's basically a copy of the latest ndfc.c nandflash controller
but added ECC layout information. Other than that, the nandflash driver will now correctly read the DTS, locate the
nandflash address and process any partitions. So a partitioned nandflash entry would look something like:

@code
	ndfc@2,0 {
		compatible = "axis,ndfc-compat";
		reg = <2 0x00000000 0x02000000>;
		ccr = <0>;
		bank-settings = <0x80002222>;
		#address-cells = <1>;
		#size-cells = <1>;

		nand {
			#address-cells = <1>;
			#size-cells = <1>;

			partition@0 {
				label = "filesystem";
				reg = <0 0x01400000>;
			};

			partition@1 {
				label = "logs";
				reg = <0x01400000 0x00C00000>;
			};
		};
	};

@endcode

Finally, I've created a new driver 'ebc-cs' which allows us to set the EBC bank config/access params registers based on
the DTS entries and the chip select's 'ranges' entry. An example use is setting the FPGA configuration space:

@code
	fpga-config@3,0 {
		compatible = "axis,ebc-cs" ;
		reg = <3 0x00000000 0x01000000>;

		bus-width = <8>;

		bme = <0> ;
		twt = <2> ;
		bce = <0> ;
		bct = <0> ;
		csn = <0> ;
		oen = <0> ;
		wbn = <1> ;
		wbf = <1> ;
		th  = <1> ;
	};
@endcode

The 'reg' property sets the CS (3) and the size needs to match with the ebc 'ranges' entry for CS 3.

The 'bus-width' poperty seelects the bus width as 8, 16, or 32 bits.

The rest of the properties shown set the access parameters register fields.

Combining these settings with the ebc ranges locates the fpga config at 0xF000 0000 with a size of 16M, bus width 8bits.

A full device tree looks like:

@code
/dts-v1/;

/ {
	#address-cells = <1>;
	#size-cells = <1>;
	model = "amcc,axisc2g2";
	compatible = "amcc,axisc2g2";
	dcr-parent = <&{/cpus/cpu@0}>;

	aliases {
		ethernet0 = &EMAC0;
		ethernet1 = &EMAC1;
		serial0 = &UART0;
	};

	cpus {
		#address-cells = <1>;
		#size-cells = <0>;

		cpu@0 {
			device_type = "cpu";
			model = "PowerPC,405EX";
			reg = <0>;
			clock-frequency = <0>; /* Filled in by U-Boot */
			timebase-frequency = <0>; /* Filled in by U-Boot */
			i-cache-line-size = <0x20>;
			d-cache-line-size = <0x20>;
			i-cache-size = <0x4000>; /* 16 kB */
			d-cache-size = <0x4000>; /* 16 kB */
			dcr-controller;
			dcr-access-method = "native";
		};
	};

	memory {
		device_type = "memory";
		reg = <0 0>; /* Filled in by U-Boot */
	};

	UIC0: interrupt-controller {
		compatible = "ibm,uic-405ex", "ibm,uic";
		interrupt-controller;
		cell-index = <0>;
		dcr-reg = <0x0c0 0x009>;
		#address-cells = <0>;
		#size-cells = <0>;
		#interrupt-cells = <2>;
	};

	UIC1: interrupt-controller1 {
		compatible = "ibm,uic-405ex","ibm,uic";
		interrupt-controller;
		cell-index = <1>;
		dcr-reg = <0x0d0 0x009>;
		#address-cells = <0>;
		#size-cells = <0>;
		#interrupt-cells = <2>;
		interrupts = <0x1e 4 0x1f 4>; /* cascade */
		interrupt-parent = <&UIC0>;
	};

	UIC2: interrupt-controller2 {
		compatible = "ibm,uic-405ex","ibm,uic";
		interrupt-controller;
		cell-index = <2>;
		dcr-reg = <0x0e0 0x009>;
		#address-cells = <0>;
		#size-cells = <0>;
		#interrupt-cells = <2>;
		interrupts = <0x1c 4 0x1d 4>; /* cascade */
		interrupt-parent = <&UIC0>;
	};

	plb {
		compatible = "ibm,plb-405ex", "ibm,plb4";
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;
		clock-frequency = <0>; /* Filled in by U-Boot */

		SDRAM0: memory-controller {
			compatible = "ibm,sdram-405ex";
			dcr-reg = <0x010 2>;
		};

		MAL0: mcmal {
			compatible = "ibm,mcmal-405ex", "ibm,mcmal2";
			dcr-reg = <0x180 0x62>;
			num-tx-chans = <2>;
			num-rx-chans = <2>;
			interrupt-parent = <&MAL0>;
			interrupts = <0 1 2 3 4>;
			#interrupt-cells = <1>;
			#address-cells = <0>;
			#size-cells = <0>;
			interrupt-map = </*TXEOB*/ 0x0 &UIC0 0xa 0x4
					/*RXEOB*/ 0x1 &UIC0 0xb 0x4
					/*SERR*/  0x2 &UIC1 0x0 0x4
					/*TXDE*/  0x3 &UIC1 0x1 0x4
					/*RXDE*/  0x4 &UIC1 0x2 0x4>;
			interrupt-map-mask = <0xffffffff>;
		};

		POB0: opb {
			compatible = "ibm,opb-405ex", "ibm,opb";
			#address-cells = <1>;
			#size-cells = <1>;
			ranges = <0x80000000 0x80000000 0x10000000
				  0xef600000 0xef600000 0xa00000
				  0xf0000000 0xf0000000 0x10000000>;
			dcr-reg = <0x0a0 5>;
			clock-frequency = <0>; /* Filled in by U-Boot */

			EBC0: ebc {
				compatible = "ibm,ebc-405ex", "ibm,ebc";
				dcr-reg = <0x012 2>;
				#address-cells = <2>;
				#size-cells = <1>;
				clock-frequency = <0>; /* Filled in by U-Boot */
				ranges = <
					0 0 0xff800000 0x00800000
					1 0 0xff000000 0x00100000
					2 0 0xff500000 0x00100000
					3 0 0xf0000000 0x01000000
				>;
				interrupts = <5 1>;
				interrupt-parent = <&UIC1>;

				nor_flash@0,0 {
					compatible = "amd,s29gl512n", "cfi-flash";
					bank-width = <2>;
					reg = <0x0 0x000000 0x800000>;
					#address-cells = <1>;
					#size-cells = <1>;

					partition@0 {
						label = "boot1";
						reg = <0x0 0x3c0000>;
					};

					partition@3c0000 {
						label = "boot2";
						reg = <0x3c0000 0x3c0000>;
					};

					partition@780000 {
						label = "dtb2";
						reg = <0x780000 0x10000>;
					};

					partition@790000 {
						label = "dtb1";
						reg = <0x790000 0x10000>;
					};

					partition@7a0000 {
						label = "ubenv2";
						reg = <0x7a0000 0x10000>;
					};
					partition@7b0000 {
						label = "ubenv1";
						reg = <0x7b0000 0x10000>;
					};
					partition@7c0000 {
						label = "u-boot";
						reg = <0x7c0000 0x40000>;
					};
				};

				fpga@2,0 {
					compatible = "axis,ebc-cs" ;
					reg = <1 0x00000000 0x00100000>;
				};

				ndfc@2,0 {
					compatible = "axis,ndfc-compat";
					/* reg: CS BASE SIZE  */
					reg = <2 0x00000000 0x04000000>;
					/* ccr: NDFC_CCR_ARAC0 */
					ccr = <0>;
					bank-settings = <0x80002222>;
					#address-cells = <1>;
					#size-cells = <1>;

					nand {
						#address-cells = <1>;
						#size-cells = <1>;

						partition@0 {
							label = "filesystem";
							reg = <0 0x04000000>;
						};

/*
						partition@0 {
							label = "filesystem";
							reg = <0 0x01400000>;
						};

						partition@1 {
							label = "logs";
							reg = <0x01400000 0x00C00000>;
						};
*/

					};

				};

				fpga-config@3,0 {
					compatible = "axis,ebc-cs" ;
					/* reg: CS BASE SIZE  */
					reg = <3 0x00000000 0x01000000>;

					bus-width = <8>;

					/* Set the access parameters (modified from defaults) */
					bme = <0> ;
					twt = <2> ;
					bce = <0> ;
					bct = <0> ;
					csn = <0> ;
					oen = <0> ;
					wbn = <1> ;
					wbf = <1> ;
					th  = <1> ;
				};
			};

			UART0: serial@ef600200 {
				device_type = "serial";
				compatible = "ns16550a";
				reg = <0xef600200 0x8>;
				virtual-reg = <0xef600200>;
				clock-frequency = <0>; /* Filled in by U-Boot */
				current-speed = <0>;
				interrupt-parent = <&UIC0>;
				interrupts = <0x1a 4>;
			};

			UART1: serial@ef600300 {
				device_type = "serial";
				compatible = "ns16550a";
				reg = <0xef600300 0x8>;
				virtual-reg = <0xef600300>;
				clock-frequency = <0>; /* Filled in by U-Boot */
				current-speed = <0>;
				interrupt-parent = <&UIC0>;
				interrupts = <1 4>;
			};

			IIC0: i2c@ef600400 {
				compatible = "ibm,iic-405ex", "ibm,iic";
				reg = <0xef600400 0x14>;
				interrupt-parent = <&UIC0>;
				interrupts = <2 4>;
				#address-cells = <1>;
				#size-cells = <0>;
			};

			IIC1: i2c@ef600500 {
				compatible = "ibm,iic-405ex", "ibm,iic";
				reg = <0xef600500 0x14>;
				interrupt-parent = <&UIC0>;
				interrupts = <7 4>;
				#address-cells = <1>;
				#size-cells = <0>;
			};

			GPIO0: gpio@ef600800 {
				compatible = "ibm,ppc4xx-gpio";
				reg = <0xef600800 0x20>;	/* length forced by ppc4xx-gpio driver */
				#gpio-cells = <2>;
				gpio-controller;
			};

			axis-leds {
				compatible = "gpio-leds";
				/* remember these gpio numbers are in hex */
				red {
					gpios = <&GPIO0 4 0>;
					default-state = "keep";
				};
				yellow {
					gpios = <&GPIO0 5 0>;
					default-state = "keep";
				};
				green {
					gpios = <&GPIO0 6 0>;
					default-state = "keep";
				};
			};

			RGMII0: emac-rgmii@ef600b00 {
				compatible = "ibm,rgmii-405ex", "ibm,rgmii";
				reg = <0xef600b00 0x104>;
				has-mdio;
			};

			EMAC0: ethernet@ef600900 {
				linux,network-index = <0>;
				device_type = "network";
				compatible = "ibm,emac-405ex", "ibm,emac4";
				interrupt-parent = <&EMAC0>;
				interrupts = <0 1>;
				#interrupt-cells = <1>;
				#address-cells = <0>;
				#size-cells = <0>;
				interrupt-map = </*Status*/ 0x0 &UIC0 0x18 0x4
						/*Wake*/  0x1 &UIC1 0x1d 0x4>;
				reg = <0xef600900 0x70>;
				local-mac-address = [000000000000]; /* Filled in by U-Boot */
				mal-device = <&MAL0>;
				mal-tx-channel = <0>;
				mal-rx-channel = <0>;
				cell-index = <0>;
				max-frame-size = <0x2328>;
				rx-fifo-size = <0x1000>;
				tx-fifo-size = <0x800>;
				phy-mode = "rgmii";

				phy-map = <0xffffffff>;
				phy-address = <0x1f>;

				rgmii-device = <&RGMII0>;
				rgmii-channel = <0>;
				has-inverted-stacr-oc;
				has-new-stacr-staopc;
			};

			EMAC1: ethernet@ef600a00 {
				linux,network-index = <1>;
				device_type = "network";
				compatible = "ibm,emac-405ex", "ibm,emac4";
				interrupt-parent = <&EMAC1>;
				interrupts = <0 1>;
				#interrupt-cells = <1>;
				#address-cells = <0>;
				#size-cells = <0>;
				interrupt-map = </*Status*/ 0x0 &UIC0 0x19 0x4
						/*Wake*/  0x1 &UIC1 0x1f 0x4>;
				reg = <0xef600a00 0x70>;
				local-mac-address = [000000000000]; /* Filled in by U-Boot */
				mal-device = <&MAL0>;
				mal-tx-channel = <1>;
				mal-rx-channel = <1>;
				cell-index = <1>;
				max-frame-size = <0x2328>;
				rx-fifo-size = <0x1000>;
				tx-fifo-size = <0x800>;
				phy-mode = "rgmii";

				phy-map = <0x00000001>;
				phy-address = <1>;

				rgmii-device = <&RGMII0>;
				rgmii-channel = <1>;
				has-inverted-stacr-oc;
				has-new-stacr-staopc;
			};
		};

	};
};

@endcode

(Which may now be out of date but was the DTS for ECB boards)

<hr>
\section osbuild_sec_8_1 NANDFLASH
<hr>

I've been looking at how the nandflash driver(s) work  to provide the flash interface so that we can use larger devices.
I thought it would be worth documenting how this works for future reference.

The PPC405EX has an in built nandflash controller which needs to be configured for use. To do this, the device tree
needs to have an entry 'ndfc' on the external bus. This makes the Linux kernel instantiate and initialise the ndfc driver
(located in drivers/mtd/nand/ndfc.c) where the device tree parameters are used to initialise the hardware.

The ndfc driver itself then looks for child entries in the device tree. It assumes that any children represent
nandflash parts and calls nand_scan() (from drivers/mtd/nand/nand_base.c) to probe the physical device to read the ID information,
load any ONFI data if present, and set up ECC if there are no entries.

For ECC, the PPC405EX nandflash controller has hardware support for 1-bit ECC. On any nandflash access it provides
a calculated ECC in 3 bytes, and ECC callback functions (in drivers/mtd/nand/nand_ecc.c) are passed these values
and use them to check and correct any errors.

So the standard ndfc.c driver code sets up for hardware error correction using 3 bytes, with a strength of 1 (i.e. 1 bit
correction).

<hr>
\section osbuild_sec_8_2 Fpga IRQ Handling
<hr>

The FPGA is connected to external IRQ0 of the PowerPC. In order to install an interupt handler for this IRQ we need a device driver (interrupt handling can only
be handled by privileged code in the kernel).

The device driver is written as a platform device so that it can access the device tree information (more on this later). The device driver is written as a character
device providing a file based interface that the user space code can access. Since the single IRQ line may be caused by one or more interrupt sources determined by the
fpga, I've written the driver so that it creates a device file for each of the interrupt source "bits". If you imagine the FPGA's interrupt enable register bits, then there
is a device file for each of these bits, starting at bit 0 (being represented by "/dev/fpga-irq.0").

\subsection osbuild_sec_8_2_1 Device Tree
<hr>

@code
	fpgairq@2,0 {
		compatible = "axis,fpga-irq" ;

		/* CS (Note: Don't use 'reg' here since irq_of_map_and_parse() would expect a valid full address) */
		cs = <1>;

		/* UIC0 Int9 IRQ0; Flags 8 = Active low level */
		#interrupt-cells = <2>;
		interrupts = <9 8>;
		interrupt-parent = <&UIC0>;

	};
@endcode

The device driver is named "fpga-irq" and needs to be configured  via the device tree as shown above. It uses the standard mechanism for defining interrupts and the settings shown
will configure the PowerPC UIC0 correctly for external IRQ0 (which is actually UIC0 Int9).

Setting <i>#interrupt-cells</i> to 2 means thhat the <i>interrupts</i> setting uses the format: interrupt number, interrupt flag. In the case shown we have interrupt number = 9, and
interrupt flag = 8

The interrupt flag values are:

\li 1 = low to high edge
\li 2 = high to low edge
\li 4 = active high level
\li 8 = active low level
\li 0 = leave default setting

The <i>cs</i> parameter is used to specify which chip select to use when mapping the fpga registers for this device to use (for enabling/disabling the interrupts)


\subsection osbuild_sec_8_2_2 GPIO
<hr>

As stated earlier, the IRQ used is external IRQ0. Access to this input pin is controlled via the GPIO control registers (LS bit). To ensure the correct settings, when the device
driver initialises it sets the following:

@code
GPIO0_OSRH[30:31] = xx
GPIO0_TSRH[30:31] = 10b
GPIO_ISR2H[30:31] = 01b
@endcode

Note that you can disable the interrupt by switching the input signal to use RR2 instead of the input pin (set GPIO0_ISR2H[30:31] = 00b), then set RR2 LS bit to 1

\subsection osbuild_sec_8_2_3 Code "Classes"
<hr>

Although the device driver has been written in C, an object-oriented approach was taken. Each file contains a "class" which has a constructor, destructor, and then methods on that
"class" all of which take the pointer to the class object as the first parameter.

Also, to ensure there is no inadvertent access to methods/data that wasn't intended, each of the classes provides an opaque pointer type (a typedef of void*) which is used externally
from the class file. The actual class structure being kept hidden inside the file.

\image html fpga-irq-flow.png IRQ Handling

The diagram above shows a top-level view of how an interrupt is handled. It is immediately processed by the installed interrupt handler, which simply schedules the actual processing
on a work queue that it's tasklet then handles. The IRQ tasklet will be scheduled by the kernel once the interrupt handler returns, and this tasklet determines which of the device
handlers should be triggered, based on the state of the FPGA interrupt status register.

There is a device handler instance for each of the FPGA status register bits. Remember that this manifests as there being a device "file" for each of the bits: /dev/fpga-irq.0 for bit 0, /dev/fpga-irq.1 for bit 1 and so on. A device handler "object" is created to handle each of the FPGA status bits when the device is created.

When the tasklet "triggers" a device handler, what it's actually doing is creating an entry on the device handler's work queue. This entry consists of the timestamp of the interrupt, and the state of the interrupt status bits. The same entry is created for each of the device handlers that need to be triggered i.e. for every active interrupt status bit.

The device handlers themselves don't actually interact with user code. That's the job of the "listener objects". When the user code opens a particular device (e.g. "/dev/fpga-irq.0"), a new listener object is created and added to that device handler's listener list (in this example it will be added to the device handler for bit 0). When an interrupt
occurs, the work queue entry passed down from the tasklet to the device handlers will then be replicated to all of the listener objects managed by the triggered device handler.

The final part of the flow is where the user code performs a read() on the device. Then the listener object will provide the qork queue entry data in the form of a line of text consisting simply of the timestamp formatted as a floating point value in seconds and terminated by a newline.

\image html fpga-irq-hier.png Class Files

The diagram above shows the source files which contain each of the object classes. It also illustrates the location of the work queues (and a wait queue used by the listener).


\subsection osbuild_sec_8_2_4 User Code Example
<hr>

The device driver has been written to support by read() and select() / poll() / epoll() operations. It does not support write() or ioctl().

The simplest method for using the device is to sit in a loop blockng on read(). As soon as an interrupt occurs read() will return with the timestamp of the interrupt.

@code
	int fd = ::open("/dev/fpga-irq.0", o_RDONLY) ;

	// block until IRQ
	char buff[128] ;
	int num = ::read(fd, buff, sizeof(buff)) ;

	// handle the interrupt...
@endcode

As an alternative, you can use select() to wait for the interrupt to provide read data. The advantage of using select() is that it then allows you to respond to other stimulus (for example to trigger a check for program exit or file closing etc)

@code
	int fd = ::open("/dev/fpga-irq.0", o_RDONLY) ;

	int nfds = 0 ;
	fd_set fds ;
	FD_ZERO(&fds) ;

	FD_SET(fd, &fds) ;
	if (fd >= nfds)
		nfds = mDfdevFd + 1 ;

	// assume controlFd is the file descriptor to something that we can send data to in
	// order to exit select() so that the code can check for exit
	FD_SET(controlFd, &fds) ;
	if (controlFd >= nfds)
		nfds = controlFd + 1 ;


	// block until IRQ or control
	int rc = ::select(nfds, &fds, NULL, NULL, NULL) ;

	// handle control
	if (FD_ISSET(controlFd, &fds))
	{
		// handle control wake up...
	}

	// handle IRQ
	if (FD_ISSET(fd, &fds))
	{
		char buff[128] ;
		int num = ::read(fd, buff, sizeof(buff)) ;

		// handle the interrupt...
	}
@endcode

<hr>
\section osbuild_sec_8_3 Manual Nand Flash Format
<hr>

To manually reflash the the nand flash you need to perform the following commands at the Linux command line.

Use the following commands to format the flash then remount it:

\code
	# un mount the file system
	umount /nandflash

	# get the block number - usually 'mtd7'
	grep filesystem /proc/mtd | sed -e 's/:.*//'

	# use the block number from previous command in all subsequent commands
	ubidetach -p /dev/mtd7

	# erase and format
	flash_erase /dev/mtd7 0 0
	ubiformat -y -e 0 /dev/mtd7

    # Ensure nodes are created if not present
    if [ ! -c /dev/ubi_ctrl ]
    then
		mknod /dev/ubi_ctrl c $(cat /sys/class/misc/ubi_ctrl/dev | sed -e 's/:/ /')
    fi

	# Need to attach UBI to mtd and then mount the volume
	ubiattach -p /dev/mtd7

	## Create the maximum size possible
	ubimkvol /dev/ubi0 -N flash -m

	# mount the file system
	mount -o rw -t ubifs ubi0:flash /nandflash

	# Mark flash as formatted for UBIFS
	touch /nandflash/.fmt3
\endcode

<hr>
\section osbuild_sec_9 Build Directories
<hr>

When an OS is built, the results end up in a board ssub-directory under the 'build' directory. The directories created
are described below:

\subsection osbuild_sec_9_1 apps

Build location for the Open M-Plane applications installed as part of the OS (e.g. prog-fpga)

\subsection osbuild_sec_9_2 host-tools

Install location for any cross-compiled host utilities (e.g. gdb)

\subsection osbuild_sec_9_3 images

Contains the DTB, pImage, and uboot image for each build.

\subsection osbuild_sec_9_4 kernel

Linux kernel build area

\subsection osbuild_sec_9_5 kernel-modules

Area for building Open M-Plane kernel modules (if any)

\subsection osbuild_sec_9_6 Linux-ppc

Install area for target programs. Contains directory 'install' for all programs installed into OS by default. Also contains
directory 'dev-install' for any developer tools that the application can optionally install.

\subsection osbuild_sec_9_7 make

Contains a .mk makefile include file which passes OS environment variables to the application make

\subsection osbuild_sec_9_8 packages

Contains the final tarball for the OS builds

\subsection osbuild_sec_9_9 rootfs

This contains the root filesystem that will be installed onto the board.

\subsection osbuild_sec_9_10 tools

Build area for build tools. For example the toolchain is "installed" and built here and the toolchain gcc is also installed
here.

\subsection osbuild_sec_9_11 utils

Build area for target board utilties (e.g. busybox, mtd-utils etc)

<hr>
\section osbuild_sec_10 Host Build
<hr>

A new addition to the ros makefile is configuration for the pseudo-board 'HOST'. This is used to build a subset of
the targets so that the code can be built and run on local machines using the same compiler as used on the boards
(GCC 4.8.1).

Before anything else, the new compiler must be built using crosstools-ng. The target is 'toolchain' for the 'HOST' board:

@code
$ make toolchain BUILD_BOARD=HOST
@endcode

Once this completes we have a 64-bit version of the 4.8.1 compiler stored under build/HOST. The full path for the compiler
is stored in the make include file: build/HOST/make/x86_64.mk

This file is included into the application makefile for local builds.

Also, the application uses some XML library calls via tinyxml2 which must also be compiled using the new compiler:

@code
$ make xml BUILD_BOARD=HOST
@endcode

Once these have been compiled in the ros, then the local application builds can be run.

Also note that using this newer compiler also allows us to enable C++11 support.

In order to build executables with these libraries, we use the $(DEVTOOLS_INSTALLDIR). Note that the application build
makefiles have been set up so that the common makefile (included in all repository makefiles) automatically sets up the
compile and link flasg in order to access these libs.

Note also that this is true both for local builds and for board builds.

\subsection osbuild_sec_10_1 Host Build Debugger
<hr>

Once you've changed to using the locally built C++ compiler you then need to compile gdb and modify the gdb settings to allow the debugger
to access the new libraries.

To compile the latest gdb using our new toolchain you need to run 'make local-gdb' in the 'buildTools/autotools' directory
(or just run 'make local-bootstrap' to build everything required, including libraries etc).

To modify the gdb settings you need to specify settings for add-auto-load-safe-path and libthread-db-search-path:

@code
add-auto-load-safe-path ~/git/ros/build/HOST/tools/linux-3.10.2-gcc-4.8.1-glibc-2.17/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/lib64/
set libthread-db-search-path ~/git/ros/build/HOST/tools/linux-3.10.2-gcc-4.8.1-glibc-2.17/x86_64-unknown-linux-gnu/x86_64-unknown-linux-gnu/lib64/
@endcode

NOTE: If you use the buildTools make it will automatically create a gdb file for you in:

@code
~/git/buildTools/autotools/gdbinit
@endcode

You can then point the Eclipse debugger at this init file.

<hr>
\section osbuild_sec_11 Boot Timing
<hr>

There are a few techniques you can use to benchmark the boot timings of the latest kernel. Using these timings you can
then determine which area(s) need most attention and whether your changes have improved things (or made them worse!)

\subsection osbuild_sec_11_1 Boot Timestamps
<hr>

The kernel is configured to output all messages (printk) with a timestamp. The init script rc.sh also adds a simple
timestamp to all of it's messages. Using this information you can quickly see what takes time during start up.

\subsection osbuild_sec_11_2 Bootgraph
<hr>

The kernel authors wrote a Perl script that can process the initcalls displayed on boot (or in dmesg) if 'initcall_debug'
option is specified as a kernel boot argument.

To use this, you need to break into u-boot console (reboot then keep hitting return until you see the u-boot '=>' prompt).
Then do:

@code
=>printenv
...
bootargs=root=/dev/ram rw console=ttyS0,115200
...

=>setenv bootargs ${bootargs} initcall_debug

=>printenv
...
bootargs=root=/dev/ram rw console=ttyS0,115200 initcall_debug
...

=>saveenv

=> run boot1

@endcode

When the board haas booted, run dmesg into a file and copy the file back to your host machine. You can then run the
perl script (stored in ros/benchmark/bootgraph/bootgraph.pl):

@code
perl ~/git/ros/benchmark/bootgraph/bootgraph.pl dmesg.txt
@endcode

This produces an SVG file that you can view using firefox.


\subsection osbuild_sec_11_3 Bootchart
<hr>

Busybox is configured to provide bootchartd a background daemon that replaces init and gathers boot timing information
as the board boots up. When the board has booted you end up with a file '/var/log/bootlog.tgz'. If you copy this file
back to your host machine you can then run the analysis tool on it:

@code
bootchart bootlog.tgz
@endcode

I've added a hacked version of pybootchartgui into ros/benchmark/pybootchartgui as the script 'bootchartgui'. You run it
as:

@code
$ ./bootchartgui bootlog.tgz --o chart.png
@endcode

(Note I needed to make changes to the Python to allow it to read our cutdown bootcharts since embedded systems have a lot
fewer resources than the Python script expects!)

To enable bootchart you need to specify it as a kernel start up option. Change it via the u-boot prompt:

@code
=>printenv
...
bootargs=root=/dev/ram rw console=ttyS0,115200
...

=>setenv bootargs ${bootargs} rdinit=/sbin/bootchartd

=>printenv
...
bootargs=root=/dev/ram rw console=ttyS0,115200 rdinit=/sbin/bootchartd
...

=>saveenv

=> run boot1

@endcode

Examples of the sort of output are shown below.

\image html bootchart.png

This shows the boot time after switching the filesystem to UBIFS, but before making various init script and kernel changes.

\image html bootchart-os126.png

This shows the boot after making various changes.


*/
