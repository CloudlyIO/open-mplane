#!/bin/sh
#
# Unpack application tarball
#

action="${1:-start}"
flashRoot=/nandflash
appRoot=/usr/local
flashData=${flashRoot}/data

##----------------------------------------------------------------------------------------------------------------------
# handle error
##----------------------------------------------------------------------------------------------------------------------
errorMsg()
{
    echo >&2 "******* $@ *******"
}

##----------------------------------------------------------------------------------------------------------------------
# log a message
##----------------------------------------------------------------------------------------------------------------------
logMsg()
{
	msg="[$(date +%T)] $*"
	echo "$msg"
}

##----------------------------------------------------------------------------------------------------------------------
# loadTar($dir, $name, $dest)
# Try to load up the tarball from the named
# subdirectory. On success sets the global
# $LOADED_TARBALL to the full path of the
# loaded tar
##----------------------------------------------------------------------------------------------------------------------
LOADED_TARBALL=
loadTar()
{
    dir=${1:-app-images}
    name=${2:-application}
    dest=${3:-/}

    LOADED_TARBALL=
    LOADED_TEST_VERSION=0

    logMsg "checking for suitable $name"
    logMsg "flashRoot=$flashRoot"

    ## Use test image in preference to any other
    if [ -L $flashRoot/$dir/TEST ] ; then
    	# Check link points to a file that exists
	    actual=$(readlink $flashRoot/$dir/TEST)
	    if [ -n "$actual" ] ; then
		    if [ -e $actual ] ; then
		    	logMsg "** Using TEST version of $name **"
			    LOADED_TARBALL=$actual
			    LOADED_TEST_VERSION=1
		    fi
	    fi
    fi

	## if not got test then use ram image
	if [ -z "$LOADED_TARBALL" ]
	then
		imagesDir=/images
	    LOADED_TARBALL=$(readlink $imagesDir/$dir/current)
	fi



	## if not got an image then use flash image - try current first
	if [ -z "$LOADED_TARBALL" ]
	then
	    if [ ! -e $flashRoot/$dir/current ] ; then

	        logMsg "No current $name image found - checking for previous"

	        if [ -f $flashRoot/$dir/previous ] ; then

	            logMsg "Previous $name image found - moving to current"

	            # read the old link
	            oldLink=$(readlink $flashRoot/$dir/previous)

	            # now create a new current link
	            ln -sf $oldLink $flashRoot/$dir/current
	        else

	            logMsg "No previous image found...searching for alternative.."

	            # no previous image found. Search for one that *might* work!
	            img=$(ls $flashRoot/$dir/*.tar $flashRoot/$dir/*.tgz | head -1)

	            if [ ${#img} -gt 0 ]; then

	                logMsg "Found a possible app image : $img"

	                # make the app image we've located the current
	                ln -sf $img $flashRoot/$dir/current

	            else
	                logMsg "No $name images found"
	            fi
	        fi
	    fi

	    LOADED_TARBALL=$(readlink $flashRoot/$dir/current)
	fi

logMsg " about to unpack..."


    # unpack the tarball. Simple as possible for now!
    if [ ! -z "$LOADED_TARBALL" ]
    then

	    logMsg  Unpacking $name....
	    # support "tar" being a directory to be copied
	    if [ -d $LOADED_TARBALL ]
	    then
	    	cp -a $LOADED_TARBALL $dest
	    else
    		tar xf $LOADED_TARBALL -C $dest
    	fi
	    logMsg  $name unpacked

	fi

logMsg " done"
}

##----------------------------------------------------------------------------------------------------------------------
# start()
# run init files and app init files
##----------------------------------------------------------------------------------------------------------------------
start()
{

    ## Unpack application
	logMsg "Start loading app"
    loadTar app-images application /
    appImg=$LOADED_TARBALL

    ## Unpack fpga
	logMsg "Start loading fpga"
    loadTar fpga-images fpga /tmp
    fpgaImg=$LOADED_TARBALL

	fpgaBin=
	if [ -z "$fpgaImg" ]
	then
        logMsg "No FPGA image found..."

    else

    	# Extracted from an existing tar, so find the bin file
    	fpgaBin=$(ls /tmp/*.bin /tmp/*.bit | head -1)

    fi

    # load the manifest containing the fpga build number
    uBlazeVersion=
    BuildNumber=
    if [ -f /tmp/manifest ]
    then
    	. /tmp/manifest
    fi

    # program fpga - the required programming file will be in /tmp
    if [ -f "$fpgaBin" ]
    then
	    logMsg "Programming the FPGA"
	    results=$(prog-fpga $fpgaBin)
    	logMsg "$results"

    	# tidy up
    	rm -rf /tmp/manifest /tmp/current $fpgaBin /tmp/build* /tmp/img 2>/dev/null

    fi

}

##----------------------------------------------------------------------------------------------------------------------
# stop()
##----------------------------------------------------------------------------------------------------------------------
stop()
{
    : # nothing special to do
}



##=== MAIN =============================================================================================================

case $action in
    start)
		start
	;;
    stop)
		stop
	;;
    restart)
		stop
		start
	;;
    *)
	echo >&2 "$0 - Unknown action $action"
esac


