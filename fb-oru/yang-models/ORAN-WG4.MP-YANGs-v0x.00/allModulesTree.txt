module: iana-hardware

module: iana-if-type

module: ietf-crypto-types

  grouping public-key-grouping:
    +--rw algorithm?  asymmetric-key-algorithm-ref
    +--rw public-key? binary
  grouping asymmetric-key-pair-grouping:
    +--rw algorithm?           asymmetric-key-algorithm-ref
    +--rw public-key?          binary
    +--rw private-key?         union
    +---x generate-hidden-key  
    |  +---w input   
    |     +---w algorithm  asymmetric-key-algorithm-ref
    +---x install-hidden-key   
       +---w input   
          +---w algorithm    asymmetric-key-algorithm-ref
          +---w public-key?  binary
          +---w private-key? binary
  grouping trust-anchor-cert-grouping:
    +--rw cert?                   trust-anchor-cert-cms
    +---n certificate-expiration  
       +--rw expiration-date  yang:date-and-time
  grouping trust-anchor-certs-grouping:
    +--rw cert*                   trust-anchor-cert-cms
    +---n certificate-expiration  
       +--rw expiration-date  yang:date-and-time
  grouping end-entity-cert-grouping:
    +--rw cert?                   end-entity-cert-cms
    +---n certificate-expiration  
       +--rw expiration-date  yang:date-and-time
  grouping end-entity-certs-grouping:
    +--rw cert*                   end-entity-cert-cms
    +---n certificate-expiration  
       +--rw expiration-date  yang:date-and-time
  grouping asymmetric-key-pair-with-cert-grouping:
    +--rw algorithm?                            asymmetric-key-algorithm-ref
    +--rw public-key?                           binary
    +--rw private-key?                          union
    +---x generate-hidden-key                   
    |  +---w input   
    |     +---w algorithm  asymmetric-key-algorithm-ref
    +---x install-hidden-key                    
    |  +---w input   
    |     +---w algorithm    asymmetric-key-algorithm-ref
    |     +---w public-key?  binary
    |     +---w private-key? binary
    +--rw cert?                                 end-entity-cert-cms
    +---n certificate-expiration                
    |  +--rw expiration-date  yang:date-and-time
    +---x generate-certificate-signing-request  
       +---w input   
       |  +---w subject     binary
       |  +---w attributes? binary
       +--ro output  
          +--ro certificate-signing-request  binary
  grouping asymmetric-key-pair-with-certs-grouping:
    +--rw algorithm?                            asymmetric-key-algorithm-ref
    +--rw public-key?                           binary
    +--rw private-key?                          union
    +---x generate-hidden-key                   
    |  +---w input   
    |     +---w algorithm  asymmetric-key-algorithm-ref
    +---x install-hidden-key                    
    |  +---w input   
    |     +---w algorithm    asymmetric-key-algorithm-ref
    |     +---w public-key?  binary
    |     +---w private-key? binary
    +--rw certificates
    |  +--rw certificate* [name]
    |     +--rw name                    string
    |     +--rw cert?                   end-entity-cert-cms
    |     +---n certificate-expiration  
    |        +--rw expiration-date  yang:date-and-time
    +---x generate-certificate-signing-request  
       +---w input   
       |  +---w subject     binary
       |  +---w attributes? binary
       +--ro output  
          +--ro certificate-signing-request  binary

module: ietf-dhcpv6-types

  grouping vendor-infor:
    +--rw vendor-info
       +--rw ent-num  uint32
       +--rw data*    string
  grouping duid:
    +--rw type-code?                 uint16
    +--rw (duid-type)?
       +--:(duid-llt)
       |  +--rw duid-llt-hardware-type?    uint16
       |  +--rw duid-llt-time?             yang:timeticks
       |  +--rw duid-llt-link-layer-addr?  yang:mac-address
       +--:(duid-en)
       |  +--rw duid-en-enterprise-number? uint32
       |  +--rw duid-en-identifier?        string
       +--:(duid-ll)
       |  +--rw duid-ll-hardware-type?     uint16
       |  +--rw duid-ll-link-layer-addr?   yang:mac-address
       +--:(duid-uuid)
       |  +--rw uuid?                      yang:uuid
       +--:(duid-unknown)
          +--rw data?                      binary
  grouping portset-para:
    +--rw port-parameter
       +--rw offset    uint8
       +--rw psid-len  uint8
       +--rw psid      uint16
  grouping iaid:
    +--ro identity-association*
       +--ro iaid                uint32
       +--ro ia-type             string
       +--ro ipv6-addr*          inet:ipv6-address
       +--ro ipv6-prefix*        inet:ipv6-prefix
       +--ro prefix-length*      uint8
       +--ro t1-time             yang:timeticks
       +--ro t2-time             yang:timeticks
       +--ro preferred-lifetime  yang:timeticks
       +--ro valid-lifetime      yang:timeticks

module: ietf-hardware
  +--rw hardware
     +--ro last-change? yang:date-and-time
     +--rw component* [name]
        +--rw name                            string
        +--rw class                           identityref
        +--ro physical-index?                 int32 {entity-mib}?
        +--ro description?                    string
        +--rw parent?                         leafref
        +--rw parent-rel-pos?                 int32
        +--ro contains-child*                 leafref
        +--ro hardware-rev?                   string
        +--ro firmware-rev?                   string
        +--ro software-rev?                   string
        +--ro serial-num?                     string
        +--ro mfg-name?                       string
        +--ro model-name?                     string
        +--rw alias?                          string
        +--rw asset-id?                       string
        +--ro is-fru?                         boolean
        +--ro mfg-date?                       yang:date-and-time
        +--rw uri*                            inet:uri
        +--ro uuid?                           yang:uuid
        +--rw state {hardware-state}?
        |  +--ro state-last-changed?          yang:date-and-time
        |  +--rw admin-state?                 admin-state
        |  +--ro oper-state?                  oper-state
        |  +--ro usage-state?                 usage-state
        |  +--ro alarm-state?                 alarm-state
        |  +--ro standby-state?               standby-state
        |  +--ro o-ran-hw:power-state?        energysaving-state {ENERGYSAVING}?
        |  +--ro o-ran-hw:availability-state? availability-type
        +--ro sensor-data {hardware-sensor}?
        |  +--ro value?             sensor-value
        |  +--ro value-type?        sensor-value-type
        |  +--ro value-scale?       sensor-value-scale
        |  +--ro value-precision?   sensor-value-precision
        |  +--ro oper-status?       sensor-status
        |  +--ro units-display?     string
        |  +--ro value-timestamp?   yang:date-and-time
        |  +--ro value-update-rate? uint32
        +--ro o-ran-hw:label-content
        |  +--ro o-ran-hw:model-name?    boolean
        |  +--ro o-ran-hw:serial-number? boolean
        +--ro o-ran-hw:product-code           string
        +--rw o-ran-hw:energy-saving-enabled? boolean {ENERGYSAVING}?
        +--rw o-ran-hw:o-ran-name             leafref

  notifications:
    +---n hardware-state-change         
    +---n hardware-state-oper-enabled    {hardware-state}?
    |  +--ro name?                        leafref
    |  +--ro admin-state?                 leafref
    |  +--ro alarm-state?                 leafref
    |  +--ro o-ran-hw:availability-state? leafref
    +---n hardware-state-oper-disabled   {hardware-state}?
       +--ro name?                        leafref
       +--ro admin-state?                 leafref
       +--ro alarm-state?                 leafref
       +--ro o-ran-hw:availability-state? leafref

module: ietf-inet-types

module: ietf-interfaces
  +--rw interfaces
  |  +--rw interface* [name]
  |     +--rw name                        string
  |     +--rw description?                string
  |     +--rw type                        identityref
  |     +--rw enabled?                    boolean
  |     +--rw link-up-down-trap-enable?   enumeration {if-mib}?
  |     +--ro admin-status                enumeration {if-mib}?
  |     +--ro oper-status                 enumeration
  |     +--ro last-change?                yang:date-and-time
  |     +--ro if-index                    int32 {if-mib}?
  |     +--ro phys-address?               yang:phys-address
  |     +--ro higher-layer-if*            interface-ref
  |     +--ro lower-layer-if*             interface-ref
  |     +--ro speed?                      yang:gauge64
  |     +--ro statistics
  |     |  +--ro discontinuity-time  yang:date-and-time
  |     |  +--ro in-octets?          yang:counter64
  |     |  +--ro in-unicast-pkts?    yang:counter64
  |     |  +--ro in-broadcast-pkts?  yang:counter64
  |     |  +--ro in-multicast-pkts?  yang:counter64
  |     |  +--ro in-discards?        yang:counter32
  |     |  +--ro in-errors?          yang:counter32
  |     |  +--ro in-unknown-protos?  yang:counter32
  |     |  +--ro out-octets?         yang:counter64
  |     |  +--ro out-unicast-pkts?   yang:counter64
  |     |  +--ro out-broadcast-pkts? yang:counter64
  |     |  +--ro out-multicast-pkts? yang:counter64
  |     |  +--ro out-discards?       yang:counter32
  |     |  +--ro out-errors?         yang:counter32
  |     +--rw ip:ipv4!
  |     |  +--rw ip:enabled?                  boolean
  |     |  +--rw ip:forwarding?               boolean
  |     |  +--rw ip:mtu?                      uint16
  |     |  +--rw ip:address* [ip]
  |     |  |  +--rw ip:ip             inet:ipv4-address-no-zone
  |     |  |  +--rw (subnet)
  |     |  |  |  +--:(prefix-length)
  |     |  |  |  |  +--rw ip:prefix-length? uint8
  |     |  |  |  +--:(netmask)
  |     |  |  |     +--rw ip:netmask?       yang:dotted-quad {ipv4-non-contiguous-netmasks}?
  |     |  |  +--ro ip:origin?        ip-address-origin
  |     |  +--rw ip:neighbor* [ip]
  |     |  |  +--rw ip:ip                  inet:ipv4-address-no-zone
  |     |  |  +--rw ip:link-layer-address  yang:phys-address
  |     |  |  +--ro ip:origin?             neighbor-origin
  |     |  +--rw o-ran-int:m-plane-marking?   inet:dscp
  |     |  +--rw o-ran-int:diffserv-markings {UDPIP-BASED-CU-PLANE}?
  |     |     +--rw o-ran-int:u-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:c-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:s-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:other-marking?            inet:dscp
  |     |     +--rw o-ran-int:enhanced-uplane-markings* [up-marking-name]
  |     |        +--rw o-ran-int:up-marking-name   string
  |     |        +--rw o-ran-int:enhanced-marking? inet:dscp
  |     +--rw ip:ipv6!
  |     |  +--rw ip:enabled?                   boolean
  |     |  +--rw ip:forwarding?                boolean
  |     |  +--rw ip:mtu?                       uint32
  |     |  +--rw ip:address* [ip]
  |     |  |  +--rw ip:ip             inet:ipv6-address-no-zone
  |     |  |  +--rw ip:prefix-length  uint8
  |     |  |  +--ro ip:origin?        ip-address-origin
  |     |  |  +--ro ip:status?        enumeration
  |     |  +--rw ip:neighbor* [ip]
  |     |  |  +--rw ip:ip                  inet:ipv6-address-no-zone
  |     |  |  +--rw ip:link-layer-address  yang:phys-address
  |     |  |  +--ro ip:origin?             neighbor-origin
  |     |  |  +--ro ip:is-router?          empty
  |     |  |  +--ro ip:state?              enumeration
  |     |  +--rw ip:dup-addr-detect-transmits? uint32
  |     |  +--rw ip:autoconf
  |     |  |  +--rw ip:create-global-addresses?      boolean
  |     |  |  +--rw ip:create-temporary-addresses?   boolean {ipv6-privacy-autoconf}?
  |     |  |  +--rw ip:temporary-valid-lifetime?     uint32 {ipv6-privacy-autoconf}?
  |     |  |  +--rw ip:temporary-preferred-lifetime? uint32 {ipv6-privacy-autoconf}?
  |     |  +--rw o-ran-int:m-plane-marking?    inet:dscp
  |     |  +--rw o-ran-int:diffserv-markings {UDPIP-BASED-CU-PLANE}?
  |     |     +--rw o-ran-int:u-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:c-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:s-plane-marking?          inet:dscp
  |     |     +--rw o-ran-int:other-marking?            inet:dscp
  |     |     +--rw o-ran-int:enhanced-uplane-markings* [up-marking-name]
  |     |        +--rw o-ran-int:up-marking-name   string
  |     |        +--rw o-ran-int:enhanced-marking? inet:dscp
  |     +--rw o-ran-int:l2-mtu?           uint16
  |     +--rw o-ran-int:vlan-tagging?     boolean
  |     +--rw o-ran-int:class-of-service
  |     |  +--rw o-ran-int:u-plane-marking?          pcp
  |     |  +--rw o-ran-int:c-plane-marking?          pcp
  |     |  +--rw o-ran-int:m-plane-marking?          pcp
  |     |  +--rw o-ran-int:s-plane-marking?          pcp
  |     |  +--rw o-ran-int:other-marking?            pcp
  |     |  +--rw o-ran-int:enhanced-uplane-markings* [up-marking-name]
  |     |     +--rw o-ran-int:up-marking-name   string
  |     |     +--rw o-ran-int:enhanced-marking? pcp
  |     +--rw o-ran-int:base-interface?   if:interface-ref
  |     +--rw o-ran-int:vlan-id?          uint16
  |     +--ro o-ran-int:last-cleared?     yang:date-and-time
  |     +--rw o-ran-int:alias-macs*       yang:mac-address {ALIASMAC-BASED-CU-PLANE}?
  |     +--rw o-ran-int:mac-address?      yang:mac-address
  |     +--rw o-ran-int:port-reference
  |        +--rw o-ran-int:port-name?   leafref
  |        +--rw o-ran-int:port-number? uint8
  x--ro interfaces-state
     x--ro interface* [name]
        x--ro name             string
        x--ro type             identityref
        x--ro admin-status     enumeration {if-mib}?
        x--ro oper-status      enumeration
        x--ro last-change?     yang:date-and-time
        x--ro if-index         int32 {if-mib}?
        x--ro phys-address?    yang:phys-address
        x--ro higher-layer-if* interface-state-ref
        x--ro lower-layer-if*  interface-state-ref
        x--ro speed?           yang:gauge64
        x--ro statistics
        |  x--ro discontinuity-time  yang:date-and-time
        |  x--ro in-octets?          yang:counter64
        |  x--ro in-unicast-pkts?    yang:counter64
        |  x--ro in-broadcast-pkts?  yang:counter64
        |  x--ro in-multicast-pkts?  yang:counter64
        |  x--ro in-discards?        yang:counter32
        |  x--ro in-errors?          yang:counter32
        |  x--ro in-unknown-protos?  yang:counter32
        |  x--ro out-octets?         yang:counter64
        |  x--ro out-unicast-pkts?   yang:counter64
        |  x--ro out-broadcast-pkts? yang:counter64
        |  x--ro out-multicast-pkts? yang:counter64
        |  x--ro out-discards?       yang:counter32
        |  x--ro out-errors?         yang:counter32
        x--ro ip:ipv4!
        |  x--ro ip:forwarding? boolean
        |  x--ro ip:mtu?        uint16
        |  x--ro ip:address* [ip]
        |  |  x--ro ip:ip             inet:ipv4-address-no-zone
        |  |  x--ro (subnet)?
        |  |  |  +--:(prefix-length)
        |  |  |  |  x--ro ip:prefix-length? uint8
        |  |  |  +--:(netmask)
        |  |  |     x--ro ip:netmask?       yang:dotted-quad {ipv4-non-contiguous-netmasks}?
        |  |  x--ro ip:origin?        ip-address-origin
        |  x--ro ip:neighbor* [ip]
        |     x--ro ip:ip                  inet:ipv4-address-no-zone
        |     x--ro ip:link-layer-address? yang:phys-address
        |     x--ro ip:origin?             neighbor-origin
        x--ro ip:ipv6!
           x--ro ip:forwarding? boolean
           x--ro ip:mtu?        uint32
           x--ro ip:address* [ip]
           |  x--ro ip:ip             inet:ipv6-address-no-zone
           |  x--ro ip:prefix-length  uint8
           |  x--ro ip:origin?        ip-address-origin
           |  x--ro ip:status?        enumeration
           x--ro ip:neighbor* [ip]
              x--ro ip:ip                  inet:ipv6-address-no-zone
              x--ro ip:link-layer-address? yang:phys-address
              x--ro ip:origin?             neighbor-origin
              x--ro ip:is-router?          empty
              x--ro ip:state?              enumeration

module: ietf-ip

  augment /if:interfaces/if:interface:
    +--rw ipv4!
    |  +--rw enabled?    boolean
    |  +--rw forwarding? boolean
    |  +--rw mtu?        uint16
    |  +--rw address* [ip]
    |  |  +--rw ip             inet:ipv4-address-no-zone
    |  |  +--rw (subnet)
    |  |  |  +--:(prefix-length)
    |  |  |  |  +--rw prefix-length? uint8
    |  |  |  +--:(netmask)
    |  |  |     +--rw netmask?       yang:dotted-quad {ipv4-non-contiguous-netmasks}?
    |  |  +--ro origin?        ip-address-origin
    |  +--rw neighbor* [ip]
    |     +--rw ip                  inet:ipv4-address-no-zone
    |     +--rw link-layer-address  yang:phys-address
    |     +--ro origin?             neighbor-origin
    +--rw ipv6!
       +--rw enabled?                   boolean
       +--rw forwarding?                boolean
       +--rw mtu?                       uint32
       +--rw address* [ip]
       |  +--rw ip             inet:ipv6-address-no-zone
       |  +--rw prefix-length  uint8
       |  +--ro origin?        ip-address-origin
       |  +--ro status?        enumeration
       +--rw neighbor* [ip]
       |  +--rw ip                  inet:ipv6-address-no-zone
       |  +--rw link-layer-address  yang:phys-address
       |  +--ro origin?             neighbor-origin
       |  +--ro is-router?          empty
       |  +--ro state?              enumeration
       +--rw dup-addr-detect-transmits? uint32
       +--rw autoconf
          +--rw create-global-addresses?      boolean
          +--rw create-temporary-addresses?   boolean {ipv6-privacy-autoconf}?
          +--rw temporary-valid-lifetime?     uint32 {ipv6-privacy-autoconf}?
          +--rw temporary-preferred-lifetime? uint32 {ipv6-privacy-autoconf}?
  augment /if:interfaces-state/if:interface:
    x--ro ipv4!
    |  x--ro forwarding? boolean
    |  x--ro mtu?        uint16
    |  x--ro address* [ip]
    |  |  x--ro ip             inet:ipv4-address-no-zone
    |  |  x--ro (subnet)?
    |  |  |  +--:(prefix-length)
    |  |  |  |  x--ro prefix-length? uint8
    |  |  |  +--:(netmask)
    |  |  |     x--ro netmask?       yang:dotted-quad {ipv4-non-contiguous-netmasks}?
    |  |  x--ro origin?        ip-address-origin
    |  x--ro neighbor* [ip]
    |     x--ro ip                  inet:ipv4-address-no-zone
    |     x--ro link-layer-address? yang:phys-address
    |     x--ro origin?             neighbor-origin
    x--ro ipv6!
       x--ro forwarding? boolean
       x--ro mtu?        uint32
       x--ro address* [ip]
       |  x--ro ip             inet:ipv6-address-no-zone
       |  x--ro prefix-length  uint8
       |  x--ro origin?        ip-address-origin
       |  x--ro status?        enumeration
       x--ro neighbor* [ip]
          x--ro ip                  inet:ipv6-address-no-zone
          x--ro link-layer-address? yang:phys-address
          x--ro origin?             neighbor-origin
          x--ro is-router?          empty
          x--ro state?              enumeration

module: ietf-netconf-acm
  +--rw nacm
     +--rw enable-nacm?            boolean
     +--rw read-default?           action-type
     +--rw write-default?          action-type
     +--rw exec-default?           action-type
     +--rw enable-external-groups? boolean
     +--ro denied-operations       yang:zero-based-counter32
     +--ro denied-data-writes      yang:zero-based-counter32
     +--ro denied-notifications    yang:zero-based-counter32
     +--rw groups
     |  +--rw group* [name]
     |     +--rw name       group-name-type
     |     +--rw user-name* user-name-type
     +--rw rule-list* [name]
        +--rw name   string
        +--rw group* union
        +--rw rule* [name]
           +--rw name               string
           +--rw module-name?       union
           +--rw (rule-type)?
           |  +--:(protocol-operation)
           |  |  +--rw rpc-name?          union
           |  +--:(notification)
           |  |  +--rw notification-name? union
           |  +--:(data-node)
           |     +--rw path               node-instance-identifier
           +--rw access-operations? union
           +--rw action             action-type
           +--rw comment?           string

module: ietf-netconf-monitoring
  +--ro netconf-state
     +--ro capabilities
     |  +--ro capability* inet:uri
     +--ro datastores
     |  +--ro datastore* [name]
     |     +--ro name   netconf-datastore-type
     |     +--ro locks!
     |        +--ro (lock-type)?
     |           +--:(global-lock)
     |           |  +--ro global-lock
     |           |     +--ro locked-by-session  uint32
     |           |     +--ro locked-time        yang:date-and-time
     |           +--:(partial-lock)
     |              +--ro partial-lock* [lock-id]
     |                 +--ro lock-id            uint32
     |                 +--ro locked-by-session  uint32
     |                 +--ro locked-time        yang:date-and-time
     |                 +--ro select*            yang:xpath1.0
     |                 +--ro locked-node*       instance-identifier
     +--ro schemas
     |  +--ro schema* [identifier version format]
     |     +--ro identifier  string
     |     +--ro version     string
     |     +--ro format      identityref
     |     +--ro namespace   inet:uri
     |     +--ro location*   union
     +--ro sessions
     |  +--ro session* [session-id]
     |     +--ro session-id         uint32
     |     +--ro transport          identityref
     |     +--ro username           string
     |     +--ro source-host?       inet:host
     |     +--ro login-time         yang:date-and-time
     |     +--ro in-rpcs?           yang:zero-based-counter32
     |     +--ro in-bad-rpcs?       yang:zero-based-counter32
     |     +--ro out-rpc-errors?    yang:zero-based-counter32
     |     +--ro out-notifications? yang:zero-based-counter32
     +--ro statistics
        +--ro netconf-start-time? yang:date-and-time
        +--ro in-bad-hellos?      yang:zero-based-counter32
        +--ro in-sessions?        yang:zero-based-counter32
        +--ro dropped-sessions?   yang:zero-based-counter32
        +--ro in-rpcs?            yang:zero-based-counter32
        +--ro in-bad-rpcs?        yang:zero-based-counter32
        +--ro out-rpc-errors?     yang:zero-based-counter32
        +--ro out-notifications?  yang:zero-based-counter32

  rpcs:
    +---x get-schema  
       +---w input   
       |  +---w identifier  string
       |  +---w version?    string
       |  +---w format?     identityref
       +--ro output  
          +--ro data  

  grouping common-counters:
    +--rw in-rpcs?           yang:zero-based-counter32
    +--rw in-bad-rpcs?       yang:zero-based-counter32
    +--rw out-rpc-errors?    yang:zero-based-counter32
    +--rw out-notifications? yang:zero-based-counter32

module: ietf-yang-library
  +--ro modules-state
     +--ro module-set-id  string
     +--ro module* [name revision]
        +--ro name              yang:yang-identifier
        +--ro revision          union
        +--ro schema?           inet:uri
        +--ro namespace         inet:uri
        +--ro feature*          yang:yang-identifier
        +--ro deviation* [name revision]
        |  +--ro name      yang:yang-identifier
        |  +--ro revision  union
        +--ro conformance-type  enumeration
        +--ro submodule* [name revision]
           +--ro name      yang:yang-identifier
           +--ro revision  union
           +--ro schema?   inet:uri

  notifications:
    +---n yang-library-change  
       +--ro module-set-id  leafref

  grouping module-list:
    +--rw module* [name revision]
       +--rw name              yang:yang-identifier
       +--rw revision          union
       +--rw schema?           inet:uri
       +--rw namespace         inet:uri
       +--rw feature*          yang:yang-identifier
       +--rw deviation* [name revision]
       |  +--rw name      yang:yang-identifier
       |  +--rw revision  union
       +--rw conformance-type  enumeration
       +--rw submodule* [name revision]
          +--rw name      yang:yang-identifier
          +--rw revision  union
          +--rw schema?   inet:uri

module: ietf-yang-types

module: o-ran-ald

  rpcs:
    +---x ald-communication  
       +---w input   
       |  +---w port-id      leafref
       |  +---w ald-req-msg? binary
       +--ro output  
          +--ro port-id                    leafref
          +--ro status                     enumeration
          +--ro error-message?             string
          +--ro ald-resp-msg?              binary
          +--ro frames-with-wrong-crc?     uint32
          +--ro frames-without-stop-flag?  uint32
          +--ro number-of-received-octets? uint32

  grouping ald-input:
    +--rw port-id      leafref
    +--rw ald-req-msg? binary
  grouping ald-output:
    +--rw port-id                    leafref
    +--rw status                     enumeration
    +--rw error-message?             string
    +--rw ald-resp-msg?              binary
    +--rw frames-with-wrong-crc?     uint32
    +--rw frames-without-stop-flag?  uint32
    +--rw number-of-received-octets? uint32

module: o-ran-ald-port
  +--rw ald-ports-io
     +--ro over-current-supported? boolean
     +--ro ald-port* [name]
     |  +--ro name                 string
     |  +--ro port-id              uint8
     |  +--ro dc-control-support   boolean
     |  +--ro dc-enabled-status?   boolean
     |  +--ro supported-connector  enumeration
     +--rw ald-port-dc-control* [name]
        +--rw name        leafref
        +--rw dc-enabled? boolean

  notifications:
    +---n overcurrent-report         {OVERCURRENT-SUPPORTED}?
    |  +--ro overload-condition
    |     +--ro overloaded-ports* leafref
    +---n dc-enabled-status-change  
       +--ro ald-port* [name]
          +--ro name               leafref
          +--ro dc-enabled-status? leafref

  grouping aldport-group:
    +--ro over-current-supported? boolean
    +--ro ald-port* [name]
    |  +--ro name                 string
    |  +--ro port-id              uint8
    |  +--ro dc-control-support   boolean
    |  +--ro dc-enabled-status?   boolean
    |  +--ro supported-connector  enumeration
    +--rw ald-port-dc-control* [name]
       +--rw name        leafref
       +--rw dc-enabled? boolean
  grouping overcurrent-group:
    +--rw overload-condition
       +--rw overloaded-ports* leafref
  grouping dc-enabled-group:
    +--rw ald-port* [name]
       +--rw name               leafref
       +--rw dc-enabled-status? leafref

module: o-ran-antenna-calibration
  +--rw antenna-calibration
     +--ro antenna-calibration-capabilities
     |  +--ro self-calibration-support?                   boolean
     |  +--ro number-of-calibration-symbols-per-block-dl  uint8
     |  +--ro number-of-calibration-symbols-per-block-ul  uint8
     |  +--ro interval-between-calibration-blocks?        uint8
     |  +--ro number-of-calibration-blocks-per-step-dl    uint8
     |  +--ro number-of-calibration-blocks-per-step-ul    uint8
     |  +--ro interval-between-calibration-steps?         uint8
     |  +--ro number-of-calibration-steps                 uint8
     +--rw self-calibration-policy
        +--rw self-calibration-allowed? boolean

  rpcs:
    +---x start-antenna-calibration  
       +---w input   
       |  +---w symbol-bitmask-dl        string
       |  +---w symbol-bitmask-ul        string
       |  +---w slot-bitmask-dl          string
       |  +---w slot-bitmask-ul          string
       |  +---w frame-bitmask-dl         string
       |  +---w frame-bitmask-ul         string
       |  +---w calibration-step-size    uint8
       |  +---w calibration-step-number  uint8
       |  +---w start-sfn                uint16
       +--ro output  
          +--ro status         enumeration
          +--ro error-message? string

  notifications:
    +---n antenna-calibration-required  
    |  +--ro dl-calibration-frequency-chunk*
    |  |  +--ro start-calibration-frequency-dl? uint64
    |  |  +--ro end-calibration-frequency-dl?   uint64
    |  +--ro ul-calibration-frequency-chunk*
    |     +--ro start-calibration-frequency-ul? uint64
    |     +--ro end-calibration-frequency-ul?   uint64
    +---n antenna-calibration-result    
       +--ro status           enumeration
       +--ro detailed-reason? string

  grouping antenna-calibration-capabilities:
    +--rw self-calibration-support?                   boolean
    +--rw number-of-calibration-symbols-per-block-dl  uint8
    +--rw number-of-calibration-symbols-per-block-ul  uint8
    +--rw interval-between-calibration-blocks?        uint8
    +--rw number-of-calibration-blocks-per-step-dl    uint8
    +--rw number-of-calibration-blocks-per-step-ul    uint8
    +--rw interval-between-calibration-steps?         uint8
    +--rw number-of-calibration-steps                 uint8
  grouping antenna-calibration:
    +--ro antenna-calibration-capabilities
    |  +--ro self-calibration-support?                   boolean
    |  +--ro number-of-calibration-symbols-per-block-dl  uint8
    |  +--ro number-of-calibration-symbols-per-block-ul  uint8
    |  +--ro interval-between-calibration-blocks?        uint8
    |  +--ro number-of-calibration-blocks-per-step-dl    uint8
    |  +--ro number-of-calibration-blocks-per-step-ul    uint8
    |  +--ro interval-between-calibration-steps?         uint8
    |  +--ro number-of-calibration-steps                 uint8
    +--rw self-calibration-policy
       +--rw self-calibration-allowed? boolean

module: o-ran-beamforming
  +--ro beamforming-config
     x--ro per-band-config* [band-number]
     |  +--ro band-number        leafref
     |  +--ro tx-array*          leafref
     |  +--ro rx-array*          leafref
     |  +--ro static-properties
     |  |  +--ro rt-bf-weights-update-support? boolean
     |  |  +--ro (beamforming-type)?
     |  |  |  +--:(frequency)
     |  |  |  |  +--ro frequency-domain-beams
     |  |  |  |     +--ro max-number-of-beam-ids                   uint16
     |  |  |  |     +--ro initial-beam-id                          uint16
     |  |  |  |     +--ro iq-bitwidth?                             uint8
     |  |  |  |     +--ro compression-type                         enumeration
     |  |  |  |     x--ro bitwidth?                                uint8
     |  |  |  |     +--ro (compression-format)?
     |  |  |  |     |  +--:(no-compresison)
     |  |  |  |     |  +--:(block-floating-point)
     |  |  |  |     |  |  +--ro exponent?                                uint8
     |  |  |  |     |  +--:(block-scaling)
     |  |  |  |     |  |  +--ro block-scalar?                            uint8
     |  |  |  |     |  +--:(u-law)
     |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
     |  |  |  |     |  |  +--ro comp-shift?                              uint8
     |  |  |  |     |  +--:(beam-space-compression)
     |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |  |     |  |  +--ro block-scaler?                            uint8
     |  |  |  |     |  +--:(modulation-compression)
     |  |  |  |     |     +--ro csf?                                     uint8
     |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
     |  |  |  |     +--ro additional-compression-method-supported*
     |  |  |  |        +--ro iq-bitwidth?                       uint8
     |  |  |  |        +--ro compression-type                   enumeration
     |  |  |  |        x--ro bitwidth?                          uint8
     |  |  |  |        +--ro (compression-format)?
     |  |  |  |           +--:(no-compresison)
     |  |  |  |           +--:(block-floating-point)
     |  |  |  |           |  +--ro exponent?                          uint8
     |  |  |  |           +--:(block-scaling)
     |  |  |  |           |  +--ro block-scalar?                      uint8
     |  |  |  |           +--:(u-law)
     |  |  |  |           |  +--ro comp-bit-width?                    uint8
     |  |  |  |           |  +--ro comp-shift?                        uint8
     |  |  |  |           +--:(beam-space-compression)
     |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |  |           |  +--ro block-scaler?                      uint8
     |  |  |  |           +--:(modulation-compression)
     |  |  |  |              +--ro csf?                               uint8
     |  |  |  |              +--ro mod-comp-scaler?                   uint16
     |  |  |  +--:(time)
     |  |  |  |  +--ro time-domain-beams
     |  |  |  |     +--ro max-number-of-beam-ids                   uint16
     |  |  |  |     +--ro initial-beam-id                          uint16
     |  |  |  |     +--ro frequency-granularity                    enumeration
     |  |  |  |     +--ro time-granularity                         enumeration
     |  |  |  |     +--ro iq-bitwidth?                             uint8
     |  |  |  |     +--ro compression-type                         enumeration
     |  |  |  |     x--ro bitwidth?                                uint8
     |  |  |  |     +--ro (compression-format)?
     |  |  |  |     |  +--:(no-compresison)
     |  |  |  |     |  +--:(block-floating-point)
     |  |  |  |     |  |  +--ro exponent?                                uint8
     |  |  |  |     |  +--:(block-scaling)
     |  |  |  |     |  |  +--ro block-scalar?                            uint8
     |  |  |  |     |  +--:(u-law)
     |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
     |  |  |  |     |  |  +--ro comp-shift?                              uint8
     |  |  |  |     |  +--:(beam-space-compression)
     |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |  |     |  |  +--ro block-scaler?                            uint8
     |  |  |  |     |  +--:(modulation-compression)
     |  |  |  |     |     +--ro csf?                                     uint8
     |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
     |  |  |  |     +--ro additional-compression-method-supported*
     |  |  |  |        +--ro iq-bitwidth?                       uint8
     |  |  |  |        +--ro compression-type                   enumeration
     |  |  |  |        x--ro bitwidth?                          uint8
     |  |  |  |        +--ro (compression-format)?
     |  |  |  |           +--:(no-compresison)
     |  |  |  |           +--:(block-floating-point)
     |  |  |  |           |  +--ro exponent?                          uint8
     |  |  |  |           +--:(block-scaling)
     |  |  |  |           |  +--ro block-scalar?                      uint8
     |  |  |  |           +--:(u-law)
     |  |  |  |           |  +--ro comp-bit-width?                    uint8
     |  |  |  |           |  +--ro comp-shift?                        uint8
     |  |  |  |           +--:(beam-space-compression)
     |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |  |           |  +--ro block-scaler?                      uint8
     |  |  |  |           +--:(modulation-compression)
     |  |  |  |              +--ro csf?                               uint8
     |  |  |  |              +--ro mod-comp-scaler?                   uint16
     |  |  |  +--:(hybrid)
     |  |  |     +--ro hybrid-beams
     |  |  |        +--ro max-number-of-beam-ids                   uint16
     |  |  |        +--ro initial-beam-id                          uint16
     |  |  |        +--ro frequency-granularity                    enumeration
     |  |  |        +--ro time-granularity                         enumeration
     |  |  |        +--ro iq-bitwidth?                             uint8
     |  |  |        +--ro compression-type                         enumeration
     |  |  |        x--ro bitwidth?                                uint8
     |  |  |        +--ro (compression-format)?
     |  |  |        |  +--:(no-compresison)
     |  |  |        |  +--:(block-floating-point)
     |  |  |        |  |  +--ro exponent?                                uint8
     |  |  |        |  +--:(block-scaling)
     |  |  |        |  |  +--ro block-scalar?                            uint8
     |  |  |        |  +--:(u-law)
     |  |  |        |  |  +--ro comp-bit-width?                          uint8
     |  |  |        |  |  +--ro comp-shift?                              uint8
     |  |  |        |  +--:(beam-space-compression)
     |  |  |        |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |        |  |  +--ro block-scaler?                            uint8
     |  |  |        |  +--:(modulation-compression)
     |  |  |        |     +--ro csf?                                     uint8
     |  |  |        |     +--ro mod-comp-scaler?                         uint16
     |  |  |        +--ro additional-compression-method-supported*
     |  |  |           +--ro iq-bitwidth?                       uint8
     |  |  |           +--ro compression-type                   enumeration
     |  |  |           x--ro bitwidth?                          uint8
     |  |  |           +--ro (compression-format)?
     |  |  |              +--:(no-compresison)
     |  |  |              +--:(block-floating-point)
     |  |  |              |  +--ro exponent?                          uint8
     |  |  |              +--:(block-scaling)
     |  |  |              |  +--ro block-scalar?                      uint8
     |  |  |              +--:(u-law)
     |  |  |              |  +--ro comp-bit-width?                    uint8
     |  |  |              |  +--ro comp-shift?                        uint8
     |  |  |              +--:(beam-space-compression)
     |  |  |              |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |              |  +--ro block-scaler?                      uint8
     |  |  |              +--:(modulation-compression)
     |  |  |                 +--ro csf?                               uint8
     |  |  |                 +--ro mod-comp-scaler?                   uint16
     |  |  +--ro number-of-beams?              uint16
     |  +--ro beam-information
     |     +--ro number-of-beamforming-properties? uint16
     |     +--ro beamforming-properties* [beam-id]
     |        +--ro beam-id               uint16
     |        +--ro beamforming-property
     |           +--ro beam-type?                 enumeration
     |           +--ro beam-group-id?             uint16
     |           +--ro coarse-fine-beam-relation* beam-reference
     |           +--ro neighbour-beams*           beam-reference
     +--ro capabilities-groups* [capabilities-group]
     |  +--ro capabilities-group  uint16
     |  +--ro band-number?        leafref
     |  +--ro tx-array*           leafref
     |  +--ro rx-array*           leafref
     |  +--ro static-properties
     |  |  +--ro rt-bf-weights-update-support? boolean
     |  |  +--ro (beamforming-type)?
     |  |  |  +--:(frequency)
     |  |  |  |  +--ro frequency-domain-beams
     |  |  |  |     +--ro max-number-of-beam-ids                   uint16
     |  |  |  |     +--ro initial-beam-id                          uint16
     |  |  |  |     +--ro iq-bitwidth?                             uint8
     |  |  |  |     +--ro compression-type                         enumeration
     |  |  |  |     x--ro bitwidth?                                uint8
     |  |  |  |     +--ro (compression-format)?
     |  |  |  |     |  +--:(no-compresison)
     |  |  |  |     |  +--:(block-floating-point)
     |  |  |  |     |  |  +--ro exponent?                                uint8
     |  |  |  |     |  +--:(block-scaling)
     |  |  |  |     |  |  +--ro block-scalar?                            uint8
     |  |  |  |     |  +--:(u-law)
     |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
     |  |  |  |     |  |  +--ro comp-shift?                              uint8
     |  |  |  |     |  +--:(beam-space-compression)
     |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |  |     |  |  +--ro block-scaler?                            uint8
     |  |  |  |     |  +--:(modulation-compression)
     |  |  |  |     |     +--ro csf?                                     uint8
     |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
     |  |  |  |     +--ro additional-compression-method-supported*
     |  |  |  |        +--ro iq-bitwidth?                       uint8
     |  |  |  |        +--ro compression-type                   enumeration
     |  |  |  |        x--ro bitwidth?                          uint8
     |  |  |  |        +--ro (compression-format)?
     |  |  |  |           +--:(no-compresison)
     |  |  |  |           +--:(block-floating-point)
     |  |  |  |           |  +--ro exponent?                          uint8
     |  |  |  |           +--:(block-scaling)
     |  |  |  |           |  +--ro block-scalar?                      uint8
     |  |  |  |           +--:(u-law)
     |  |  |  |           |  +--ro comp-bit-width?                    uint8
     |  |  |  |           |  +--ro comp-shift?                        uint8
     |  |  |  |           +--:(beam-space-compression)
     |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |  |           |  +--ro block-scaler?                      uint8
     |  |  |  |           +--:(modulation-compression)
     |  |  |  |              +--ro csf?                               uint8
     |  |  |  |              +--ro mod-comp-scaler?                   uint16
     |  |  |  +--:(time)
     |  |  |  |  +--ro time-domain-beams
     |  |  |  |     +--ro max-number-of-beam-ids                   uint16
     |  |  |  |     +--ro initial-beam-id                          uint16
     |  |  |  |     +--ro frequency-granularity                    enumeration
     |  |  |  |     +--ro time-granularity                         enumeration
     |  |  |  |     +--ro iq-bitwidth?                             uint8
     |  |  |  |     +--ro compression-type                         enumeration
     |  |  |  |     x--ro bitwidth?                                uint8
     |  |  |  |     +--ro (compression-format)?
     |  |  |  |     |  +--:(no-compresison)
     |  |  |  |     |  +--:(block-floating-point)
     |  |  |  |     |  |  +--ro exponent?                                uint8
     |  |  |  |     |  +--:(block-scaling)
     |  |  |  |     |  |  +--ro block-scalar?                            uint8
     |  |  |  |     |  +--:(u-law)
     |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
     |  |  |  |     |  |  +--ro comp-shift?                              uint8
     |  |  |  |     |  +--:(beam-space-compression)
     |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |  |     |  |  +--ro block-scaler?                            uint8
     |  |  |  |     |  +--:(modulation-compression)
     |  |  |  |     |     +--ro csf?                                     uint8
     |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
     |  |  |  |     +--ro additional-compression-method-supported*
     |  |  |  |        +--ro iq-bitwidth?                       uint8
     |  |  |  |        +--ro compression-type                   enumeration
     |  |  |  |        x--ro bitwidth?                          uint8
     |  |  |  |        +--ro (compression-format)?
     |  |  |  |           +--:(no-compresison)
     |  |  |  |           +--:(block-floating-point)
     |  |  |  |           |  +--ro exponent?                          uint8
     |  |  |  |           +--:(block-scaling)
     |  |  |  |           |  +--ro block-scalar?                      uint8
     |  |  |  |           +--:(u-law)
     |  |  |  |           |  +--ro comp-bit-width?                    uint8
     |  |  |  |           |  +--ro comp-shift?                        uint8
     |  |  |  |           +--:(beam-space-compression)
     |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |  |           |  +--ro block-scaler?                      uint8
     |  |  |  |           +--:(modulation-compression)
     |  |  |  |              +--ro csf?                               uint8
     |  |  |  |              +--ro mod-comp-scaler?                   uint16
     |  |  |  +--:(hybrid)
     |  |  |     +--ro hybrid-beams
     |  |  |        +--ro max-number-of-beam-ids                   uint16
     |  |  |        +--ro initial-beam-id                          uint16
     |  |  |        +--ro frequency-granularity                    enumeration
     |  |  |        +--ro time-granularity                         enumeration
     |  |  |        +--ro iq-bitwidth?                             uint8
     |  |  |        +--ro compression-type                         enumeration
     |  |  |        x--ro bitwidth?                                uint8
     |  |  |        +--ro (compression-format)?
     |  |  |        |  +--:(no-compresison)
     |  |  |        |  +--:(block-floating-point)
     |  |  |        |  |  +--ro exponent?                                uint8
     |  |  |        |  +--:(block-scaling)
     |  |  |        |  |  +--ro block-scalar?                            uint8
     |  |  |        |  +--:(u-law)
     |  |  |        |  |  +--ro comp-bit-width?                          uint8
     |  |  |        |  |  +--ro comp-shift?                              uint8
     |  |  |        |  +--:(beam-space-compression)
     |  |  |        |  |  +--ro active-beam-space-coeficient-mask*       uint8
     |  |  |        |  |  +--ro block-scaler?                            uint8
     |  |  |        |  +--:(modulation-compression)
     |  |  |        |     +--ro csf?                                     uint8
     |  |  |        |     +--ro mod-comp-scaler?                         uint16
     |  |  |        +--ro additional-compression-method-supported*
     |  |  |           +--ro iq-bitwidth?                       uint8
     |  |  |           +--ro compression-type                   enumeration
     |  |  |           x--ro bitwidth?                          uint8
     |  |  |           +--ro (compression-format)?
     |  |  |              +--:(no-compresison)
     |  |  |              +--:(block-floating-point)
     |  |  |              |  +--ro exponent?                          uint8
     |  |  |              +--:(block-scaling)
     |  |  |              |  +--ro block-scalar?                      uint8
     |  |  |              +--:(u-law)
     |  |  |              |  +--ro comp-bit-width?                    uint8
     |  |  |              |  +--ro comp-shift?                        uint8
     |  |  |              +--:(beam-space-compression)
     |  |  |              |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |              |  +--ro block-scaler?                      uint8
     |  |  |              +--:(modulation-compression)
     |  |  |                 +--ro csf?                               uint8
     |  |  |                 +--ro mod-comp-scaler?                   uint16
     |  |  +--ro number-of-beams?              uint16
     |  +--ro beam-information
     |     +--ro number-of-beamforming-properties? uint16
     |     +--ro beamforming-properties* [beam-id]
     |        +--ro beam-id               uint16
     |        +--ro beamforming-property
     |           +--ro beam-type?                 enumeration
     |           +--ro beam-group-id?             uint16
     |           +--ro coarse-fine-beam-relation* beam-reference
     |           +--ro neighbour-beams*           beam-reference
     +--ro ue-specific-beamforming!
     |  +--ro max-number-of-ues? uint8
     +--ro operational-properties {MODIFY-BF-CONFIG}?
     |  +--ro number-of-writeable-beamforming-files  uint8
     |  +--ro update-bf-non-delete?                  boolean
     |  +--ro persistent-bf-files?                   boolean
     +--ro beamforming-trough-attributes-supported?      boolean
     +--ro beamforming-trough-ue-channel-info-supported? boolean
     +--ro beam-tilt {BEAM-TILT}?
        +--ro predefined-beam-tilt-offset-information* [capabilities-group]
        |  +--ro capabilities-group                       leafref
        |  +--ro elevation-tilt-offset-granularity        uint8
        |  +--ro azimuth-tilt-offset-granularity          uint8
        |  +--ro minimum-supported-elevation-tilt-offset  int16
        |  +--ro maximum-supported-elevation-tilt-offset  int16
        |  +--ro minimum-supported-azimuth-tilt-offset    int16
        |  +--ro maximum-supported-azimuth-tilt-offset    int16
        |  +--ro run-time-tilt-offset-supported           boolean
        +--ro predefined-beam-tilt-state* [capabilities-group]
           +--ro capabilities-group           leafref
           +--ro elevation-tilt-offset-angle  int16
           +--ro azimuth-tilt-offset-angle    int16

  rpcs:
    +---x activate-beamforming-config                       {MODIFY-BF-CONFIG}?
    |  +---w input   
    |  |  +---w beamforming-config-file  string
    |  |  +---w band-number?             leafref
    |  +--ro output  
    |     +--ro status         enumeration
    |     +--ro error-message? string
    +---x activate-beamforming-config-by-capability-group   {MODIFY-BF-CONFIG}?
    |  +---w input   
    |  |  +---w beamforming-config-file  string
    |  |  +---w capabilities-group       leafref
    |  +--ro output  
    |     +--ro status         enumeration
    |     +--ro error-message? string
    +---x modify-predefined-beam-tilt-offset                {BEAM-TILT}?
       +---w input   
       |  +---w predefined-beam-tilt-offset* [capabilities-group] {BEAM-TILT}?
       |     +---w capabilities-group           leafref
       |     +---w elevation-tilt-offset-angle? int16
       |     +---w azimuth-tilt-offset-angle?   int16
       +--ro output  
          +--ro status         enumeration
          +--ro error-message? string

  notifications:
    +---n beamforming-information-update                   
    |  +--ro band-number? leafref
    +---n capability-group-beamforming-information-update  
    |  +--ro capabilities-group  leafref
    +---n predefined-beam-tilt-offset-complete              {BEAM-TILT}?
       +--ro predefined-beam-tilt-state* [capabilities-group]
          +--ro capabilities-group           leafref
          +--ro elevation-tilt-offset-angle  int16
          +--ro azimuth-tilt-offset-angle    int16

  grouping beamforming-parameters:
    +--rw max-number-of-beam-ids  uint16
    +--rw initial-beam-id         uint16
  grouping granularity-parameters:
    +--rw frequency-granularity  enumeration
    +--rw time-granularity       enumeration
  grouping array-lists:
    +--rw tx-array* leafref
    +--rw rx-array* leafref
  grouping static-properties:
    +--rw rt-bf-weights-update-support? boolean
    +--rw (beamforming-type)?
    |  +--:(frequency)
    |  |  +--rw frequency-domain-beams
    |  |     +--rw max-number-of-beam-ids                   uint16
    |  |     +--rw initial-beam-id                          uint16
    |  |     +--rw iq-bitwidth?                             uint8
    |  |     +--rw compression-type                         enumeration
    |  |     x--rw bitwidth?                                uint8
    |  |     +--rw (compression-format)?
    |  |     |  +--:(no-compresison)
    |  |     |  +--:(block-floating-point)
    |  |     |  |  +--rw exponent?                                uint8
    |  |     |  +--:(block-scaling)
    |  |     |  |  +--rw block-scalar?                            uint8
    |  |     |  +--:(u-law)
    |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |     |  |  +--rw comp-shift?                              uint8
    |  |     |  +--:(beam-space-compression)
    |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |     |  |  +--rw block-scaler?                            uint8
    |  |     |  +--:(modulation-compression)
    |  |     |     +--rw csf?                                     uint8
    |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |     +--rw additional-compression-method-supported*
    |  |        +--rw iq-bitwidth?                       uint8
    |  |        +--rw compression-type                   enumeration
    |  |        x--rw bitwidth?                          uint8
    |  |        +--rw (compression-format)?
    |  |           +--:(no-compresison)
    |  |           +--:(block-floating-point)
    |  |           |  +--rw exponent?                          uint8
    |  |           +--:(block-scaling)
    |  |           |  +--rw block-scalar?                      uint8
    |  |           +--:(u-law)
    |  |           |  +--rw comp-bit-width?                    uint8
    |  |           |  +--rw comp-shift?                        uint8
    |  |           +--:(beam-space-compression)
    |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |           |  +--rw block-scaler?                      uint8
    |  |           +--:(modulation-compression)
    |  |              +--rw csf?                               uint8
    |  |              +--rw mod-comp-scaler?                   uint16
    |  +--:(time)
    |  |  +--rw time-domain-beams
    |  |     +--rw max-number-of-beam-ids                   uint16
    |  |     +--rw initial-beam-id                          uint16
    |  |     +--rw frequency-granularity                    enumeration
    |  |     +--rw time-granularity                         enumeration
    |  |     +--rw iq-bitwidth?                             uint8
    |  |     +--rw compression-type                         enumeration
    |  |     x--rw bitwidth?                                uint8
    |  |     +--rw (compression-format)?
    |  |     |  +--:(no-compresison)
    |  |     |  +--:(block-floating-point)
    |  |     |  |  +--rw exponent?                                uint8
    |  |     |  +--:(block-scaling)
    |  |     |  |  +--rw block-scalar?                            uint8
    |  |     |  +--:(u-law)
    |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |     |  |  +--rw comp-shift?                              uint8
    |  |     |  +--:(beam-space-compression)
    |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |     |  |  +--rw block-scaler?                            uint8
    |  |     |  +--:(modulation-compression)
    |  |     |     +--rw csf?                                     uint8
    |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |     +--rw additional-compression-method-supported*
    |  |        +--rw iq-bitwidth?                       uint8
    |  |        +--rw compression-type                   enumeration
    |  |        x--rw bitwidth?                          uint8
    |  |        +--rw (compression-format)?
    |  |           +--:(no-compresison)
    |  |           +--:(block-floating-point)
    |  |           |  +--rw exponent?                          uint8
    |  |           +--:(block-scaling)
    |  |           |  +--rw block-scalar?                      uint8
    |  |           +--:(u-law)
    |  |           |  +--rw comp-bit-width?                    uint8
    |  |           |  +--rw comp-shift?                        uint8
    |  |           +--:(beam-space-compression)
    |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |           |  +--rw block-scaler?                      uint8
    |  |           +--:(modulation-compression)
    |  |              +--rw csf?                               uint8
    |  |              +--rw mod-comp-scaler?                   uint16
    |  +--:(hybrid)
    |     +--rw hybrid-beams
    |        +--rw max-number-of-beam-ids                   uint16
    |        +--rw initial-beam-id                          uint16
    |        +--rw frequency-granularity                    enumeration
    |        +--rw time-granularity                         enumeration
    |        +--rw iq-bitwidth?                             uint8
    |        +--rw compression-type                         enumeration
    |        x--rw bitwidth?                                uint8
    |        +--rw (compression-format)?
    |        |  +--:(no-compresison)
    |        |  +--:(block-floating-point)
    |        |  |  +--rw exponent?                                uint8
    |        |  +--:(block-scaling)
    |        |  |  +--rw block-scalar?                            uint8
    |        |  +--:(u-law)
    |        |  |  +--rw comp-bit-width?                          uint8
    |        |  |  +--rw comp-shift?                              uint8
    |        |  +--:(beam-space-compression)
    |        |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |        |  |  +--rw block-scaler?                            uint8
    |        |  +--:(modulation-compression)
    |        |     +--rw csf?                                     uint8
    |        |     +--rw mod-comp-scaler?                         uint16
    |        +--rw additional-compression-method-supported*
    |           +--rw iq-bitwidth?                       uint8
    |           +--rw compression-type                   enumeration
    |           x--rw bitwidth?                          uint8
    |           +--rw (compression-format)?
    |              +--:(no-compresison)
    |              +--:(block-floating-point)
    |              |  +--rw exponent?                          uint8
    |              +--:(block-scaling)
    |              |  +--rw block-scalar?                      uint8
    |              +--:(u-law)
    |              |  +--rw comp-bit-width?                    uint8
    |              |  +--rw comp-shift?                        uint8
    |              +--:(beam-space-compression)
    |              |  +--rw active-beam-space-coeficient-mask* uint8
    |              |  +--rw block-scaler?                      uint8
    |              +--:(modulation-compression)
    |                 +--rw csf?                               uint8
    |                 +--rw mod-comp-scaler?                   uint16
    +--rw number-of-beams?              uint16
  grouping beamforming-property:
    +--rw beam-type?                 enumeration
    +--rw beam-group-id?             uint16
    +--rw coarse-fine-beam-relation* beam-reference
    +--rw neighbour-beams*           beam-reference
  grouping beamforming-properties-element:
    +--rw beam-id?              uint16
    +--rw beamforming-property
       +--rw beam-type?                 enumeration
       +--rw beam-group-id?             uint16
       +--rw coarse-fine-beam-relation* beam-reference
       +--rw neighbour-beams*           beam-reference
  grouping band-num:
    +--rw band-number? leafref
  grouping cap-group:
    +--rw capabilities-group  leafref
  grouping per-band-config-element:
    +--rw band-number?       leafref
    +--rw tx-array*          leafref
    +--rw rx-array*          leafref
    +--rw static-properties
    |  +--rw rt-bf-weights-update-support? boolean
    |  +--rw (beamforming-type)?
    |  |  +--:(frequency)
    |  |  |  +--rw frequency-domain-beams
    |  |  |     +--rw max-number-of-beam-ids                   uint16
    |  |  |     +--rw initial-beam-id                          uint16
    |  |  |     +--rw iq-bitwidth?                             uint8
    |  |  |     +--rw compression-type                         enumeration
    |  |  |     x--rw bitwidth?                                uint8
    |  |  |     +--rw (compression-format)?
    |  |  |     |  +--:(no-compresison)
    |  |  |     |  +--:(block-floating-point)
    |  |  |     |  |  +--rw exponent?                                uint8
    |  |  |     |  +--:(block-scaling)
    |  |  |     |  |  +--rw block-scalar?                            uint8
    |  |  |     |  +--:(u-law)
    |  |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |  |     |  |  +--rw comp-shift?                              uint8
    |  |  |     |  +--:(beam-space-compression)
    |  |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |  |     |  |  +--rw block-scaler?                            uint8
    |  |  |     |  +--:(modulation-compression)
    |  |  |     |     +--rw csf?                                     uint8
    |  |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |  |     +--rw additional-compression-method-supported*
    |  |  |        +--rw iq-bitwidth?                       uint8
    |  |  |        +--rw compression-type                   enumeration
    |  |  |        x--rw bitwidth?                          uint8
    |  |  |        +--rw (compression-format)?
    |  |  |           +--:(no-compresison)
    |  |  |           +--:(block-floating-point)
    |  |  |           |  +--rw exponent?                          uint8
    |  |  |           +--:(block-scaling)
    |  |  |           |  +--rw block-scalar?                      uint8
    |  |  |           +--:(u-law)
    |  |  |           |  +--rw comp-bit-width?                    uint8
    |  |  |           |  +--rw comp-shift?                        uint8
    |  |  |           +--:(beam-space-compression)
    |  |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |  |           |  +--rw block-scaler?                      uint8
    |  |  |           +--:(modulation-compression)
    |  |  |              +--rw csf?                               uint8
    |  |  |              +--rw mod-comp-scaler?                   uint16
    |  |  +--:(time)
    |  |  |  +--rw time-domain-beams
    |  |  |     +--rw max-number-of-beam-ids                   uint16
    |  |  |     +--rw initial-beam-id                          uint16
    |  |  |     +--rw frequency-granularity                    enumeration
    |  |  |     +--rw time-granularity                         enumeration
    |  |  |     +--rw iq-bitwidth?                             uint8
    |  |  |     +--rw compression-type                         enumeration
    |  |  |     x--rw bitwidth?                                uint8
    |  |  |     +--rw (compression-format)?
    |  |  |     |  +--:(no-compresison)
    |  |  |     |  +--:(block-floating-point)
    |  |  |     |  |  +--rw exponent?                                uint8
    |  |  |     |  +--:(block-scaling)
    |  |  |     |  |  +--rw block-scalar?                            uint8
    |  |  |     |  +--:(u-law)
    |  |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |  |     |  |  +--rw comp-shift?                              uint8
    |  |  |     |  +--:(beam-space-compression)
    |  |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |  |     |  |  +--rw block-scaler?                            uint8
    |  |  |     |  +--:(modulation-compression)
    |  |  |     |     +--rw csf?                                     uint8
    |  |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |  |     +--rw additional-compression-method-supported*
    |  |  |        +--rw iq-bitwidth?                       uint8
    |  |  |        +--rw compression-type                   enumeration
    |  |  |        x--rw bitwidth?                          uint8
    |  |  |        +--rw (compression-format)?
    |  |  |           +--:(no-compresison)
    |  |  |           +--:(block-floating-point)
    |  |  |           |  +--rw exponent?                          uint8
    |  |  |           +--:(block-scaling)
    |  |  |           |  +--rw block-scalar?                      uint8
    |  |  |           +--:(u-law)
    |  |  |           |  +--rw comp-bit-width?                    uint8
    |  |  |           |  +--rw comp-shift?                        uint8
    |  |  |           +--:(beam-space-compression)
    |  |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |  |           |  +--rw block-scaler?                      uint8
    |  |  |           +--:(modulation-compression)
    |  |  |              +--rw csf?                               uint8
    |  |  |              +--rw mod-comp-scaler?                   uint16
    |  |  +--:(hybrid)
    |  |     +--rw hybrid-beams
    |  |        +--rw max-number-of-beam-ids                   uint16
    |  |        +--rw initial-beam-id                          uint16
    |  |        +--rw frequency-granularity                    enumeration
    |  |        +--rw time-granularity                         enumeration
    |  |        +--rw iq-bitwidth?                             uint8
    |  |        +--rw compression-type                         enumeration
    |  |        x--rw bitwidth?                                uint8
    |  |        +--rw (compression-format)?
    |  |        |  +--:(no-compresison)
    |  |        |  +--:(block-floating-point)
    |  |        |  |  +--rw exponent?                                uint8
    |  |        |  +--:(block-scaling)
    |  |        |  |  +--rw block-scalar?                            uint8
    |  |        |  +--:(u-law)
    |  |        |  |  +--rw comp-bit-width?                          uint8
    |  |        |  |  +--rw comp-shift?                              uint8
    |  |        |  +--:(beam-space-compression)
    |  |        |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |        |  |  +--rw block-scaler?                            uint8
    |  |        |  +--:(modulation-compression)
    |  |        |     +--rw csf?                                     uint8
    |  |        |     +--rw mod-comp-scaler?                         uint16
    |  |        +--rw additional-compression-method-supported*
    |  |           +--rw iq-bitwidth?                       uint8
    |  |           +--rw compression-type                   enumeration
    |  |           x--rw bitwidth?                          uint8
    |  |           +--rw (compression-format)?
    |  |              +--:(no-compresison)
    |  |              +--:(block-floating-point)
    |  |              |  +--rw exponent?                          uint8
    |  |              +--:(block-scaling)
    |  |              |  +--rw block-scalar?                      uint8
    |  |              +--:(u-law)
    |  |              |  +--rw comp-bit-width?                    uint8
    |  |              |  +--rw comp-shift?                        uint8
    |  |              +--:(beam-space-compression)
    |  |              |  +--rw active-beam-space-coeficient-mask* uint8
    |  |              |  +--rw block-scaler?                      uint8
    |  |              +--:(modulation-compression)
    |  |                 +--rw csf?                               uint8
    |  |                 +--rw mod-comp-scaler?                   uint16
    |  +--rw number-of-beams?              uint16
    +--rw beam-information
       +--rw number-of-beamforming-properties? uint16
       +--rw beamforming-properties* [beam-id]
          +--rw beam-id               uint16
          +--rw beamforming-property
             +--rw beam-type?                 enumeration
             +--rw beam-group-id?             uint16
             +--rw coarse-fine-beam-relation* beam-reference
             +--rw neighbour-beams*           beam-reference
  grouping operational-properties:
    +--rw number-of-writeable-beamforming-files  uint8
    +--rw update-bf-non-delete?                  boolean
    +--rw persistent-bf-files?                   boolean
  grouping beamforming-supported-type:
    +--ro beamforming-trough-attributes-supported?      boolean
    +--ro beamforming-trough-ue-channel-info-supported? boolean
  grouping beamforming-config:
    x--ro per-band-config* [band-number]
    |  +--ro band-number        leafref
    |  +--ro tx-array*          leafref
    |  +--ro rx-array*          leafref
    |  +--ro static-properties
    |  |  +--ro rt-bf-weights-update-support? boolean
    |  |  +--ro (beamforming-type)?
    |  |  |  +--:(frequency)
    |  |  |  |  +--ro frequency-domain-beams
    |  |  |  |     +--ro max-number-of-beam-ids                   uint16
    |  |  |  |     +--ro initial-beam-id                          uint16
    |  |  |  |     +--ro iq-bitwidth?                             uint8
    |  |  |  |     +--ro compression-type                         enumeration
    |  |  |  |     x--ro bitwidth?                                uint8
    |  |  |  |     +--ro (compression-format)?
    |  |  |  |     |  +--:(no-compresison)
    |  |  |  |     |  +--:(block-floating-point)
    |  |  |  |     |  |  +--ro exponent?                                uint8
    |  |  |  |     |  +--:(block-scaling)
    |  |  |  |     |  |  +--ro block-scalar?                            uint8
    |  |  |  |     |  +--:(u-law)
    |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
    |  |  |  |     |  |  +--ro comp-shift?                              uint8
    |  |  |  |     |  +--:(beam-space-compression)
    |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
    |  |  |  |     |  |  +--ro block-scaler?                            uint8
    |  |  |  |     |  +--:(modulation-compression)
    |  |  |  |     |     +--ro csf?                                     uint8
    |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
    |  |  |  |     +--ro additional-compression-method-supported*
    |  |  |  |        +--ro iq-bitwidth?                       uint8
    |  |  |  |        +--ro compression-type                   enumeration
    |  |  |  |        x--ro bitwidth?                          uint8
    |  |  |  |        +--ro (compression-format)?
    |  |  |  |           +--:(no-compresison)
    |  |  |  |           +--:(block-floating-point)
    |  |  |  |           |  +--ro exponent?                          uint8
    |  |  |  |           +--:(block-scaling)
    |  |  |  |           |  +--ro block-scalar?                      uint8
    |  |  |  |           +--:(u-law)
    |  |  |  |           |  +--ro comp-bit-width?                    uint8
    |  |  |  |           |  +--ro comp-shift?                        uint8
    |  |  |  |           +--:(beam-space-compression)
    |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
    |  |  |  |           |  +--ro block-scaler?                      uint8
    |  |  |  |           +--:(modulation-compression)
    |  |  |  |              +--ro csf?                               uint8
    |  |  |  |              +--ro mod-comp-scaler?                   uint16
    |  |  |  +--:(time)
    |  |  |  |  +--ro time-domain-beams
    |  |  |  |     +--ro max-number-of-beam-ids                   uint16
    |  |  |  |     +--ro initial-beam-id                          uint16
    |  |  |  |     +--ro frequency-granularity                    enumeration
    |  |  |  |     +--ro time-granularity                         enumeration
    |  |  |  |     +--ro iq-bitwidth?                             uint8
    |  |  |  |     +--ro compression-type                         enumeration
    |  |  |  |     x--ro bitwidth?                                uint8
    |  |  |  |     +--ro (compression-format)?
    |  |  |  |     |  +--:(no-compresison)
    |  |  |  |     |  +--:(block-floating-point)
    |  |  |  |     |  |  +--ro exponent?                                uint8
    |  |  |  |     |  +--:(block-scaling)
    |  |  |  |     |  |  +--ro block-scalar?                            uint8
    |  |  |  |     |  +--:(u-law)
    |  |  |  |     |  |  +--ro comp-bit-width?                          uint8
    |  |  |  |     |  |  +--ro comp-shift?                              uint8
    |  |  |  |     |  +--:(beam-space-compression)
    |  |  |  |     |  |  +--ro active-beam-space-coeficient-mask*       uint8
    |  |  |  |     |  |  +--ro block-scaler?                            uint8
    |  |  |  |     |  +--:(modulation-compression)
    |  |  |  |     |     +--ro csf?                                     uint8
    |  |  |  |     |     +--ro mod-comp-scaler?                         uint16
    |  |  |  |     +--ro additional-compression-method-supported*
    |  |  |  |        +--ro iq-bitwidth?                       uint8
    |  |  |  |        +--ro compression-type                   enumeration
    |  |  |  |        x--ro bitwidth?                          uint8
    |  |  |  |        +--ro (compression-format)?
    |  |  |  |           +--:(no-compresison)
    |  |  |  |           +--:(block-floating-point)
    |  |  |  |           |  +--ro exponent?                          uint8
    |  |  |  |           +--:(block-scaling)
    |  |  |  |           |  +--ro block-scalar?                      uint8
    |  |  |  |           +--:(u-law)
    |  |  |  |           |  +--ro comp-bit-width?                    uint8
    |  |  |  |           |  +--ro comp-shift?                        uint8
    |  |  |  |           +--:(beam-space-compression)
    |  |  |  |           |  +--ro active-beam-space-coeficient-mask* uint8
    |  |  |  |           |  +--ro block-scaler?                      uint8
    |  |  |  |           +--:(modulation-compression)
    |  |  |  |              +--ro csf?                               uint8
    |  |  |  |              +--ro mod-comp-scaler?                   uint16
    |  |  |  +--:(hybrid)
    |  |  |     +--ro hybrid-beams
    |  |  |        +--ro max-number-of-beam-ids                   uint16
    |  |  |        +--ro initial-beam-id                          uint16
    |  |  |        +--ro frequency-granularity                    enumeration
    |  |  |        +--ro time-granularity                         enumeration
    |  |  |        +--ro iq-bitwidth?                             uint8
    |  |  |        +--ro compression-type                         enumeration
    |  |  |        x--ro bitwidth?                                uint8
    |  |  |        +--ro (compression-format)?
    |  |  |        |  +--:(no-compresison)
    |  |  |        |  +--:(block-floating-point)
    |  |  |        |  |  +--ro exponent?                                uint8
    |  |  |        |  +--:(block-scaling)
    |  |  |        |  |  +--ro block-scalar?                            uint8
    |  |  |        |  +--:(u-law)
    |  |  |        |  |  +--ro comp-bit-width?                          uint8
    |  |  |        |  |  +--ro comp-shift?                              uint8
    |  |  |        |  +--:(beam-space-compression)
    |  |  |        |  |  +--ro active-beam-space-coeficient-mask*       uint8
    |  |  |        |  |  +--ro block-scaler?                            uint8
    |  |  |        |  +--:(modulation-compression)
    |  |  |        |     +--ro csf?                                     uint8
    |  |  |        |     +--ro mod-comp-scaler?                         uint16
    |  |  |        +--ro additional-compression-method-supported*
    |  |  |           +--ro iq-bitwidth?                       uint8
    |  |  |           +--ro compression-type                   enumeration
    |  |  |           x--ro bitwidth?                          uint8
    |  |  |           +--ro (compression-format)?
    |  |  |              +--:(no-compresison)
    |  |  |              +--:(block-floating-point)
    |  |  |              |  +--ro exponent?                          uint8
    |  |  |              +--:(block-scaling)
    |  |  |              |  +--ro block-scalar?                      uint8
    |  |  |              +--:(u-law)
    |  |  |              |  +--ro comp-bit-width?                    uint8
    |  |  |              |  +--ro comp-shift?                        uint8
    |  |  |              +--:(beam-space-compression)
    |  |  |              |  +--ro active-beam-space-coeficient-mask* uint8
    |  |  |              |  +--ro block-scaler?                      uint8
    |  |  |              +--:(modulation-compression)
    |  |  |                 +--ro csf?                               uint8
    |  |  |                 +--ro mod-comp-scaler?                   uint16
    |  |  +--ro number-of-beams?              uint16
    |  +--ro beam-information
    |     +--ro number-of-beamforming-properties? uint16
    |     +--ro beamforming-properties* [beam-id]
    |        +--ro beam-id               uint16
    |        +--ro beamforming-property
    |           +--ro beam-type?                 enumeration
    |           +--ro beam-group-id?             uint16
    |           +--ro coarse-fine-beam-relation* beam-reference
    |           +--ro neighbour-beams*           beam-reference
    +--rw capabilities-groups* [capabilities-group]
    |  +--rw capabilities-group  uint16
    |  +--rw band-number?        leafref
    |  +--rw tx-array*           leafref
    |  +--rw rx-array*           leafref
    |  +--rw static-properties
    |  |  +--rw rt-bf-weights-update-support? boolean
    |  |  +--rw (beamforming-type)?
    |  |  |  +--:(frequency)
    |  |  |  |  +--rw frequency-domain-beams
    |  |  |  |     +--rw max-number-of-beam-ids                   uint16
    |  |  |  |     +--rw initial-beam-id                          uint16
    |  |  |  |     +--rw iq-bitwidth?                             uint8
    |  |  |  |     +--rw compression-type                         enumeration
    |  |  |  |     x--rw bitwidth?                                uint8
    |  |  |  |     +--rw (compression-format)?
    |  |  |  |     |  +--:(no-compresison)
    |  |  |  |     |  +--:(block-floating-point)
    |  |  |  |     |  |  +--rw exponent?                                uint8
    |  |  |  |     |  +--:(block-scaling)
    |  |  |  |     |  |  +--rw block-scalar?                            uint8
    |  |  |  |     |  +--:(u-law)
    |  |  |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |  |  |     |  |  +--rw comp-shift?                              uint8
    |  |  |  |     |  +--:(beam-space-compression)
    |  |  |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |  |  |     |  |  +--rw block-scaler?                            uint8
    |  |  |  |     |  +--:(modulation-compression)
    |  |  |  |     |     +--rw csf?                                     uint8
    |  |  |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |  |  |     +--rw additional-compression-method-supported*
    |  |  |  |        +--rw iq-bitwidth?                       uint8
    |  |  |  |        +--rw compression-type                   enumeration
    |  |  |  |        x--rw bitwidth?                          uint8
    |  |  |  |        +--rw (compression-format)?
    |  |  |  |           +--:(no-compresison)
    |  |  |  |           +--:(block-floating-point)
    |  |  |  |           |  +--rw exponent?                          uint8
    |  |  |  |           +--:(block-scaling)
    |  |  |  |           |  +--rw block-scalar?                      uint8
    |  |  |  |           +--:(u-law)
    |  |  |  |           |  +--rw comp-bit-width?                    uint8
    |  |  |  |           |  +--rw comp-shift?                        uint8
    |  |  |  |           +--:(beam-space-compression)
    |  |  |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |  |  |           |  +--rw block-scaler?                      uint8
    |  |  |  |           +--:(modulation-compression)
    |  |  |  |              +--rw csf?                               uint8
    |  |  |  |              +--rw mod-comp-scaler?                   uint16
    |  |  |  +--:(time)
    |  |  |  |  +--rw time-domain-beams
    |  |  |  |     +--rw max-number-of-beam-ids                   uint16
    |  |  |  |     +--rw initial-beam-id                          uint16
    |  |  |  |     +--rw frequency-granularity                    enumeration
    |  |  |  |     +--rw time-granularity                         enumeration
    |  |  |  |     +--rw iq-bitwidth?                             uint8
    |  |  |  |     +--rw compression-type                         enumeration
    |  |  |  |     x--rw bitwidth?                                uint8
    |  |  |  |     +--rw (compression-format)?
    |  |  |  |     |  +--:(no-compresison)
    |  |  |  |     |  +--:(block-floating-point)
    |  |  |  |     |  |  +--rw exponent?                                uint8
    |  |  |  |     |  +--:(block-scaling)
    |  |  |  |     |  |  +--rw block-scalar?                            uint8
    |  |  |  |     |  +--:(u-law)
    |  |  |  |     |  |  +--rw comp-bit-width?                          uint8
    |  |  |  |     |  |  +--rw comp-shift?                              uint8
    |  |  |  |     |  +--:(beam-space-compression)
    |  |  |  |     |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |  |  |     |  |  +--rw block-scaler?                            uint8
    |  |  |  |     |  +--:(modulation-compression)
    |  |  |  |     |     +--rw csf?                                     uint8
    |  |  |  |     |     +--rw mod-comp-scaler?                         uint16
    |  |  |  |     +--rw additional-compression-method-supported*
    |  |  |  |        +--rw iq-bitwidth?                       uint8
    |  |  |  |        +--rw compression-type                   enumeration
    |  |  |  |        x--rw bitwidth?                          uint8
    |  |  |  |        +--rw (compression-format)?
    |  |  |  |           +--:(no-compresison)
    |  |  |  |           +--:(block-floating-point)
    |  |  |  |           |  +--rw exponent?                          uint8
    |  |  |  |           +--:(block-scaling)
    |  |  |  |           |  +--rw block-scalar?                      uint8
    |  |  |  |           +--:(u-law)
    |  |  |  |           |  +--rw comp-bit-width?                    uint8
    |  |  |  |           |  +--rw comp-shift?                        uint8
    |  |  |  |           +--:(beam-space-compression)
    |  |  |  |           |  +--rw active-beam-space-coeficient-mask* uint8
    |  |  |  |           |  +--rw block-scaler?                      uint8
    |  |  |  |           +--:(modulation-compression)
    |  |  |  |              +--rw csf?                               uint8
    |  |  |  |              +--rw mod-comp-scaler?                   uint16
    |  |  |  +--:(hybrid)
    |  |  |     +--rw hybrid-beams
    |  |  |        +--rw max-number-of-beam-ids                   uint16
    |  |  |        +--rw initial-beam-id                          uint16
    |  |  |        +--rw frequency-granularity                    enumeration
    |  |  |        +--rw time-granularity                         enumeration
    |  |  |        +--rw iq-bitwidth?                             uint8
    |  |  |        +--rw compression-type                         enumeration
    |  |  |        x--rw bitwidth?                                uint8
    |  |  |        +--rw (compression-format)?
    |  |  |        |  +--:(no-compresison)
    |  |  |        |  +--:(block-floating-point)
    |  |  |        |  |  +--rw exponent?                                uint8
    |  |  |        |  +--:(block-scaling)
    |  |  |        |  |  +--rw block-scalar?                            uint8
    |  |  |        |  +--:(u-law)
    |  |  |        |  |  +--rw comp-bit-width?                          uint8
    |  |  |        |  |  +--rw comp-shift?                              uint8
    |  |  |        |  +--:(beam-space-compression)
    |  |  |        |  |  +--rw active-beam-space-coeficient-mask*       uint8
    |  |  |        |  |  +--rw block-scaler?                            uint8
    |  |  |        |  +--:(modulation-compression)
    |  |  |        |     +--rw csf?                                     uint8
    |  |  |        |     +--rw mod-comp-scaler?                         uint16
    |  |  |        +--rw additional-compression-method-supported*
    |  |  |           +--rw iq-bitwidth?                       uint8
    |  |  |           +--rw compression-type                   enumeration
    |  |  |           x--rw bitwidth?                          uint8
    |  |  |           +--rw (compression-format)?
    |  |  |              +--:(no-compresison)
    |  |  |              +--:(block-floating-point)
    |  |  |              |  +--rw exponent?                          uint8
    |  |  |              +--:(block-scaling)
    |  |  |              |  +--rw block-scalar?                      uint8
    |  |  |              +--:(u-law)
    |  |  |              |  +--rw comp-bit-width?                    uint8
    |  |  |              |  +--rw comp-shift?                        uint8
    |  |  |              +--:(beam-space-compression)
    |  |  |              |  +--rw active-beam-space-coeficient-mask* uint8
    |  |  |              |  +--rw block-scaler?                      uint8
    |  |  |              +--:(modulation-compression)
    |  |  |                 +--rw csf?                               uint8
    |  |  |                 +--rw mod-comp-scaler?                   uint16
    |  |  +--rw number-of-beams?              uint16
    |  +--rw beam-information
    |     +--rw number-of-beamforming-properties? uint16
    |     +--rw beamforming-properties* [beam-id]
    |        +--rw beam-id               uint16
    |        +--rw beamforming-property
    |           +--rw beam-type?                 enumeration
    |           +--rw beam-group-id?             uint16
    |           +--rw coarse-fine-beam-relation* beam-reference
    |           +--rw neighbour-beams*           beam-reference
    +--ro ue-specific-beamforming!
    |  +--ro max-number-of-ues? uint8
    +--ro operational-properties {MODIFY-BF-CONFIG}?
       +--ro number-of-writeable-beamforming-files  uint8
       +--ro update-bf-non-delete?                  boolean
       +--ro persistent-bf-files?                   boolean
  grouping beam-tilt-configuration:
    +--rw predefined-beam-tilt-offset* [capabilities-group] {BEAM-TILT}?
       +--rw capabilities-group           leafref
       +--rw elevation-tilt-offset-angle? int16
       +--rw azimuth-tilt-offset-angle?   int16
  grouping beam-tilt-state:
    +--ro predefined-beam-tilt-offset-information* [capabilities-group]
       +--ro capabilities-group                       leafref
       +--ro elevation-tilt-offset-granularity        uint8
       +--ro azimuth-tilt-offset-granularity          uint8
       +--ro minimum-supported-elevation-tilt-offset  int16
       +--ro maximum-supported-elevation-tilt-offset  int16
       +--ro minimum-supported-azimuth-tilt-offset    int16
       +--ro maximum-supported-azimuth-tilt-offset    int16
       +--ro run-time-tilt-offset-supported           boolean
  grouping beam-tilt-report:
    +--ro predefined-beam-tilt-state* [capabilities-group]
       +--ro capabilities-group           leafref
       +--ro elevation-tilt-offset-angle  int16
       +--ro azimuth-tilt-offset-angle    int16

module: o-ran-compression-factors <<<<<<< I AM HERE >>>>>>>>

  grouping compression-params:
    +--rw compression-type                   enumeration
    x--rw bitwidth?                          uint8
    +--rw (compression-format)?
       +--:(no-compresison)
       +--:(block-floating-point)
       |  +--rw exponent?                          uint8
       +--:(block-scaling)
       |  +--rw block-scalar?                      uint8
       +--:(u-law)
       |  +--rw comp-bit-width?                    uint8
       |  +--rw comp-shift?                        uint8
       +--:(beam-space-compression)
       |  +--rw active-beam-space-coeficient-mask* uint8
       |  +--rw block-scaler?                      uint8
       +--:(modulation-compression)
          +--rw csf?                               uint8
          +--rw mod-comp-scaler?                   uint16
  grouping compression-details:
    +--rw iq-bitwidth?                       uint8
    +--rw compression-type                   enumeration
    x--rw bitwidth?                          uint8
    +--rw (compression-format)?
       +--:(no-compresison)
       +--:(block-floating-point)
       |  +--rw exponent?                          uint8
       +--:(block-scaling)
       |  +--rw block-scalar?                      uint8
       +--:(u-law)
       |  +--rw comp-bit-width?                    uint8
       |  +--rw comp-shift?                        uint8
       +--:(beam-space-compression)
       |  +--rw active-beam-space-coeficient-mask* uint8
       |  +--rw block-scaler?                      uint8
       +--:(modulation-compression)
          +--rw csf?                               uint8
          +--rw mod-comp-scaler?                   uint16

module: o-ran-delay-management
  +--rw delay-management
     +--rw bandwidth-scs-delay-state* [bandwidth subcarrier-spacing]
     |  +--rw bandwidth           bandwidth
     |  +--rw subcarrier-spacing  uint32
     |  +--ro ru-delay-profile
     |     +--ro t2a-min-up     uint32
     |     +--ro t2a-max-up     uint32
     |     +--ro t2a-min-cp-dl  uint32
     |     +--ro t2a-max-cp-dl  uint32
     |     +--ro tcp-adv-dl     uint32
     |     +--ro ta3-min        uint32
     |     +--ro ta3-max        uint32
     |     +--ro t2a-min-cp-ul  uint32
     |     +--ro t2a-max-cp-ul  uint32
     +--rw adaptive-delay-configuration {ADAPTIVE-RU-PROFILE}?
        +--rw bandwidth-scs-delay-state* [bandwidth subcarrier-spacing]
        |  +--rw bandwidth           bandwidth
        |  +--rw subcarrier-spacing  uint32
        |  +--rw o-du-delay-profile
        |     +--rw t1a-max-up? uint32
        |     +--rw tx-max?     uint32
        |     +--rw ta4-max?    uint32
        |     +--rw rx-max?     uint32
        +--rw transport-delay
           +--rw t12-min? uint32
           +--rw t12-max? uint32
           +--rw t34-min? uint32
           +--rw t34-max? uint32

  grouping bandwidth-configuration:
    +--rw bandwidth?          bandwidth
    +--rw subcarrier-spacing? uint32
  grouping t2a-up:
    +--rw t2a-min-up  uint32
    +--rw t2a-max-up  uint32
  grouping t2a-cp-dl:
    +--rw t2a-min-cp-dl  uint32
    +--rw t2a-max-cp-dl  uint32
  grouping ta3:
    +--rw ta3-min  uint32
    +--rw ta3-max  uint32
  grouping t2a-cp-ul:
    +--rw t2a-min-cp-ul  uint32
    +--rw t2a-max-cp-ul  uint32
  grouping ru-delay-profile:
    +--rw t2a-min-up     uint32
    +--rw t2a-max-up     uint32
    +--rw t2a-min-cp-dl  uint32
    +--rw t2a-max-cp-dl  uint32
    +--rw tcp-adv-dl     uint32
    +--rw ta3-min        uint32
    +--rw ta3-max        uint32
    +--rw t2a-min-cp-ul  uint32
    +--rw t2a-max-cp-ul  uint32
  grouping o-du-delay-profile:
    +--rw t1a-max-up? uint32
    +--rw tx-max?     uint32
    +--rw ta4-max?    uint32
    +--rw rx-max?     uint32
  grouping t12:
    +--rw t12-min? uint32
    +--rw t12-max? uint32
  grouping t34:
    +--rw t34-min? uint32
    +--rw t34-max? uint32
  grouping delay-management-group:
    +--rw bandwidth-scs-delay-state* [bandwidth subcarrier-spacing]
    |  +--rw bandwidth           bandwidth
    |  +--rw subcarrier-spacing  uint32
    |  +--ro ru-delay-profile
    |     +--ro t2a-min-up     uint32
    |     +--ro t2a-max-up     uint32
    |     +--ro t2a-min-cp-dl  uint32
    |     +--ro t2a-max-cp-dl  uint32
    |     +--ro tcp-adv-dl     uint32
    |     +--ro ta3-min        uint32
    |     +--ro ta3-max        uint32
    |     +--ro t2a-min-cp-ul  uint32
    |     +--ro t2a-max-cp-ul  uint32
    +--rw adaptive-delay-configuration {ADAPTIVE-RU-PROFILE}?
       +--rw bandwidth-scs-delay-state* [bandwidth subcarrier-spacing]
       |  +--rw bandwidth           bandwidth
       |  +--rw subcarrier-spacing  uint32
       |  +--rw o-du-delay-profile
       |     +--rw t1a-max-up? uint32
       |     +--rw tx-max?     uint32
       |     +--rw ta4-max?    uint32
       |     +--rw rx-max?     uint32
       +--rw transport-delay
          +--rw t12-min? uint32
          +--rw t12-max? uint32
          +--rw t34-min? uint32
          +--rw t34-max? uint32

module: o-ran-dhcp
  +--ro dhcp
     +--ro interfaces* [interface]
     |  +--ro interface  if:interface-ref
     |  +--ro dhcpv4
     |  |  +--ro client-id?              string
     |  |  +--ro dhcp-server-identifier? inet:ip-address
     |  |  +--ro domain-name?            string
     |  |  +--ro domain-name-servers*    inet:ip-address
     |  |  +--ro interface-mtu?          uint32
     |  |  +--ro default-gateways*       inet:ip-address
     |  |  +--ro netconf-clients* [client]
     |  |  |  +--ro client         netconf-client-id
     |  |  |  +--ro optional-port? inet:port-number
     |  |  +--ro ca-ra-servers* [servers]
     |  |  |  +--ro servers       ca-ra-server-id
     |  |  |  +--ro port-number?  inet:port-number
     |  |  |  +--ro ca-ra-path?   string
     |  |  |  +--ro subject-name? string
     |  |  |  +--ro protocol?     enumeration
     |  |  +--ro segw* [gateways]
     |  |     +--ro gateways  segw-id
     |  +--ro dhcpv6
     |     +--ro dhcp-client-identifier
     |     |  +--ro type-code?                 uint16
     |     |  +--ro (duid-type)?
     |     |     +--:(duid-llt)
     |     |     |  +--ro duid-llt-hardware-type?    uint16
     |     |     |  +--ro duid-llt-time?             yang:timeticks
     |     |     |  +--ro duid-llt-link-layer-addr?  yang:mac-address
     |     |     +--:(duid-en)
     |     |     |  +--ro duid-en-enterprise-number? uint32
     |     |     |  +--ro duid-en-identifier?        string
     |     |     +--:(duid-ll)
     |     |     |  +--ro duid-ll-hardware-type?     uint16
     |     |     |  +--ro duid-ll-link-layer-addr?   yang:mac-address
     |     |     +--:(duid-uuid)
     |     |     |  +--ro uuid?                      yang:uuid
     |     |     +--:(duid-unknown)
     |     |        +--ro data?                      binary
     |     +--ro dhcp-server-identifier
     |     |  +--ro type-code?                 uint16
     |     |  +--ro (duid-type)?
     |     |     +--:(duid-llt)
     |     |     |  +--ro duid-llt-hardware-type?    uint16
     |     |     |  +--ro duid-llt-time?             yang:timeticks
     |     |     |  +--ro duid-llt-link-layer-addr?  yang:mac-address
     |     |     +--:(duid-en)
     |     |     |  +--ro duid-en-enterprise-number? uint32
     |     |     |  +--ro duid-en-identifier?        string
     |     |     +--:(duid-ll)
     |     |     |  +--ro duid-ll-hardware-type?     uint16
     |     |     |  +--ro duid-ll-link-layer-addr?   yang:mac-address
     |     |     +--:(duid-uuid)
     |     |     |  +--ro uuid?                      yang:uuid
     |     |     +--:(duid-unknown)
     |     |        +--ro data?                      binary
     |     +--ro domain-name?            string
     |     +--ro domain-name-servers*    inet:ip-address
     |     +--ro netconf-clients* [client]
     |     |  +--ro client         netconf-client-id
     |     |  +--ro optional-port? inet:port-number
     |     +--ro ca-ra-servers* [servers]
     |     |  +--ro servers       ca-ra-server-id
     |     |  +--ro port-number?  inet:port-number
     |     |  +--ro ca-ra-path?   string
     |     |  +--ro subject-name? string
     |     |  +--ro protocol?     enumeration
     |     +--ro segw* [gateways]
     |        +--ro gateways  segw-id
     +--ro m-plane-dhcp
        x--ro private-enterprise-number? uint16
        +--ro private-enterprise-num?    uint32
        +--ro vendor-class-data?         string

  grouping ca-ra-servers:
    +--rw ca-ra-servers* [servers]
       +--rw servers       ca-ra-server-id
       +--rw port-number?  inet:port-number
       +--rw ca-ra-path?   string
       +--rw subject-name? string
       +--rw protocol?     enumeration
  grouping security-gateways:
    +--rw segw* [gateways]
       +--rw gateways  segw-id
  grouping netconf-clients:
    +--rw netconf-clients* [client]
       +--rw client         netconf-client-id
       +--rw optional-port? inet:port-number
  grouping dhcpv4-option:
    +--rw dhcp-server-identifier? inet:ip-address
    +--rw domain-name?            string
    +--rw domain-name-servers*    inet:ip-address
    +--rw interface-mtu?          uint32
    +--rw default-gateways*       inet:ip-address
    +--rw netconf-clients* [client]
    |  +--rw client         netconf-client-id
    |  +--rw optional-port? inet:port-number
    +--rw ca-ra-servers* [servers]
    |  +--rw servers       ca-ra-server-id
    |  +--rw port-number?  inet:port-number
    |  +--rw ca-ra-path?   string
    |  +--rw subject-name? string
    |  +--rw protocol?     enumeration
    +--rw segw* [gateways]
       +--rw gateways  segw-id
  grouping dhcpv6-option:
    +--rw dhcp-server-identifier
    |  +--rw type-code?                 uint16
    |  +--rw (duid-type)?
    |     +--:(duid-llt)
    |     |  +--rw duid-llt-hardware-type?    uint16
    |     |  +--rw duid-llt-time?             yang:timeticks
    |     |  +--rw duid-llt-link-layer-addr?  yang:mac-address
    |     +--:(duid-en)
    |     |  +--rw duid-en-enterprise-number? uint32
    |     |  +--rw duid-en-identifier?        string
    |     +--:(duid-ll)
    |     |  +--rw duid-ll-hardware-type?     uint16
    |     |  +--rw duid-ll-link-layer-addr?   yang:mac-address
    |     +--:(duid-uuid)
    |     |  +--rw uuid?                      yang:uuid
    |     +--:(duid-unknown)
    |        +--rw data?                      binary
    +--rw domain-name?            string
    +--rw domain-name-servers*    inet:ip-address
    +--rw netconf-clients* [client]
    |  +--rw client         netconf-client-id
    |  +--rw optional-port? inet:port-number
    +--rw ca-ra-servers* [servers]
    |  +--rw servers       ca-ra-server-id
    |  +--rw port-number?  inet:port-number
    |  +--rw ca-ra-path?   string
    |  +--rw subject-name? string
    |  +--rw protocol?     enumeration
    +--rw segw* [gateways]
       +--rw gateways  segw-id
  grouping dhcp-group:
    +--rw interfaces* [interface]
    |  +--rw interface  if:interface-ref
    |  +--rw dhcpv4
    |  |  +--rw client-id?              string
    |  |  +--rw dhcp-server-identifier? inet:ip-address
    |  |  +--rw domain-name?            string
    |  |  +--rw domain-name-servers*    inet:ip-address
    |  |  +--rw interface-mtu?          uint32
    |  |  +--rw default-gateways*       inet:ip-address
    |  |  +--rw netconf-clients* [client]
    |  |  |  +--rw client         netconf-client-id
    |  |  |  +--rw optional-port? inet:port-number
    |  |  +--rw ca-ra-servers* [servers]
    |  |  |  +--rw servers       ca-ra-server-id
    |  |  |  +--rw port-number?  inet:port-number
    |  |  |  +--rw ca-ra-path?   string
    |  |  |  +--rw subject-name? string
    |  |  |  +--rw protocol?     enumeration
    |  |  +--rw segw* [gateways]
    |  |     +--rw gateways  segw-id
    |  +--rw dhcpv6
    |     +--rw dhcp-client-identifier
    |     |  +--rw type-code?                 uint16
    |     |  +--rw (duid-type)?
    |     |     +--:(duid-llt)
    |     |     |  +--rw duid-llt-hardware-type?    uint16
    |     |     |  +--rw duid-llt-time?             yang:timeticks
    |     |     |  +--rw duid-llt-link-layer-addr?  yang:mac-address
    |     |     +--:(duid-en)
    |     |     |  +--rw duid-en-enterprise-number? uint32
    |     |     |  +--rw duid-en-identifier?        string
    |     |     +--:(duid-ll)
    |     |     |  +--rw duid-ll-hardware-type?     uint16
    |     |     |  +--rw duid-ll-link-layer-addr?   yang:mac-address
    |     |     +--:(duid-uuid)
    |     |     |  +--rw uuid?                      yang:uuid
    |     |     +--:(duid-unknown)
    |     |        +--rw data?                      binary
    |     +--rw dhcp-server-identifier
    |     |  +--rw type-code?                 uint16
    |     |  +--rw (duid-type)?
    |     |     +--:(duid-llt)
    |     |     |  +--rw duid-llt-hardware-type?    uint16
    |     |     |  +--rw duid-llt-time?             yang:timeticks
    |     |     |  +--rw duid-llt-link-layer-addr?  yang:mac-address
    |     |     +--:(duid-en)
    |     |     |  +--rw duid-en-enterprise-number? uint32
    |     |     |  +--rw duid-en-identifier?        string
    |     |     +--:(duid-ll)
    |     |     |  +--rw duid-ll-hardware-type?     uint16
    |     |     |  +--rw duid-ll-link-layer-addr?   yang:mac-address
    |     |     +--:(duid-uuid)
    |     |     |  +--rw uuid?                      yang:uuid
    |     |     +--:(duid-unknown)
    |     |        +--rw data?                      binary
    |     +--rw domain-name?            string
    |     +--rw domain-name-servers*    inet:ip-address
    |     +--rw netconf-clients* [client]
    |     |  +--rw client         netconf-client-id
    |     |  +--rw optional-port? inet:port-number
    |     +--rw ca-ra-servers* [servers]
    |     |  +--rw servers       ca-ra-server-id
    |     |  +--rw port-number?  inet:port-number
    |     |  +--rw ca-ra-path?   string
    |     |  +--rw subject-name? string
    |     |  +--rw protocol?     enumeration
    |     +--rw segw* [gateways]
    |        +--rw gateways  segw-id
    +--rw m-plane-dhcp
       x--rw private-enterprise-number? uint16
       +--rw private-enterprise-num?    uint32
       +--rw vendor-class-data?         string

module: o-ran-ecpri-delay
  +--rw ecpri-delay-message
     +--ro ru-compensation
     |  +--ro tcv2? uint32
     |  +--ro tcv1? uint32
     +--rw enable-message5?   boolean
     +--rw message5-sessions
        +--rw session-parameters* [session-id]
           +--rw session-id               uint32
           +--rw processing-element-name? leafref
           +--ro flow-state
              +--ro responses-transmitted? uint32
              +--ro requests-transmitted?  uint32
              +--ro followups-transmitted? uint32

  grouping msg5-group:
    +--ro ru-compensation
    |  +--ro tcv2? uint32
    |  +--ro tcv1? uint32
    +--rw enable-message5?   boolean
    +--rw message5-sessions
       +--rw session-parameters* [session-id]
          +--rw session-id               uint32
          +--rw processing-element-name? leafref
          +--ro flow-state
             +--ro responses-transmitted? uint32
             +--ro requests-transmitted?  uint32
             +--ro followups-transmitted? uint32

module: o-ran-externalio
  +--rw external-io
     +--ro input* [name]
     |  +--ro name     string
     |  +--ro port-in? uint8
     |  +--ro line-in? boolean
     +--ro output* [name]
     |  +--ro name      string
     |  +--ro port-out  uint8
     +--rw output-setting* [name]
        +--rw name      leafref
        +--rw line-out? boolean

  notifications:
    +---n external-input-change  
       +--ro current-input-notification
          +--ro external-input* [name]
             +--ro name     leafref
             +--ro io-port? leafref
             +--ro line-in? leafref

  grouping external-io-group:
    +--ro input* [name]
    |  +--ro name     string
    |  +--ro port-in? uint8
    |  +--ro line-in? boolean
    +--ro output* [name]
    |  +--ro name      string
    |  +--ro port-out  uint8
    +--rw output-setting* [name]
       +--rw name      leafref
       +--rw line-out? boolean
  grouping notification-group:
    +--rw current-input-notification
       +--rw external-input* [name]
          +--rw name     leafref
          +--rw io-port? leafref
          +--rw line-in? leafref

module: o-ran-fan
  +--ro fan-tray
     +--ro fan-state* [name]
        +--ro name                   string
        +--ro fan-location?          uint8
        +--ro present-and-operating  boolean
        +--ro vendor-code?           uint8
        +--ro fan-speed?             percent
        +--ro target-speed?          uint16

  grouping fan-grouping:
    +--rw fan-state* [name]
       +--rw name                   string
       +--rw fan-location?          uint8
       +--rw present-and-operating  boolean
       +--rw vendor-code?           uint8
       +--rw fan-speed?             percent
       +--rw target-speed?          uint16

module: o-ran-file-management

  rpcs:
    +---x file-upload         
    |  +---w input   
    |  |  +---w local-logical-file-path  string
    |  |  +---w remote-file-path         string
    |  |  +---w (credentials)?
    |  |     +--:(password)
    |  |     |  +---w password!
    |  |     |  |  +---w password  string
    |  |     |  +---w server
    |  |     |     +---w keys* [algorithm]
    |  |     |        +---w algorithm   asymmetric-key-algorithm-ref
    |  |     |        +---w public-key? binary
    |  |     +--:(certificate)
    |  |        +---w certificate!
    |  +--ro output  
    |     +--ro status?        enumeration
    |     +--ro reject-reason? string
    +---x retrieve-file-list  
    |  +---w input   
    |  |  +---w logical-path      string
    |  |  +---w file-name-filter? string
    |  +--ro output  
    |     +--ro status?        enumeration
    |     +--ro reject-reason? string
    |     +--ro file-list*     string
    +---x file-download       
       +---w input   
       |  +---w local-logical-file-path  string
       |  +---w remote-file-path         string
       |  +---w (credentials)?
       |     +--:(password)
       |     |  +---w password!
       |     |  |  +---w password  string
       |     |  +---w server
       |     |     +---w keys* [algorithm]
       |     |        +---w algorithm   asymmetric-key-algorithm-ref
       |     |        +---w public-key? binary
       |     +--:(certificate)
       |        +---w certificate!
       +--ro output  
          +--ro status?        enumeration
          +--ro reject-reason? string

  notifications:
    +---n file-upload-notification  
    |  +--ro local-logical-file-path  string
    |  +--ro remote-file-path         string
    |  +--ro status?                  enumeration
    |  +--ro reject-reason?           string
    +---n file-download-event       
       +--ro local-logical-file-path  string
       +--ro remote-file-path         string
       +--ro status?                  enumeration
       +--ro reject-reason?           string

  grouping file-path-grouping:
    +--rw local-logical-file-path  string
    +--rw remote-file-path         string
  grouping output-status-grouping:
    +--rw status?        enumeration
    +--rw reject-reason? string
  grouping credential-information:
    +--rw (credentials)?
       +--:(password)
       |  +--rw password!
       |  |  +--rw password  string
       |  +--rw server
       |     +--rw keys* [algorithm]
       |        +--rw algorithm   asymmetric-key-algorithm-ref
       |        +--rw public-key? binary
       +--:(certificate)
          +--rw certificate!
  grouping retrieve-input:
    +--rw logical-path      string
    +--rw file-name-filter? string
  grouping retrieve-output:
    +--rw status?        enumeration
    +--rw reject-reason? string
    +--rw file-list*     string

module: o-ran-fm
  +--ro active-alarm-list
     +--ro active-alarms*
        +--ro fault-id          uint16
        +--ro fault-source      string
        +--ro affected-objects*
        |  +--ro name  string
        +--ro fault-severity    enumeration
        +--ro is-cleared        boolean
        +--ro fault-text?       string
        +--ro event-time        yang:date-and-time

  notifications:
    +---n alarm-notif  
       +--ro fault-id          uint16
       +--ro fault-source      string
       +--ro affected-objects*
       |  +--ro name  string
       +--ro fault-severity    enumeration
       +--ro is-cleared        boolean
       +--ro fault-text?       string
       +--ro event-time        yang:date-and-time

  grouping alarm:
    +--rw fault-id          uint16
    +--rw fault-source      string
    +--rw affected-objects*
    |  +--rw name  string
    +--rw fault-severity    enumeration
    +--rw is-cleared        boolean
    +--rw fault-text?       string
    +--rw event-time        yang:date-and-time

module: o-ran-hardware

  augment /hw:hardware/hw:component:
    +--ro label-content
    |  +--ro model-name?    boolean
    |  +--ro serial-number? boolean
    +--ro product-code           string
    +--rw energy-saving-enabled? boolean {ENERGYSAVING}?
  augment /hw:hardware/hw:component:
    +--rw o-ran-name  leafref
  augment /hw:hardware/hw:component/hw:state:
    +--ro power-state?        energysaving-state {ENERGYSAVING}?
    +--ro availability-state? availability-type
  augment /hw:hardware-state-oper-enabled:
    +--rw availability-state? leafref
  augment /hw:hardware-state-oper-disabled:
    +--rw availability-state? leafref

module: o-ran-interfaces

  augment /if:interfaces/if:interface:
    +--rw l2-mtu?           uint16
    +--rw vlan-tagging?     boolean
    +--rw class-of-service
       +--rw u-plane-marking?          pcp
       +--rw c-plane-marking?          pcp
       +--rw m-plane-marking?          pcp
       +--rw s-plane-marking?          pcp
       +--rw other-marking?            pcp
       +--rw enhanced-uplane-markings* [up-marking-name]
          +--rw up-marking-name   string
          +--rw enhanced-marking? pcp
  augment /if:interfaces/if:interface:
    +--rw base-interface? if:interface-ref
    +--rw vlan-id?        uint16
  augment /if:interfaces/if:interface:
    +--ro last-cleared? yang:date-and-time
  augment /if:interfaces/if:interface/ip:ipv4:
    +--rw m-plane-marking? inet:dscp
  augment /if:interfaces/if:interface/ip:ipv6:
    +--rw m-plane-marking? inet:dscp
  augment /if:interfaces/if:interface: {ALIASMAC-BASED-CU-PLANE}?
    +--rw alias-macs* yang:mac-address
  augment /if:interfaces/if:interface:
    +--rw mac-address?    yang:mac-address
    +--rw port-reference
       +--rw port-name?   leafref
       +--rw port-number? uint8
  augment /if:interfaces/if:interface/ip:ipv4: {UDPIP-BASED-CU-PLANE}?
    +--rw diffserv-markings
       +--rw u-plane-marking?          inet:dscp
       +--rw c-plane-marking?          inet:dscp
       +--rw s-plane-marking?          inet:dscp
       +--rw other-marking?            inet:dscp
       +--rw enhanced-uplane-markings* [up-marking-name]
          +--rw up-marking-name   string
          +--rw enhanced-marking? inet:dscp
  augment /if:interfaces/if:interface/ip:ipv6: {UDPIP-BASED-CU-PLANE}?
    +--rw diffserv-markings
       +--rw u-plane-marking?          inet:dscp
       +--rw c-plane-marking?          inet:dscp
       +--rw s-plane-marking?          inet:dscp
       +--rw other-marking?            inet:dscp
       +--rw enhanced-uplane-markings* [up-marking-name]
          +--rw up-marking-name   string
          +--rw enhanced-marking? inet:dscp

  rpcs:
    +---x reset-interface-counters  

  grouping cos-marking:
    +--rw class-of-service
       +--rw u-plane-marking?          pcp
       +--rw c-plane-marking?          pcp
       +--rw m-plane-marking?          pcp
       +--rw s-plane-marking?          pcp
       +--rw other-marking?            pcp
       +--rw enhanced-uplane-markings* [up-marking-name]
          +--rw up-marking-name   string
          +--rw enhanced-marking? pcp
  grouping dscp-marking:
    +--rw diffserv-markings
       +--rw u-plane-marking?          inet:dscp
       +--rw c-plane-marking?          inet:dscp
       +--rw s-plane-marking?          inet:dscp
       +--rw other-marking?            inet:dscp
       +--rw enhanced-uplane-markings* [up-marking-name]
          +--rw up-marking-name   string
          +--rw enhanced-marking? inet:dscp

module: o-ran-laa
  +--rw laa-config!
     +--rw number-of-laa-scarriers?               uint8
     +--rw multi-carrier-type?                    enumeration
     +--rw multi-carrier-tx?                      boolean
     +--rw multi-carrier-freeze?                  boolean
     +--rw laa-ending-dwpts-supported?            boolean
     +--rw laa-starting-in-second-slot-supported? boolean

  grouping laa-configuration:
    +--rw number-of-laa-scarriers?               uint8
    +--rw multi-carrier-type?                    enumeration
    +--rw multi-carrier-tx?                      boolean
    +--rw multi-carrier-freeze?                  boolean
    +--rw laa-ending-dwpts-supported?            boolean
    +--rw laa-starting-in-second-slot-supported? boolean

module: o-ran-laa-operations

  rpcs:
    +---x start-measurements   {mcap:LAA}?
       +---w input   
       |  +---w band-config* [band-number]
       |  |  +---w band-number               band-num
       |  |  +---w channel-center-frequency* uint16
       |  +---w duration-per-channel?  uint16
       |  +---w maximum-response-time? uint16
       +--ro output  
          +--ro band-config* [band-number]
             +--ro band-number               band-num
             +--ro carrier-center-frequency* uint16
             +--ro status?                   enumeration
             +--ro error-message?            string

  notifications:
    +---n measurement-result   {mcap:LAA}?
       +--ro band-result* [band-number]
          +--ro band-number          band-num
          +--ro measurement-success? boolean
          +--ro failure-message?     enumeration
          +--ro channel-result* [measured-channel]
             +--ro measured-channel  uint16
             +--ro occupancy-ratio?  uint8
             +--ro average-rssi?     int8

  grouping band-configuration:
    +--rw band-number?              band-num
    +--rw channel-center-frequency* uint16
  grouping measurement-parameters:
    +--rw duration-per-channel?  uint16
    +--rw maximum-response-time? uint16
  grouping channel-result-element:
    +--rw measured-channel? uint16
    +--rw occupancy-ratio?  uint8
    +--rw average-rssi?     int8
  grouping band-result-element:
    +--rw band-number?         band-num
    +--rw measurement-success? boolean
    +--rw failure-message?     enumeration
    +--rw channel-result* [measured-channel]
       +--rw measured-channel  uint16
       +--rw occupancy-ratio?  uint8
       +--rw average-rssi?     int8

module: o-ran-lbm
  +--rw md-data-definitions
     +--rw maintenance-domain* [id]
        +--rw id                       string
        +--rw name?                    string
        +--rw md-level?                md-level-type
        +--rw maintenance-association* [id]
           +--rw id              string
           +--rw name?           string
           +--rw component-list* [component-id]
              +--rw component-id                       uint32
              +--rw name?                              string
              +--rw vid*                               leafref
              +--rw remote-meps*                       mep-id-type
              +--rw maintenance-association-end-point* [mep-identifier]
                 +--rw mep-identifier        mep-id-type
                 +--rw interface             leafref
                 +--rw primary-vid           leafref
                 +--rw administrative-state  boolean
                 +--ro mac-address?          leafref
                 +--ro loopback
                    +--ro replies-transmitted  yang:counter32

  grouping md-group:
    +--rw maintenance-domain* [id]
       +--rw id                       string
       +--rw name?                    string
       +--rw md-level?                md-level-type
       +--rw maintenance-association* [id]
          +--rw id              string
          +--rw name?           string
          +--rw component-list* [component-id]
             +--rw component-id                       uint32
             +--rw name?                              string
             +--rw vid*                               leafref
             +--rw remote-meps*                       mep-id-type
             +--rw maintenance-association-end-point* [mep-identifier]
                +--rw mep-identifier        mep-id-type
                +--rw interface             leafref
                +--rw primary-vid           leafref
                +--rw administrative-state  boolean
                +--ro mac-address?          leafref
                +--ro loopback
                   +--ro replies-transmitted  yang:counter32

module: o-ran-module-cap
  +--rw module-capability
     +--ro ru-capabilities
     |  +--ro ru-supported-category?                        enumeration
     |  +--ro number-of-ru-ports?                           uint8
     |  +--ro number-of-spatial-streams?                    uint8
     |  +--ro max-power-per-pa-antenna?                     decimal64
     |  +--ro min-power-per-pa-antenna?                     decimal64
     |  +--ro fronthaul-split-option?                       uint8
     |  +--ro format-of-iq-sample
     |  |  +--ro dynamic-compression-supported?            boolean
     |  |  +--ro realtime-variable-bit-width-supported?    boolean
     |  |  +--ro compression-method-supported*
     |  |  |  +--ro iq-bitwidth?                       uint8
     |  |  |  +--ro compression-type                   enumeration
     |  |  |  x--ro bitwidth?                          uint8
     |  |  |  +--ro (compression-format)?
     |  |  |     +--:(no-compresison)
     |  |  |     +--:(block-floating-point)
     |  |  |     |  +--ro exponent?                          uint8
     |  |  |     +--:(block-scaling)
     |  |  |     |  +--ro block-scalar?                      uint8
     |  |  |     +--:(u-law)
     |  |  |     |  +--ro comp-bit-width?                    uint8
     |  |  |     |  +--ro comp-shift?                        uint8
     |  |  |     +--:(beam-space-compression)
     |  |  |     |  +--ro active-beam-space-coeficient-mask* uint8
     |  |  |     |  +--ro block-scaler?                      uint8
     |  |  |     +--:(modulation-compression)
     |  |  |        +--ro csf?                               uint8
     |  |  |        +--ro mod-comp-scaler?                   uint16
     |  |  +--ro variable-bit-width-per-channel-supported? boolean
     |  |  +--ro syminc-supported?                         boolean
     |  +--ro ul-mixed-num-required-guard-rbs* [scs-a scs-b]
     |  |  +--ro scs-a                   scs-config-type
     |  |  +--ro scs-b                   scs-config-type
     |  |  +--ro number-of-guard-rbs-ul? uint8
     |  +--ro dl-mixed-num-required-guard-rbs* [scs-a scs-b]
     |  |  +--ro scs-a                   scs-config-type
     |  |  +--ro scs-b                   scs-config-type
     |  |  +--ro number-of-guard-rbs-dl? uint8
     |  +--ro energy-saving-by-transmission-blanks          boolean
     |  +--ro dynamic-transport-delay-management-supported  boolean
     +--ro band-capabilities* [band-number]
     |  +--ro band-number                 uint16
     |  +--ro sub-band-info {o-ran-module-cap:LAA}?
     |  |  +--ro sub-band-frequency-ranges* [sub-band]
     |  |  |  +--ro sub-band                    sub-band-string
     |  |  |  +--ro max-supported-frequency-dl? uint64
     |  |  |  +--ro min-supported-frequency-dl? uint64
     |  |  +--ro number-of-laa-scarriers?   uint8
     |  |  +--ro maximum-laa-buffer-size?   uint16
     |  |  +--ro maximum-processing-time?   uint16
     |  |  +--ro self-configure?            boolean
     |  +--ro max-supported-frequency-dl? uint64
     |  +--ro min-supported-frequency-dl? uint64
     |  +--ro max-supported-bandwidth-dl? uint64
     |  +--ro max-num-carriers-dl?        uint32
     |  +--ro max-carrier-bandwidth-dl?   uint64
     |  +--ro min-carrier-bandwidth-dl?   uint64
     |  +--ro max-supported-frequency-ul? uint64
     |  +--ro min-supported-frequency-ul? uint64
     |  +--ro max-supported-bandwidth-ul? uint64
     |  +--ro max-num-carriers-ul?        uint32
     |  +--ro max-carrier-bandwidth-ul?   uint64
     |  +--ro min-carrier-bandwidth-ul?   uint64
     |  +--ro max-num-component-carriers? uint8
     |  +--ro max-num-bands?              uint16
     |  +--ro max-num-sectors?            uint8
     |  +--ro max-power-per-antenna?      decimal64
     |  +--ro min-power-per-antenna?      decimal64
     |  +--ro codebook-configuration_ng?  uint8
     |  +--ro codebook-configuration_n1?  uint8
     |  +--ro codebook-configuration_n2?  uint8
     +--rw rw-sub-band-info {o-ran-module-cap:LAA}?
        +--rw rw-number-of-laa-scarriers? leafref
        +--rw rw-self-configure?          leafref

  grouping compression-method-grouping:
    +--rw compression-method? enumeration
  grouping sub-band-max-min-ul-dl-frequency:
    +--rw max-supported-frequency-dl? uint64
    +--rw min-supported-frequency-dl? uint64
  grouping format-of-iq-sample:
    +--rw dynamic-compression-supported?            boolean
    +--rw realtime-variable-bit-width-supported?    boolean
    +--rw compression-method-supported*
    |  +--rw iq-bitwidth?                       uint8
    |  +--rw compression-type                   enumeration
    |  x--rw bitwidth?                          uint8
    |  +--rw (compression-format)?
    |     +--:(no-compresison)
    |     +--:(block-floating-point)
    |     |  +--rw exponent?                          uint8
    |     +--:(block-scaling)
    |     |  +--rw block-scalar?                      uint8
    |     +--:(u-law)
    |     |  +--rw comp-bit-width?                    uint8
    |     |  +--rw comp-shift?                        uint8
    |     +--:(beam-space-compression)
    |     |  +--rw active-beam-space-coeficient-mask* uint8
    |     |  +--rw block-scaler?                      uint8
    |     +--:(modulation-compression)
    |        +--rw csf?                               uint8
    |        +--rw mod-comp-scaler?                   uint16
    +--rw variable-bit-width-per-channel-supported? boolean
    +--rw syminc-supported?                         boolean
  grouping scs-a-b:
    +--rw scs-a? scs-config-type
    +--rw scs-b? scs-config-type
  grouping ul-mixed-num-required-guard-rbs:
    +--rw scs-a?                  scs-config-type
    +--rw scs-b?                  scs-config-type
    +--rw number-of-guard-rbs-ul? uint8
  grouping dl-mixed-num-required-guard-rbs:
    +--rw scs-a?                  scs-config-type
    +--rw scs-b?                  scs-config-type
    +--rw number-of-guard-rbs-dl? uint8
  grouping ru-capabilities:
    +--rw ru-supported-category?                        enumeration
    +--rw number-of-ru-ports?                           uint8
    +--rw number-of-spatial-streams?                    uint8
    +--rw max-power-per-pa-antenna?                     decimal64
    +--rw min-power-per-pa-antenna?                     decimal64
    +--rw fronthaul-split-option?                       uint8
    +--rw format-of-iq-sample
    |  +--rw dynamic-compression-supported?            boolean
    |  +--rw realtime-variable-bit-width-supported?    boolean
    |  +--rw compression-method-supported*
    |  |  +--rw iq-bitwidth?                       uint8
    |  |  +--rw compression-type                   enumeration
    |  |  x--rw bitwidth?                          uint8
    |  |  +--rw (compression-format)?
    |  |     +--:(no-compresison)
    |  |     +--:(block-floating-point)
    |  |     |  +--rw exponent?                          uint8
    |  |     +--:(block-scaling)
    |  |     |  +--rw block-scalar?                      uint8
    |  |     +--:(u-law)
    |  |     |  +--rw comp-bit-width?                    uint8
    |  |     |  +--rw comp-shift?                        uint8
    |  |     +--:(beam-space-compression)
    |  |     |  +--rw active-beam-space-coeficient-mask* uint8
    |  |     |  +--rw block-scaler?                      uint8
    |  |     +--:(modulation-compression)
    |  |        +--rw csf?                               uint8
    |  |        +--rw mod-comp-scaler?                   uint16
    |  +--rw variable-bit-width-per-channel-supported? boolean
    |  +--rw syminc-supported?                         boolean
    +--rw ul-mixed-num-required-guard-rbs* [scs-a scs-b]
    |  +--rw scs-a                   scs-config-type
    |  +--rw scs-b                   scs-config-type
    |  +--rw number-of-guard-rbs-ul? uint8
    +--rw dl-mixed-num-required-guard-rbs* [scs-a scs-b]
    |  +--rw scs-a                   scs-config-type
    |  +--rw scs-b                   scs-config-type
    |  +--rw number-of-guard-rbs-dl? uint8
    +--rw energy-saving-by-transmission-blanks          boolean
    +--rw dynamic-transport-delay-management-supported  boolean
  grouping sub-band-info:
    +--rw sub-band-frequency-ranges* [sub-band]
    |  +--rw sub-band                    sub-band-string
    |  +--rw max-supported-frequency-dl? uint64
    |  +--rw min-supported-frequency-dl? uint64
    +--rw number-of-laa-scarriers?   uint8
    +--rw maximum-laa-buffer-size?   uint16
    +--rw maximum-processing-time?   uint16
    +--rw self-configure?            boolean
  grouping support-for-dl:
    +--rw max-supported-frequency-dl? uint64
    +--rw min-supported-frequency-dl? uint64
    +--rw max-supported-bandwidth-dl? uint64
    +--rw max-num-carriers-dl?        uint32
    +--rw max-carrier-bandwidth-dl?   uint64
    +--rw min-carrier-bandwidth-dl?   uint64
  grouping support-for-ul:
    +--rw max-supported-frequency-ul? uint64
    +--rw min-supported-frequency-ul? uint64
    +--rw max-supported-bandwidth-ul? uint64
    +--rw max-num-carriers-ul?        uint32
    +--rw max-carrier-bandwidth-ul?   uint64
    +--rw min-carrier-bandwidth-ul?   uint64
  grouping band-capabilities:
    +--rw band-number?                uint16
    +--rw sub-band-info {o-ran-module-cap:LAA}?
    |  +--rw sub-band-frequency-ranges* [sub-band]
    |  |  +--rw sub-band                    sub-band-string
    |  |  +--rw max-supported-frequency-dl? uint64
    |  |  +--rw min-supported-frequency-dl? uint64
    |  +--rw number-of-laa-scarriers?   uint8
    |  +--rw maximum-laa-buffer-size?   uint16
    |  +--rw maximum-processing-time?   uint16
    |  +--rw self-configure?            boolean
    +--rw max-supported-frequency-dl? uint64
    +--rw min-supported-frequency-dl? uint64
    +--rw max-supported-bandwidth-dl? uint64
    +--rw max-num-carriers-dl?        uint32
    +--rw max-carrier-bandwidth-dl?   uint64
    +--rw min-carrier-bandwidth-dl?   uint64
    +--rw max-supported-frequency-ul? uint64
    +--rw min-supported-frequency-ul? uint64
    +--rw max-supported-bandwidth-ul? uint64
    +--rw max-num-carriers-ul?        uint32
    +--rw max-carrier-bandwidth-ul?   uint64
    +--rw min-carrier-bandwidth-ul?   uint64
    +--rw max-num-component-carriers? uint8
    +--rw max-num-bands?              uint16
    +--rw max-num-sectors?            uint8
    +--rw max-power-per-antenna?      decimal64
    +--rw min-power-per-antenna?      decimal64
    +--rw codebook-configuration_ng?  uint8
    +--rw codebook-configuration_n1?  uint8
    +--rw codebook-configuration_n2?  uint8

module: o-ran-mplane-int
  +--rw mplane-info
     +--rw searchable-mplane-access-vlans-info
     |  +--rw searchable-access-vlans* vlan-id
     |  +--rw vlan-range
     |     +--rw lowest-vlan-id?  vlan-id
     |     +--rw highest-vlan-id? vlan-id
     +--rw m-plane-interfaces
     |  +--rw m-plane-sub-interfaces* [interface-name sub-interface]
     |  |  +--rw interface-name  leafref
     |  |  +--rw sub-interface   leafref
     |  |  +--ro client-info
     |  |     +--ro mplane-ipv4-info* [mplane-ipv4]
     |  |     |  +--ro mplane-ipv4  inet:ipv4-address
     |  |     |  +--ro port?        inet:port-number
     |  |     +--ro mplane-ipv6-info* [mplane-ipv6]
     |  |     |  +--ro mplane-ipv6  inet:ipv6-address
     |  |     |  +--ro port?        inet:port-number
     |  |     +--ro mplane-fqdn*      inet:domain-name
     |  +--rw m-plane-ssh-ports
     |     +--rw call-home-ssh-port? inet:port-number
     |     +--rw server-ssh-port?    inet:port-number
     +--rw configured-client-info
        +--rw mplane-ipv4-info* [mplane-ipv4]
        |  +--rw mplane-ipv4  inet:ipv4-address
        |  +--rw port?        inet:port-number
        +--rw mplane-ipv6-info* [mplane-ipv6]
        |  +--rw mplane-ipv6  inet:ipv6-address
        |  +--rw port?        inet:port-number
        +--rw mplane-fqdn*      inet:domain-name

  grouping mplane-group:
    +--rw searchable-mplane-access-vlans-info
    |  +--rw searchable-access-vlans* vlan-id
    |  +--rw vlan-range
    |     +--rw lowest-vlan-id?  vlan-id
    |     +--rw highest-vlan-id? vlan-id
    +--rw m-plane-interfaces
    |  +--rw m-plane-sub-interfaces* [interface-name sub-interface]
    |  |  +--rw interface-name  leafref
    |  |  +--rw sub-interface   leafref
    |  |  +--ro client-info
    |  |     +--ro mplane-ipv4-info* [mplane-ipv4]
    |  |     |  +--ro mplane-ipv4  inet:ipv4-address
    |  |     |  +--ro port?        inet:port-number
    |  |     +--ro mplane-ipv6-info* [mplane-ipv6]
    |  |     |  +--ro mplane-ipv6  inet:ipv6-address
    |  |     |  +--ro port?        inet:port-number
    |  |     +--ro mplane-fqdn*      inet:domain-name
    |  +--rw m-plane-ssh-ports
    |     +--rw call-home-ssh-port? inet:port-number
    |     +--rw server-ssh-port?    inet:port-number
    +--rw configured-client-info
       +--rw mplane-ipv4-info* [mplane-ipv4]
       |  +--rw mplane-ipv4  inet:ipv4-address
       |  +--rw port?        inet:port-number
       +--rw mplane-ipv6-info* [mplane-ipv6]
       |  +--rw mplane-ipv6  inet:ipv6-address
       |  +--rw port?        inet:port-number
       +--rw mplane-fqdn*      inet:domain-name

module: o-ran-operations
  +--rw operational-info
     +--ro declarations
     |  +--ro ru-instance-id?             string
     |  +--ro supported-mplane-version?   version
     |  +--ro supported-cusplane-version? version
     |  +--ro supported-header-mechanism* [protocol]
     |     +--ro protocol                     enumeration
     |     +--ro ecpri-concatenation-support? boolean
     |     +--ro protocol-version?            version
     +--ro operational-state
     |  +--ro restart-cause?    enumeration
     |  +--ro restart-datetime? yang:date-and-time
     +--rw clock
     |  +--rw timezone-name?       timezone-name
     |  +--rw timezone-utc-offset? int16
     +--rw re-call-home-no-ssh-timer? uint16

  rpcs:
    +---x reset  

  grouping operational-group:
    +--ro declarations
    |  +--ro ru-instance-id?             string
    |  +--ro supported-mplane-version?   version
    |  +--ro supported-cusplane-version? version
    |  +--ro supported-header-mechanism* [protocol]
    |     +--ro protocol                     enumeration
    |     +--ro ecpri-concatenation-support? boolean
    |     +--ro protocol-version?            version
    +--ro operational-state
    |  +--ro restart-cause?    enumeration
    |  +--ro restart-datetime? yang:date-and-time
    +--rw clock
    |  +--rw timezone-name?       timezone-name
    |  +--rw timezone-utc-offset? int16
    +--rw re-call-home-no-ssh-timer? uint16

module: o-ran-performance-management
  +--rw performance-measurement-objects
     +--rw enable-SFTP-upload?               boolean
     +--rw enable-random-file-upload?        boolean
     +--rw remote-SFTP-uploads* [remote-SFTP-upload-path]
     |  +--rw remote-SFTP-upload-path  inet:uri
     |  +--rw (credentials)?
     |     +--:(password)
     |     |  +--rw password!
     |     |  |  +--rw password  string
     |     |  +--rw server
     |     |     +--rw keys* [algorithm]
     |     |        +--rw algorithm   asymmetric-key-algorithm-ref
     |     |        +--rw public-key? binary
     |     +--:(certificate)
     |        +--rw certificate!
     +--rw transceiver-measurement-interval? uint16
     +--rw rx-window-measurement-interval?   uint16
     +--rw notification-interval?            uint16
     +--rw file-upload-interval?             uint16
     +--ro max-bin-count                     uint16
     +--rw transceiver-measurement-objects* [measurement-object]
     |  +--rw measurement-object              enumeration
     |  +--rw active?                         boolean
     |  +--rw report-info*                    enumeration
     |  +--rw object-unit                     enumeration
     |  +--rw function?                       enumeration
     |  +--rw bin-count?                      uint16
     |  +--rw lower-bound?                    decimal64
     |  +--rw upper-bound?                    decimal64
     |  +--ro transceiver-measurement-result* [object-unit-id]
     |     +--ro object-unit-id  leafref
     |     +--ro min
     |     |  +--ro value? decimal64
     |     |  +--ro time?  yang-types:date-and-time
     |     +--ro max
     |     |  +--ro value? decimal64
     |     |  +--ro time?  yang-types:date-and-time
     |     +--ro first
     |     |  +--ro value? decimal64
     |     |  +--ro time?  yang-types:date-and-time
     |     +--ro latest
     |     |  +--ro value? decimal64
     |     |  +--ro time?  yang-types:date-and-time
     |     +--ro frequeny-table* uint32
     +--rw rx-window-measurement-objects* [measurement-object]
        +--rw measurement-object    enumeration
        +--rw active?               boolean
        +--rw object-unit?          enumeration
        +--rw report-info?          enumeration
        +--ro (object-unit-id)?
           +--:(RU)
           |  +--ro name?                 leafref
           |  +--ro count                 uint64
           +--:(TRANSPORT)
           |  +--ro tr-measured-result*
           |     +--ro name?  leafref
           |     +--ro count  uint64
           +--:(EAXC_ID)
              +--ro eaxc-measured-result*
                 +--ro eaxc-id?        uint16
                 +--ro count           uint64
                 +--ro transport-name? leafref

  notifications:
    +---n measurement-result-stats  
       +--ro transceiver-stats* [measurement-object]
       |  +--ro measurement-object              leafref
       |  +--ro start-time?                     yang-types:date-and-time
       |  +--ro end-time?                       yang-types:date-and-time
       |  +--ro transceiver-measurement-result* [object-unit-id]
       |     +--ro object-unit-id  leafref
       |     +--ro min
       |     |  +--ro value? decimal64
       |     |  +--ro time?  yang-types:date-and-time
       |     +--ro max
       |     |  +--ro value? decimal64
       |     |  +--ro time?  yang-types:date-and-time
       |     +--ro first
       |     |  +--ro value? decimal64
       |     |  +--ro time?  yang-types:date-and-time
       |     +--ro latest
       |     |  +--ro value? decimal64
       |     |  +--ro time?  yang-types:date-and-time
       |     +--ro frequeny-table* uint32
       +--ro rx-window-stats* [measurement-object]
          +--ro measurement-object    leafref
          +--ro start-time?           yang-types:date-and-time
          +--ro end-time?             yang-types:date-and-time
          +--ro (object-unit-id)?
             +--:(RU)
             |  +--ro name?                 leafref
             |  +--ro count                 uint64
             +--:(TRANSPORT)
             |  +--ro tr-measured-result*
             |     +--ro name?  leafref
             |     +--ro count  uint64
             +--:(EAXC_ID)
                +--ro eaxc-measured-result*
                   +--ro eaxc-id?        uint16
                   +--ro count           uint64
                   +--ro transport-name? leafref

  grouping start-and-end-time:
    +--rw start-time? yang-types:date-and-time
    +--rw end-time?   yang-types:date-and-time
  grouping transceiver-measurement-result-grouping:
    +--ro transceiver-measurement-result* [object-unit-id]
       +--ro object-unit-id  leafref
       +--ro min
       |  +--ro value? decimal64
       |  +--ro time?  yang-types:date-and-time
       +--ro max
       |  +--ro value? decimal64
       |  +--ro time?  yang-types:date-and-time
       +--ro first
       |  +--ro value? decimal64
       |  +--ro time?  yang-types:date-and-time
       +--ro latest
       |  +--ro value? decimal64
       |  +--ro time?  yang-types:date-and-time
       +--ro frequeny-table* uint32
  grouping rx-window-measurement-result-grouping:
    +--ro (object-unit-id)?
       +--:(RU)
       |  +--ro name?                 leafref
       |  +--ro count                 uint64
       +--:(TRANSPORT)
       |  +--ro tr-measured-result*
       |     +--ro name?  leafref
       |     +--ro count  uint64
       +--:(EAXC_ID)
          +--ro eaxc-measured-result*
             +--ro eaxc-id?        uint16
             +--ro count           uint64
             +--ro transport-name? leafref
  grouping measurement-group:
    +--rw enable-SFTP-upload?               boolean
    +--rw enable-random-file-upload?        boolean
    +--rw remote-SFTP-uploads* [remote-SFTP-upload-path]
    |  +--rw remote-SFTP-upload-path  inet:uri
    |  +--rw (credentials)?
    |     +--:(password)
    |     |  +--rw password!
    |     |  |  +--rw password  string
    |     |  +--rw server
    |     |     +--rw keys* [algorithm]
    |     |        +--rw algorithm   asymmetric-key-algorithm-ref
    |     |        +--rw public-key? binary
    |     +--:(certificate)
    |        +--rw certificate!
    +--rw transceiver-measurement-interval? uint16
    +--rw rx-window-measurement-interval?   uint16
    +--rw notification-interval?            uint16
    +--rw file-upload-interval?             uint16
    +--ro max-bin-count                     uint16
    +--rw transceiver-measurement-objects* [measurement-object]
    |  +--rw measurement-object              enumeration
    |  +--rw active?                         boolean
    |  +--rw report-info*                    enumeration
    |  +--rw object-unit                     enumeration
    |  +--rw function?                       enumeration
    |  +--rw bin-count?                      uint16
    |  +--rw lower-bound?                    decimal64
    |  +--rw upper-bound?                    decimal64
    |  +--ro transceiver-measurement-result* [object-unit-id]
    |     +--ro object-unit-id  leafref
    |     +--ro min
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro max
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro first
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro latest
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro frequeny-table* uint32
    +--rw rx-window-measurement-objects* [measurement-object]
       +--rw measurement-object    enumeration
       +--rw active?               boolean
       +--rw object-unit?          enumeration
       +--rw report-info?          enumeration
       +--ro (object-unit-id)?
          +--:(RU)
          |  +--ro name?                 leafref
          |  +--ro count                 uint64
          +--:(TRANSPORT)
          |  +--ro tr-measured-result*
          |     +--ro name?  leafref
          |     +--ro count  uint64
          +--:(EAXC_ID)
             +--ro eaxc-measured-result*
                +--ro eaxc-id?        uint16
                +--ro count           uint64
                +--ro transport-name? leafref
  grouping measurement-notification:
    +--rw transceiver-stats* [measurement-object]
    |  +--rw measurement-object              leafref
    |  +--rw start-time?                     yang-types:date-and-time
    |  +--rw end-time?                       yang-types:date-and-time
    |  +--ro transceiver-measurement-result* [object-unit-id]
    |     +--ro object-unit-id  leafref
    |     +--ro min
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro max
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro first
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro latest
    |     |  +--ro value? decimal64
    |     |  +--ro time?  yang-types:date-and-time
    |     +--ro frequeny-table* uint32
    +--rw rx-window-stats* [measurement-object]
       +--rw measurement-object    leafref
       +--rw start-time?           yang-types:date-and-time
       +--rw end-time?             yang-types:date-and-time
       +--ro (object-unit-id)?
          +--:(RU)
          |  +--ro name?                 leafref
          |  +--ro count                 uint64
          +--:(TRANSPORT)
          |  +--ro tr-measured-result*
          |     +--ro name?  leafref
          |     +--ro count  uint64
          +--:(EAXC_ID)
             +--ro eaxc-measured-result*
                +--ro eaxc-id?        uint16
                +--ro count           uint64
                +--ro transport-name? leafref

module: o-ran-processing-element
  +--rw processing-elements
     +--ro maximum-number-of-transport-flows? uint16
     +--rw transport-session-type?            enumeration
     +--rw enhanced-uplane-mapping!
     |  +--rw uplane-mapping* [up-marking-name]
     |     +--rw up-marking-name  string
     |     +--rw (up-markings)?
     |        +--:(ethernet)
     |        |  +--rw up-cos-name?     leafref
     |        +--:(ipv4)
     |        |  +--rw upv4-dscp-name?  leafref
     |        +--:(ipv6)
     |           +--rw upv6-dscp-name?  leafref
     +--rw ru-elements* [name]
        +--rw name            string
        +--rw transport-flow
           +--rw interface-name? leafref
           +--rw aliasmac-flow {o-ran-int:ALIASMAC-BASED-CU-PLANE}?
           |  +--rw ru-aliasmac-address  leafref
           |  +--rw vlan-id?             leafref
           |  +--rw o-du-mac-address     yang:mac-address
           +--rw eth-flow
           |  +--rw ru-mac-address    leafref
           |  +--rw vlan-id           leafref
           |  +--rw o-du-mac-address  yang:mac-address
           +--rw udpip-flow
              +--rw (address)
              |  +--:(ru-ipv4-address)
              |  |  +--rw ru-ipv4-address?         leafref
              |  +--:(ru-ipv6-address)
              |     +--rw ru-ipv6-address?         leafref
              +--rw o-du-ip-address          inet:ip-address
              +--rw ru-ephemeral-udp-port    inet:port-number
              +--rw o-du-ephemeral-udp-port  inet:port-number
              +--rw ecpri-destination-udp    inet:port-number

  grouping pe-group:
    +--ro maximum-number-of-transport-flows? uint16
    +--rw transport-session-type?            enumeration
    +--rw enhanced-uplane-mapping!
    |  +--rw uplane-mapping* [up-marking-name]
    |     +--rw up-marking-name  string
    |     +--rw (up-markings)?
    |        +--:(ethernet)
    |        |  +--rw up-cos-name?     leafref
    |        +--:(ipv4)
    |        |  +--rw upv4-dscp-name?  leafref
    |        +--:(ipv6)
    |           +--rw upv6-dscp-name?  leafref
    +--rw ru-elements* [name]
       +--rw name            string
       +--rw transport-flow
          +--rw interface-name? leafref
          +--rw aliasmac-flow {o-ran-int:ALIASMAC-BASED-CU-PLANE}?
          |  +--rw ru-aliasmac-address  leafref
          |  +--rw vlan-id?             leafref
          |  +--rw o-du-mac-address     yang:mac-address
          +--rw eth-flow
          |  +--rw ru-mac-address    leafref
          |  +--rw vlan-id           leafref
          |  +--rw o-du-mac-address  yang:mac-address
          +--rw udpip-flow
             +--rw (address)
             |  +--:(ru-ipv4-address)
             |  |  +--rw ru-ipv4-address?         leafref
             |  +--:(ru-ipv6-address)
             |     +--rw ru-ipv6-address?         leafref
             +--rw o-du-ip-address          inet:ip-address
             +--rw ru-ephemeral-udp-port    inet:port-number
             +--rw o-du-ephemeral-udp-port  inet:port-number
             +--rw ecpri-destination-udp    inet:port-number

module: o-ran-software-management
  +--ro software-inventory
     +--ro software-slot* [name]
        +--ro name           string
        +--ro status         enumeration
        +--ro active?        boolean
        +--ro running?       boolean
        +--ro access?        enumeration
        +--ro product-code?  leafref
        +--ro vendor-code?   string
        +--ro build-id?      string
        +--ro build-name?    string
        +--ro build-version? string
        +--ro files* [name]
           +--ro name        string
           +--ro version?    string
           +--ro local-path  string
           +--ro integrity?  enumeration

  rpcs:
    +---x software-download  
    |  +---w input   
    |  |  +---w remote-file-path  inet:uri
    |  |  +---w (credentials)?
    |  |     +--:(password)
    |  |     |  +---w password!
    |  |     |  |  +---w password  string
    |  |     |  +---w server
    |  |     |     +---w keys* [algorithm]
    |  |     |        +---w algorithm   asymmetric-key-algorithm-ref
    |  |     |        +---w public-key? binary
    |  |     +--:(certificate)
    |  |        +---w certificate!
    |  +--ro output  
    |     +--ro status                enumeration
    |     +--ro error-message?        string
    |     +--ro notification-timeout? int32
    +---x software-install   
    |  +---w input   
    |  |  +---w slot-name   leafref
    |  |  +---w file-names* string
    |  +--ro output  
    |     +--ro status         enumeration
    |     +--ro error-message? string
    +---x software-activate  
       +---w input   
       |  +---w slot-name  leafref
       +--ro output  
          +--ro status                enumeration
          +--ro error-message?        string
          +--ro notification-timeout? int32

  notifications:
    +---n download-event    
    |  +--ro file-name      string
    |  +--ro status?        enumeration
    |  +--ro error-message? string
    +---n install-event     
    |  +--ro slot-name?     leafref
    |  +--ro status?        enumeration
    |  +--ro error-message? string
    +---n activation-event  
       +--ro slot-name?     leafref
       +--ro status?        enumeration
       +--ro return-code?   uint8
       +--ro error-message? string

  grouping slot-group:
    +--rw software-slot* [name]
       +--rw name           string
       +--ro status         enumeration
       +--ro active?        boolean
       +--ro running?       boolean
       +--ro access?        enumeration
       +--ro product-code?  leafref
       +--ro vendor-code?   string
       +--ro build-id?      string
       +--ro build-name?    string
       +--rw build-version? string
       +--ro files* [name]
          +--ro name        string
          +--ro version?    string
          +--ro local-path  string
          +--ro integrity?  enumeration
  grouping download-input:
    +--rw remote-file-path  inet:uri
    +--rw (credentials)?
       +--:(password)
       |  +--rw password!
       |  |  +--rw password  string
       |  +--rw server
       |     +--rw keys* [algorithm]
       |        +--rw algorithm   asymmetric-key-algorithm-ref
       |        +--rw public-key? binary
       +--:(certificate)
          +--rw certificate!
  grouping download-output:
    +--rw status                enumeration
    +--rw error-message?        string
    +--rw notification-timeout? int32
  grouping install-input:
    +--rw slot-name   leafref
    +--rw file-names* string
  grouping install-output:
    +--rw status         enumeration
    +--rw error-message? string
  grouping activate-input:
    +--rw slot-name  leafref
  grouping activate-output:
    +--rw status                enumeration
    +--rw error-message?        string
    +--rw notification-timeout? int32
  grouping download-notification:
    +--rw file-name      string
    +--rw status?        enumeration
    +--rw error-message? string
  grouping install-notification:
    +--rw slot-name?     leafref
    +--rw status?        enumeration
    +--rw error-message? string
  grouping activation-notification:
    +--rw slot-name?     leafref
    +--rw status?        enumeration
    +--rw return-code?   uint8
    +--rw error-message? string

module: o-ran-supervision
  +--rw supervision
     +--rw cu-plane-monitoring!
        +--rw configured-cu-monitoring-interval? uint8

  rpcs:
    +---x supervision-watchdog-reset  
       +---w input   
       |  +---w supervision-notification-interval? uint16
       |  +---w guard-timer-overhead?              uint16
       +--ro output  
          +--ro next-update-at? yang:date-and-time

  notifications:
    +---n supervision-notification  

  grouping watchdog-input:
    +--rw supervision-notification-interval? uint16
    +--rw guard-timer-overhead?              uint16
  grouping watchdog-output:
    +--rw next-update-at? yang:date-and-time
  grouping supervision-group:
    +--rw cu-plane-monitoring!
       +--rw configured-cu-monitoring-interval? uint8

module: o-ran-sync
  +--rw sync
     +--ro sync-status
     |  +--ro sync-state                 enumeration
     |  +--ro supported-reference-types* [item]
     |     +--ro item  enumeration
     +--ro sync-capability
     |  +--ro sync-t-tsc  enumeration
     +--rw ptp-config
     |  +--rw domain-number?          uint8
     |  +--rw accepted-clock-classes* [clock-classes]
     |  |  +--rw clock-classes  uint8
     |  +--rw ptp-profile?            enumeration
     |  +--rw g-8275-1-config
     |  |  +--rw multicast-mac-address? enumeration
     |  |  +--rw delay-asymmetry?       int16
     |  +--rw g-8275-2-config
     |     +--rw local-ip-port?             leafref
     |     +--rw master-ip-configuration* [local-priority]
     |     |  +--rw local-priority  uint8
     |     |  +--rw ip-address?     string
     |     +--rw log-inter-sync-period?     int8
     |     +--rw log-inter-announce-period? int8
     +--rw ptp-status
     |  +--rw reporting-period?         uint8
     |  +--ro lock-state?               enumeration
     |  +--ro clock-class?              uint8
     |  +--ro clock-identity?           string
     |  +--ro partial-timing-supported? boolean
     |  +--ro sources* [local-port-number]
     |     +--ro local-port-number           leafref
     |     +--ro state?                      enumeration
     |     +--ro two-step-flag?              boolean
     |     +--ro leap61?                     boolean
     |     +--ro leap59?                     boolean
     |     +--ro current-utc-offset-valid?   boolean
     |     +--ro ptp-timescale?              boolean
     |     +--ro time-traceable?             boolean
     |     +--ro frequency-traceable?        boolean
     |     +--ro source-clock-identity?      string
     |     +--ro source-port-number?         uint16
     |     +--ro current-utc-offset?         int16
     |     +--ro priority1?                  uint8
     |     +--ro clock-class?                uint8
     |     +--ro clock-accuracy?             uint8
     |     +--ro offset-scaled-log-variance? uint16
     |     +--ro priority2?                  uint8
     |     +--ro grandmaster-clock-identity? string
     |     +--ro steps-removed?              uint16
     |     +--ro time-source?                uint8
     +--rw synce-config
     |  +--rw acceptance-list-of-ssm* enumeration
     |  +--rw ssm-timeout?            uint16
     +--rw synce-status
     |  +--rw reporting-period? uint8
     |  +--ro lock-state?       enumeration
     |  +--ro sources* [local-port-number]
     |     +--ro local-port-number  leafref
     |     +--ro state?             enumeration
     |     +--ro quality-level?     uint8
     +--rw gnss-config {GNSS}?
     |  +--rw enable?                      boolean
     |  +--rw satellite-constelation-list* enumeration
     |  +--rw polarity?                    enumeration
     |  +--rw cable-delay?                 uint16
     |  +--rw anti-jam-enable?             boolean {ANTI-JAM}?
     +--rw gnss-status {GNSS}?
        +--rw reporting-period? uint8
        +--ro name?             string
        +--ro gnss-sync-status? enumeration
        +--ro gnss-data
           +--ro satellites-tracked? uint8
           +--ro location
              +--ro altitude?  int64
              +--ro latitude?  geographic-coordinate-degree
              +--ro longitude? geographic-coordinate-degree

  notifications:
    +---n synchronization-state-change  
    |  +--ro sync-state? leafref
    +---n ptp-state-change              
    |  +--ro ptp-state? leafref
    +---n synce-state-change            
    |  +--ro synce-state? leafref
    +---n gnss-state-change              {GNSS}?
       +--ro gnss-state? leafref

  grouping sync-group:
    +--ro sync-status
    |  +--ro sync-state                 enumeration
    |  +--ro supported-reference-types* [item]
    |     +--ro item  enumeration
    +--ro sync-capability
    |  +--ro sync-t-tsc  enumeration
    +--rw ptp-config
    |  +--rw domain-number?          uint8
    |  +--rw accepted-clock-classes* [clock-classes]
    |  |  +--rw clock-classes  uint8
    |  +--rw ptp-profile?            enumeration
    |  +--rw g-8275-1-config
    |  |  +--rw multicast-mac-address? enumeration
    |  |  +--rw delay-asymmetry?       int16
    |  +--rw g-8275-2-config
    |     +--rw local-ip-port?             leafref
    |     +--rw master-ip-configuration* [local-priority]
    |     |  +--rw local-priority  uint8
    |     |  +--rw ip-address?     string
    |     +--rw log-inter-sync-period?     int8
    |     +--rw log-inter-announce-period? int8
    +--rw ptp-status
    |  +--rw reporting-period?         uint8
    |  +--ro lock-state?               enumeration
    |  +--ro clock-class?              uint8
    |  +--ro clock-identity?           string
    |  +--ro partial-timing-supported? boolean
    |  +--ro sources* [local-port-number]
    |     +--ro local-port-number           leafref
    |     +--ro state?                      enumeration
    |     +--ro two-step-flag?              boolean
    |     +--ro leap61?                     boolean
    |     +--ro leap59?                     boolean
    |     +--ro current-utc-offset-valid?   boolean
    |     +--ro ptp-timescale?              boolean
    |     +--ro time-traceable?             boolean
    |     +--ro frequency-traceable?        boolean
    |     +--ro source-clock-identity?      string
    |     +--ro source-port-number?         uint16
    |     +--ro current-utc-offset?         int16
    |     +--ro priority1?                  uint8
    |     +--ro clock-class?                uint8
    |     +--ro clock-accuracy?             uint8
    |     +--ro offset-scaled-log-variance? uint16
    |     +--ro priority2?                  uint8
    |     +--ro grandmaster-clock-identity? string
    |     +--ro steps-removed?              uint16
    |     +--ro time-source?                uint8
    +--rw synce-config
    |  +--rw acceptance-list-of-ssm* enumeration
    |  +--rw ssm-timeout?            uint16
    +--rw synce-status
    |  +--rw reporting-period? uint8
    |  +--ro lock-state?       enumeration
    |  +--ro sources* [local-port-number]
    |     +--ro local-port-number  leafref
    |     +--ro state?             enumeration
    |     +--ro quality-level?     uint8
    +--rw gnss-config {GNSS}?
    |  +--rw enable?                      boolean
    |  +--rw satellite-constelation-list* enumeration
    |  +--rw polarity?                    enumeration
    |  +--rw cable-delay?                 uint16
    |  +--rw anti-jam-enable?             boolean {ANTI-JAM}?
    +--rw gnss-status {GNSS}?
       +--rw reporting-period? uint8
       +--ro name?             string
       +--ro gnss-sync-status? enumeration
       +--ro gnss-data
          +--ro satellites-tracked? uint8
          +--ro location
             +--ro altitude?  int64
             +--ro latitude?  geographic-coordinate-degree
             +--ro longitude? geographic-coordinate-degree

module: o-ran-trace

  rpcs:
    +---x start-trace-logs  
    |  +--ro output  
    |     +--ro status?         enumeration
    |     +--ro failure-reason? string
    +---x stop-trace-logs   
       +--ro output  
          +--ro status?         enumeration
          +--ro failure-reason? string

  notifications:
    +---n trace-log-generated  
       +--ro log-file-name*        string
       +--ro is-notification-last? boolean

  grouping trace-status-grouping:
    +--rw status?         enumeration
    +--rw failure-reason? string

module: o-ran-transceiver
  +--rw port-transceivers
     +--rw port-transceiver-data* [interface-name port-number]
        +--rw interface-name                   leafref
        +--rw port-number                      leafref
        +--rw name?                            string
        +--ro present                          boolean
        +--ro vendor-id?                       string
        +--ro vendor-part?                     string
        +--ro vendor-rev?                      string
        +--ro serial-no?                       string
        +--ro SFF8472-compliance-code?         enumeration
        +--ro connector-type?                  enumeration
        +--ro identifier?                      enumeration
        +--ro nominal-bitrate?                 uint32
        +--ro low-bitrate-margin?              uint8
        +--ro high-bitrate-margin?             uint8
        +--ro rx-power-type?                   enumeration
        +--ro rx-power?                        decimal64
        +--ro tx-power?                        decimal64
        +--ro tx-bias-current?                 decimal64
        +--ro voltage?                         decimal64
        +--ro temperature?                     decimal64
        +--ro additional-multi-lane-reporting* [lane]
           +--ro lane             uint8
           +--ro rx-power?        decimal64
           +--ro tx-bias-current? decimal64
           +--ro tx-power?        decimal64

  grouping transceiver-group:
    +--rw port-transceiver-data* [interface-name port-number]
       +--rw interface-name                   leafref
       +--rw port-number                      leafref
       +--rw name?                            string
       +--ro present                          boolean
       +--ro vendor-id?                       string
       +--ro vendor-part?                     string
       +--ro vendor-rev?                      string
       +--ro serial-no?                       string
       +--ro SFF8472-compliance-code?         enumeration
       +--ro connector-type?                  enumeration
       +--ro identifier?                      enumeration
       +--ro nominal-bitrate?                 uint32
       +--ro low-bitrate-margin?              uint8
       +--ro high-bitrate-margin?             uint8
       +--ro rx-power-type?                   enumeration
       +--ro rx-power?                        decimal64
       +--ro tx-power?                        decimal64
       +--ro tx-bias-current?                 decimal64
       +--ro voltage?                         decimal64
       +--ro temperature?                     decimal64
       +--ro additional-multi-lane-reporting* [lane]
          +--ro lane             uint8
          +--ro rx-power?        decimal64
          +--ro tx-bias-current? decimal64
          +--ro tx-power?        decimal64

module: o-ran-troubleshooting

  rpcs:
    +---x start-troubleshooting-logs  
    |  +--ro output  
    |     +--ro status?         enumeration
    |     +--ro failure-reason? string
    +---x stop-troubleshooting-logs   
       +--ro output  
          +--ro status?         enumeration
          +--ro failure-reason? string

  notifications:
    +---n troubleshooting-log-generated  
       +--ro log-file-name* string

  grouping troubleshooting-status-grouping:
    +--rw status?         enumeration
    +--rw failure-reason? string

module: o-ran-udp-echo
  +--rw udp-echo {o-ran-int:UDPIP-BASED-CU-PLANE}?
     +--rw enable-udp-echo?          boolean
     +--rw dscp-config?              enumeration
     +--ro echo-replies-transmitted? uint32

  grouping udp-echo-group:
    +--rw enable-udp-echo?          boolean
    +--rw dscp-config?              enumeration
    +--ro echo-replies-transmitted? uint32

module: o-ran-uplane-conf
  +--rw user-plane-configuration
     +--rw low-level-tx-links* [name]
     |  +--rw name                   string
     |  +--rw processing-element     leafref
     |  +--rw tx-array-carrier       leafref
     |  +--rw low-level-tx-endpoint  leafref
     +--rw low-level-rx-links* [name]
     |  +--rw name                       string
     |  +--rw processing-element         leafref
     |  +--rw rx-array-carrier           leafref
     |  +--rw low-level-rx-endpoint      leafref
     |  +--rw user-plane-uplink-marking? leafref
     +--ro endpoint-types* [id]
     |  +--ro id                                     uint16
     |  +--ro supported-section-types* [section-type]
     |  |  +--ro section-type                  uint8
     |  |  +--ro supported-section-extensions* uint8
     |  +--ro supported-frame-structures*            uint8
     |  +--ro managed-delay-support?                 enumeration
     |  +--ro multiple-numerology-supported?         boolean
     |  +--ro max-numerology-change-duration?        uint16
     |  +--ro max-control-sections-per-data-section? uint8
     |  +--ro max-sections-per-symbol?               uint16
     |  +--ro max-sections-per-slot?                 uint16
     |  +--ro max-beams-per-symbol?                  uint16
     |  +--ro max-beams-per-slot?                    uint16
     |  +--ro max-prb-per-symbol?                    uint16
     |  +--ro prb-capacity-allocation-granularity*   uint16
     |  +--ro max-numerologies-per-symbol?           uint16
     +--ro endpoint-capacity-sharing-groups* [id]
     |  +--ro id                                     uint16
     |  +--ro max-control-sections-per-data-section? uint8
     |  +--ro max-sections-per-symbol?               uint16
     |  +--ro max-sections-per-slot?                 uint16
     |  +--ro max-beams-per-symbol?                  uint16
     |  +--ro max-beams-per-slot?                    uint16
     |  +--ro max-prb-per-symbol?                    uint16
     |  +--ro max-numerologies-per-symbol?           uint16
     |  +--ro max-endpoints?                         uint16
     |  +--ro max-managed-delay-endpoints?           uint16
     |  +--ro max-non-managed-delay-endpoints?       uint16
     +--ro static-low-level-tx-endpoints* [name]
     |  +--ro name                     string
     |  +--ro restricted-interfaces*   leafref
     |  +--ro array                    leafref
     |  +--ro endpoint-type?           leafref
     |  +--ro capacity-sharing-groups* leafref
     +--ro static-low-level-rx-endpoints* [name]
     |  +--ro name                     string
     |  +--ro restricted-interfaces*   leafref
     |  +--ro array                    leafref
     |  +--ro endpoint-type?           leafref
     |  +--ro capacity-sharing-groups* leafref
     +--rw low-level-tx-endpoints* [name]
     |  +--rw name                                 leafref
     |  +--rw compression!
     |  |  +--rw iq-bitwidth?                       uint8
     |  |  +--rw compression-type                   enumeration
     |  |  x--rw bitwidth?                          uint8
     |  |  +--rw (compression-format)?
     |  |     +--:(no-compresison)
     |  |     +--:(block-floating-point)
     |  |     |  +--rw exponent?                          uint8
     |  |     +--:(block-scaling)
     |  |     |  +--rw block-scalar?                      uint8
     |  |     +--:(u-law)
     |  |     |  +--rw comp-bit-width?                    uint8
     |  |     |  +--rw comp-shift?                        uint8
     |  |     +--:(beam-space-compression)
     |  |     |  +--rw active-beam-space-coeficient-mask* uint8
     |  |     |  +--rw block-scaler?                      uint8
     |  |     +--:(modulation-compression)
     |  |        +--rw csf?                               uint8
     |  |        +--rw mod-comp-scaler?                   uint16
     |  +--rw frame-structure?                     uint8
     |  +--rw cp-type?                             enumeration
     |  +--rw cp-length                            uint16
     |  +--rw cp-length-other                      uint16
     |  +--rw offset-to-absolute-frequency-center  int32
     |  +--rw number-of-prb-per-scs* [scs]
     |  |  +--rw scs            mcap:scs-config-type
     |  |  +--rw number-of-prb  uint16
     |  +--rw e-axcid
     |     +--rw o-du-port-bitmask    uint16
     |     +--rw band-sector-bitmask  uint16
     |     +--rw ccid-bitmask         uint16
     |     +--rw ru-port-bitmask      uint16
     |     +--rw eaxc-id              uint16
     +--rw low-level-rx-endpoints* [name]
     |  +--rw name                                 leafref
     |  +--rw compression
     |  |  +--rw iq-bitwidth?                       uint8
     |  |  +--rw compression-type                   enumeration
     |  |  x--rw bitwidth?                          uint8
     |  |  +--rw (compression-format)?
     |  |     +--:(no-compresison)
     |  |     +--:(block-floating-point)
     |  |     |  +--rw exponent?                          uint8
     |  |     +--:(block-scaling)
     |  |     |  +--rw block-scalar?                      uint8
     |  |     +--:(u-law)
     |  |     |  +--rw comp-bit-width?                    uint8
     |  |     |  +--rw comp-shift?                        uint8
     |  |     +--:(beam-space-compression)
     |  |     |  +--rw active-beam-space-coeficient-mask* uint8
     |  |     |  +--rw block-scaler?                      uint8
     |  |     +--:(modulation-compression)
     |  |        +--rw csf?                               uint8
     |  |        +--rw mod-comp-scaler?                   uint16
     |  +--rw frame-structure?                     uint8
     |  +--rw cp-type?                             enumeration
     |  +--rw cp-length                            uint16
     |  +--rw cp-length-other                      uint16
     |  +--rw offset-to-absolute-frequency-center  int32
     |  +--rw number-of-prb-per-scs* [scs]
     |  |  +--rw scs            mcap:scs-config-type
     |  |  +--rw number-of-prb  uint16
     |  +--rw ul-fft-sampling-offsets* [scs]
     |  |  +--rw scs                     mcap:scs-config-type
     |  |  +--rw ul-fft-sampling-offset? uint16
     |  +--rw e-axcid
     |  |  +--rw o-du-port-bitmask    uint16
     |  |  +--rw band-sector-bitmask  uint16
     |  |  +--rw ccid-bitmask         uint16
     |  |  +--rw ru-port-bitmask      uint16
     |  |  +--rw eaxc-id              uint16
     |  +--rw non-time-managed-delay-enabled?      boolean
     +--rw tx-array-carriers* [name]
     |  +--rw name                         string
     |  +--rw absolute-frequency-center    uint32
     |  +--rw center-of-channel-bandwidth  uint64
     |  +--rw channel-bandwidth            uint64
     |  +--rw active?                      enumeration
     |  +--ro state                        enumeration
     |  +--ro type                         enumeration
     |  +--ro duplex-scheme?               enumeration
     |  +--rw rw-duplex-scheme?            leafref
     |  +--rw rw-type?                     leafref
     |  +--rw band-number?                 leafref {mcap:LAA}?
     |  +--rw lte-tdd-frame
     |  |  +--rw subframe-assignment       enumeration
     |  |  +--rw special-subframe-pattern  enumeration
     |  +--rw laa-carrier-configuration {mcap:LAA}?
     |  |  +--rw ed-threshold-pdsch?         int8
     |  |  +--rw ed-threshold-drs?           int8
     |  |  +--rw tx-antenna-ports?           uint8
     |  |  +--rw transmission-power-for-drs? int8
     |  |  +--rw dmtc-period?                enumeration
     |  |  +--rw dmtc-offset?                uint8
     |  |  +--rw lbt-timer?                  uint16
     |  |  +--rw max-cw-usage-counter* [priority]
     |  |     +--rw priority       enumeration
     |  |     +--rw counter-value? uint8
     |  +--rw gain                         decimal64
     |  +--rw downlink-radio-frame-offset  uint32
     |  +--rw downlink-sfn-offset          int16
     +--rw rx-array-carriers* [name]
     |  +--rw name                         string
     |  +--rw absolute-frequency-center    uint32
     |  +--rw center-of-channel-bandwidth  uint64
     |  +--rw channel-bandwidth            uint64
     |  +--rw active?                      enumeration
     |  +--ro state                        enumeration
     |  +--ro type                         enumeration
     |  +--ro duplex-scheme?               enumeration
     |  +--rw downlink-radio-frame-offset  uint32
     |  +--rw downlink-sfn-offset          int16
     |  +--rw gain-correction              decimal64
     |  +--rw n-ta-offset                  uint32
     +--ro tx-arrays* [name]
     |  +--ro name                                    string
     |  +--ro number-of-rows                          uint16
     |  +--ro number-of-columns                       uint16
     |  +--ro number-of-array-layers                  uint8
     |  +--ro horizontal-spacing?                     decimal64
     |  +--ro vertical-spacing?                       decimal64
     |  +--ro normal-vector-direction
     |  |  +--ro azimuth-angle? decimal64
     |  |  +--ro zenith-angle?  decimal64
     |  +--ro leftmost-bottom-array-element-position
     |  |  +--ro x? decimal64
     |  |  +--ro y? decimal64
     |  |  +--ro z? decimal64
     |  +--ro polarisations* [p]
     |  |  +--ro p             uint8
     |  |  +--ro polarisation  polarisation_type
     |  +--ro band-number                             leafref
     |  +--ro max-gain                                decimal64
     |  +--ro independent-power-budget                boolean
     |  +--ro capabilities*
     |     +--ro max-supported-frequency-dl? uint64
     |     +--ro min-supported-frequency-dl? uint64
     |     +--ro max-supported-bandwidth-dl? uint64
     |     +--ro max-num-carriers-dl?        uint32
     |     +--ro max-carrier-bandwidth-dl?   uint64
     |     +--ro min-carrier-bandwidth-dl?   uint64
     +--ro rx-arrays* [name]
     |  +--ro name                                    string
     |  +--ro number-of-rows                          uint16
     |  +--ro number-of-columns                       uint16
     |  +--ro number-of-array-layers                  uint8
     |  +--ro horizontal-spacing?                     decimal64
     |  +--ro vertical-spacing?                       decimal64
     |  +--ro normal-vector-direction
     |  |  +--ro azimuth-angle? decimal64
     |  |  +--ro zenith-angle?  decimal64
     |  +--ro leftmost-bottom-array-element-position
     |  |  +--ro x? decimal64
     |  |  +--ro y? decimal64
     |  |  +--ro z? decimal64
     |  +--ro polarisations* [p]
     |  |  +--ro p             uint8
     |  |  +--ro polarisation  polarisation_type
     |  +--ro band-number                             leafref
     |  +--ro gain-correction-range
     |  |  +--ro max  decimal64
     |  |  +--ro min  decimal64
     |  +--ro capabilities*
     |     +--ro max-supported-frequency-ul? uint64
     |     +--ro min-supported-frequency-ul? uint64
     |     +--ro max-supported-bandwidth-ul? uint64
     |     +--ro max-num-carriers-ul?        uint32
     |     +--ro max-carrier-bandwidth-ul?   uint64
     |     +--ro min-carrier-bandwidth-ul?   uint64
     +--ro relations* [entity]
        +--ro entity  uint16
        +--ro array1
        |  +--ro (antenna-type)?
        |     +--:(tx)
        |     |  +--ro tx-array-name? leafref
        |     +--:(rx)
        |        +--ro rx-array-name? leafref
        +--ro array2
        |  +--ro (antenna-type)?
        |     +--:(tx)
        |     |  +--ro tx-array-name? leafref
        |     +--:(rx)
        |        +--ro rx-array-name? leafref
        +--ro types* [relation-type]
           +--ro relation-type  enumeration
           +--ro pairs* [element-array1]
              +--ro element-array1  uint16
              +--ro element-array2? uint16

  notifications:
    +---n tx-array-carriers-state-change  
    |  +--ro tx-array-carriers* [name]
    |     +--ro name   leafref
    |     +--ro state? leafref
    +---n rx-array-carriers-state-change  
       +--ro rx-array-carriers* [name]
          +--ro name   leafref
          +--ro state? leafref

  grouping laa-carrier-config:
    +--rw ed-threshold-pdsch?         int8
    +--rw ed-threshold-drs?           int8
    +--rw tx-antenna-ports?           uint8
    +--rw transmission-power-for-drs? int8
    +--rw dmtc-period?                enumeration
    +--rw dmtc-offset?                uint8
    +--rw lbt-timer?                  uint16
    +--rw max-cw-usage-counter* [priority]
       +--rw priority       enumeration
       +--rw counter-value? uint8
  grouping eaxc:
    +--rw o-du-port-bitmask    uint16
    +--rw band-sector-bitmask  uint16
    +--rw ccid-bitmask         uint16
    +--rw ru-port-bitmask      uint16
    +--rw eaxc-id              uint16
  grouping parameters:
    +--rw name                                    string
    +--rw number-of-rows                          uint16
    +--rw number-of-columns                       uint16
    +--rw number-of-array-layers                  uint8
    +--rw horizontal-spacing?                     decimal64
    +--rw vertical-spacing?                       decimal64
    +--rw normal-vector-direction
    |  +--rw azimuth-angle? decimal64
    |  +--rw zenith-angle?  decimal64
    +--rw leftmost-bottom-array-element-position
    |  +--rw x? decimal64
    |  +--rw y? decimal64
    |  +--rw z? decimal64
    +--rw polarisations* [p]
    |  +--rw p             uint8
    |  +--rw polarisation  polarisation_type
    +--rw band-number                             leafref
  grouping array-choice:
    +--rw (antenna-type)?
       +--:(tx)
       |  +--rw tx-array-name? leafref
       +--:(rx)
          +--rw rx-array-name? leafref
  grouping scs-config:
    +--rw frame-structure?                     uint8
    +--rw cp-type?                             enumeration
    +--rw cp-length                            uint16
    +--rw cp-length-other                      uint16
    +--rw offset-to-absolute-frequency-center  int32
    +--rw number-of-prb-per-scs* [scs]
       +--rw scs            mcap:scs-config-type
       +--rw number-of-prb  uint16
  grouping tx-common-array-carrier-elements:
    +--rw absolute-frequency-center    uint32
    +--rw center-of-channel-bandwidth  uint64
    +--rw channel-bandwidth            uint64
    +--rw active?                      enumeration
    +--ro state                        enumeration
    +--ro type                         enumeration
    +--ro duplex-scheme?               enumeration
    +--rw rw-duplex-scheme?            leafref
    +--rw rw-type?                     leafref
  grouping rx-common-array-carrier-elements:
    +--rw absolute-frequency-center    uint32
    +--rw center-of-channel-bandwidth  uint64
    +--rw channel-bandwidth            uint64
    +--rw active?                      enumeration
    +--ro state                        enumeration
    +--ro type                         enumeration
    +--ro duplex-scheme?               enumeration
  grouping endpoint-section-capacity:
    +--rw max-control-sections-per-data-section? uint8
    +--rw max-sections-per-symbol?               uint16
    +--rw max-sections-per-slot?                 uint16
  grouping endpoint-beam-capacity:
    +--rw max-beams-per-symbol? uint16
    +--rw max-beams-per-slot?   uint16
  grouping endpoint-prb-capacity:
    +--rw max-prb-per-symbol? uint16
  grouping endpoint-numerology-capacity:
    +--rw max-numerologies-per-symbol? uint16
  grouping uplane-conf-group:
    +--rw low-level-tx-links* [name]
    |  +--rw name                   string
    |  +--rw processing-element     leafref
    |  +--rw tx-array-carrier       leafref
    |  +--rw low-level-tx-endpoint  leafref
    +--rw low-level-rx-links* [name]
    |  +--rw name                       string
    |  +--rw processing-element         leafref
    |  +--rw rx-array-carrier           leafref
    |  +--rw low-level-rx-endpoint      leafref
    |  +--rw user-plane-uplink-marking? leafref
    +--ro endpoint-types* [id]
    |  +--ro id                                     uint16
    |  +--ro supported-section-types* [section-type]
    |  |  +--ro section-type                  uint8
    |  |  +--ro supported-section-extensions* uint8
    |  +--ro supported-frame-structures*            uint8
    |  +--ro managed-delay-support?                 enumeration
    |  +--ro multiple-numerology-supported?         boolean
    |  +--ro max-numerology-change-duration?        uint16
    |  +--ro max-control-sections-per-data-section? uint8
    |  +--ro max-sections-per-symbol?               uint16
    |  +--ro max-sections-per-slot?                 uint16
    |  +--ro max-beams-per-symbol?                  uint16
    |  +--ro max-beams-per-slot?                    uint16
    |  +--ro max-prb-per-symbol?                    uint16
    |  +--ro prb-capacity-allocation-granularity*   uint16
    |  +--ro max-numerologies-per-symbol?           uint16
    +--ro endpoint-capacity-sharing-groups* [id]
    |  +--ro id                                     uint16
    |  +--ro max-control-sections-per-data-section? uint8
    |  +--ro max-sections-per-symbol?               uint16
    |  +--ro max-sections-per-slot?                 uint16
    |  +--ro max-beams-per-symbol?                  uint16
    |  +--ro max-beams-per-slot?                    uint16
    |  +--ro max-prb-per-symbol?                    uint16
    |  +--ro max-numerologies-per-symbol?           uint16
    |  +--ro max-endpoints?                         uint16
    |  +--ro max-managed-delay-endpoints?           uint16
    |  +--ro max-non-managed-delay-endpoints?       uint16
    +--ro static-low-level-tx-endpoints* [name]
    |  +--ro name                     string
    |  +--ro restricted-interfaces*   leafref
    |  +--ro array                    leafref
    |  +--ro endpoint-type?           leafref
    |  +--ro capacity-sharing-groups* leafref
    +--ro static-low-level-rx-endpoints* [name]
    |  +--ro name                     string
    |  +--ro restricted-interfaces*   leafref
    |  +--ro array                    leafref
    |  +--ro endpoint-type?           leafref
    |  +--ro capacity-sharing-groups* leafref
    +--rw low-level-tx-endpoints* [name]
    |  +--rw name                                 leafref
    |  +--rw compression!
    |  |  +--rw iq-bitwidth?                       uint8
    |  |  +--rw compression-type                   enumeration
    |  |  x--rw bitwidth?                          uint8
    |  |  +--rw (compression-format)?
    |  |     +--:(no-compresison)
    |  |     +--:(block-floating-point)
    |  |     |  +--rw exponent?                          uint8
    |  |     +--:(block-scaling)
    |  |     |  +--rw block-scalar?                      uint8
    |  |     +--:(u-law)
    |  |     |  +--rw comp-bit-width?                    uint8
    |  |     |  +--rw comp-shift?                        uint8
    |  |     +--:(beam-space-compression)
    |  |     |  +--rw active-beam-space-coeficient-mask* uint8
    |  |     |  +--rw block-scaler?                      uint8
    |  |     +--:(modulation-compression)
    |  |        +--rw csf?                               uint8
    |  |        +--rw mod-comp-scaler?                   uint16
    |  +--rw frame-structure?                     uint8
    |  +--rw cp-type?                             enumeration
    |  +--rw cp-length                            uint16
    |  +--rw cp-length-other                      uint16
    |  +--rw offset-to-absolute-frequency-center  int32
    |  +--rw number-of-prb-per-scs* [scs]
    |  |  +--rw scs            mcap:scs-config-type
    |  |  +--rw number-of-prb  uint16
    |  +--rw e-axcid
    |     +--rw o-du-port-bitmask    uint16
    |     +--rw band-sector-bitmask  uint16
    |     +--rw ccid-bitmask         uint16
    |     +--rw ru-port-bitmask      uint16
    |     +--rw eaxc-id              uint16
    +--rw low-level-rx-endpoints* [name]
    |  +--rw name                                 leafref
    |  +--rw compression
    |  |  +--rw iq-bitwidth?                       uint8
    |  |  +--rw compression-type                   enumeration
    |  |  x--rw bitwidth?                          uint8
    |  |  +--rw (compression-format)?
    |  |     +--:(no-compresison)
    |  |     +--:(block-floating-point)
    |  |     |  +--rw exponent?                          uint8
    |  |     +--:(block-scaling)
    |  |     |  +--rw block-scalar?                      uint8
    |  |     +--:(u-law)
    |  |     |  +--rw comp-bit-width?                    uint8
    |  |     |  +--rw comp-shift?                        uint8
    |  |     +--:(beam-space-compression)
    |  |     |  +--rw active-beam-space-coeficient-mask* uint8
    |  |     |  +--rw block-scaler?                      uint8
    |  |     +--:(modulation-compression)
    |  |        +--rw csf?                               uint8
    |  |        +--rw mod-comp-scaler?                   uint16
    |  +--rw frame-structure?                     uint8
    |  +--rw cp-type?                             enumeration
    |  +--rw cp-length                            uint16
    |  +--rw cp-length-other                      uint16
    |  +--rw offset-to-absolute-frequency-center  int32
    |  +--rw number-of-prb-per-scs* [scs]
    |  |  +--rw scs            mcap:scs-config-type
    |  |  +--rw number-of-prb  uint16
    |  +--rw ul-fft-sampling-offsets* [scs]
    |  |  +--rw scs                     mcap:scs-config-type
    |  |  +--rw ul-fft-sampling-offset? uint16
    |  +--rw e-axcid
    |  |  +--rw o-du-port-bitmask    uint16
    |  |  +--rw band-sector-bitmask  uint16
    |  |  +--rw ccid-bitmask         uint16
    |  |  +--rw ru-port-bitmask      uint16
    |  |  +--rw eaxc-id              uint16
    |  +--rw non-time-managed-delay-enabled?      boolean
    +--rw tx-array-carriers* [name]
    |  +--rw name                         string
    |  +--rw absolute-frequency-center    uint32
    |  +--rw center-of-channel-bandwidth  uint64
    |  +--rw channel-bandwidth            uint64
    |  +--rw active?                      enumeration
    |  +--ro state                        enumeration
    |  +--ro type                         enumeration
    |  +--ro duplex-scheme?               enumeration
    |  +--rw rw-duplex-scheme?            leafref
    |  +--rw rw-type?                     leafref
    |  +--rw band-number?                 leafref {mcap:LAA}?
    |  +--rw lte-tdd-frame
    |  |  +--rw subframe-assignment       enumeration
    |  |  +--rw special-subframe-pattern  enumeration
    |  +--rw laa-carrier-configuration {mcap:LAA}?
    |  |  +--rw ed-threshold-pdsch?         int8
    |  |  +--rw ed-threshold-drs?           int8
    |  |  +--rw tx-antenna-ports?           uint8
    |  |  +--rw transmission-power-for-drs? int8
    |  |  +--rw dmtc-period?                enumeration
    |  |  +--rw dmtc-offset?                uint8
    |  |  +--rw lbt-timer?                  uint16
    |  |  +--rw max-cw-usage-counter* [priority]
    |  |     +--rw priority       enumeration
    |  |     +--rw counter-value? uint8
    |  +--rw gain                         decimal64
    |  +--rw downlink-radio-frame-offset  uint32
    |  +--rw downlink-sfn-offset          int16
    +--rw rx-array-carriers* [name]
    |  +--rw name                         string
    |  +--rw absolute-frequency-center    uint32
    |  +--rw center-of-channel-bandwidth  uint64
    |  +--rw channel-bandwidth            uint64
    |  +--rw active?                      enumeration
    |  +--ro state                        enumeration
    |  +--ro type                         enumeration
    |  +--ro duplex-scheme?               enumeration
    |  +--rw downlink-radio-frame-offset  uint32
    |  +--rw downlink-sfn-offset          int16
    |  +--rw gain-correction              decimal64
    |  +--rw n-ta-offset                  uint32
    +--ro tx-arrays* [name]
    |  +--ro name                                    string
    |  +--ro number-of-rows                          uint16
    |  +--ro number-of-columns                       uint16
    |  +--ro number-of-array-layers                  uint8
    |  +--ro horizontal-spacing?                     decimal64
    |  +--ro vertical-spacing?                       decimal64
    |  +--ro normal-vector-direction
    |  |  +--ro azimuth-angle? decimal64
    |  |  +--ro zenith-angle?  decimal64
    |  +--ro leftmost-bottom-array-element-position
    |  |  +--ro x? decimal64
    |  |  +--ro y? decimal64
    |  |  +--ro z? decimal64
    |  +--ro polarisations* [p]
    |  |  +--ro p             uint8
    |  |  +--ro polarisation  polarisation_type
    |  +--ro band-number                             leafref
    |  +--ro max-gain                                decimal64
    |  +--ro independent-power-budget                boolean
    |  +--ro capabilities*
    |     +--ro max-supported-frequency-dl? uint64
    |     +--ro min-supported-frequency-dl? uint64
    |     +--ro max-supported-bandwidth-dl? uint64
    |     +--ro max-num-carriers-dl?        uint32
    |     +--ro max-carrier-bandwidth-dl?   uint64
    |     +--ro min-carrier-bandwidth-dl?   uint64
    +--ro rx-arrays* [name]
    |  +--ro name                                    string
    |  +--ro number-of-rows                          uint16
    |  +--ro number-of-columns                       uint16
    |  +--ro number-of-array-layers                  uint8
    |  +--ro horizontal-spacing?                     decimal64
    |  +--ro vertical-spacing?                       decimal64
    |  +--ro normal-vector-direction
    |  |  +--ro azimuth-angle? decimal64
    |  |  +--ro zenith-angle?  decimal64
    |  +--ro leftmost-bottom-array-element-position
    |  |  +--ro x? decimal64
    |  |  +--ro y? decimal64
    |  |  +--ro z? decimal64
    |  +--ro polarisations* [p]
    |  |  +--ro p             uint8
    |  |  +--ro polarisation  polarisation_type
    |  +--ro band-number                             leafref
    |  +--ro gain-correction-range
    |  |  +--ro max  decimal64
    |  |  +--ro min  decimal64
    |  +--ro capabilities*
    |     +--ro max-supported-frequency-ul? uint64
    |     +--ro min-supported-frequency-ul? uint64
    |     +--ro max-supported-bandwidth-ul? uint64
    |     +--ro max-num-carriers-ul?        uint32
    |     +--ro max-carrier-bandwidth-ul?   uint64
    |     +--ro min-carrier-bandwidth-ul?   uint64
    +--ro relations* [entity]
       +--ro entity  uint16
       +--ro array1
       |  +--ro (antenna-type)?
       |     +--:(tx)
       |     |  +--ro tx-array-name? leafref
       |     +--:(rx)
       |        +--ro rx-array-name? leafref
       +--ro array2
       |  +--ro (antenna-type)?
       |     +--:(tx)
       |     |  +--ro tx-array-name? leafref
       |     +--:(rx)
       |        +--ro rx-array-name? leafref
       +--ro types* [relation-type]
          +--ro relation-type  enumeration
          +--ro pairs* [element-array1]
             +--ro element-array1  uint16
             +--ro element-array2? uint16
  grouping tx-array-notification-group:
    +--rw tx-array-carriers* [name]
       +--rw name   leafref
       +--rw state? leafref
  grouping rx-array-notification-group:
    +--rw rx-array-carriers* [name]
       +--rw name   leafref
       +--rw state? leafref

module: o-ran-usermgmt
  +--rw users
     +--rw user* [name]
        +--rw name          nacm:user-name-type
        +--rw account-type? enumeration
        +--rw password?     password-type
        +--rw enabled?      boolean

  rpcs:
    +---x chg-password  
       +---w input   
       |  +---w currentPassword     password-type
       |  +---w newPassword         password-type
       |  +---w newPasswordConfirm  password-type
       +--ro output  
          +--ro status          enumeration
          +--ro status-message? string

  grouping user-list:
    +--rw user* [name]
       +--rw name          nacm:user-name-type
       +--rw account-type? enumeration
       +--rw password?     password-type
       +--rw enabled?      boolean

