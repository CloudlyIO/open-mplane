/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      DpdXilinxDpdTestHandler.cpp
 * \brief     Test methods for DPD@XILINX
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 * Add any file header comments here %%-->

 * <--%%
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "Nodes/RtiDirEntry.h"
#include "Nodes/TestVar.h"
#include "Nodes/TestReadVar.h"
#include "Nodes/TestWriteVar.h"
#include "Nodes/DirClass.h"
#include "RtiKeyword.h"
#include "DpdXilinxDpdTestHandler.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%


//=============================================================================================================
// STATIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::registerMethods(IRtiMsgParser& msgParser, IRtiSettings& settings)
{
	// Create a directory to store the data in
	msgParser.addDir( new DirClass("/dpd", "DPD functions", msgParser, settings) ) ;


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/abort",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"requests an immediate termination of any iteration that is in progress",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/apiVersion",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"get the current api version",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/capture",
			"[INT tx],[ENUM(X:Z:RAW) src],[ENUM(OFF:ON) decimation],[INT level],[INT i]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"capture a set of data and write to the MatLab output channel (use src=X|Z level=trigger i=#samples) ",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/checkApi",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Check that application API version matches DPD version",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/debugStatus",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"Show the DPD debug status registers",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/frd",
			"INT addr",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"read from the specified address",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/fwr",
			"INT addr,INT data",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"write data to the address",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/get",
			"[STRING arg0],[STRING arg1],[STRING arg2],[STRING arg3],[STRING arg4],[STRING arg5],[STRING arg6],[STRING arg7],[STRING arg8],[STRING arg9],[STRING arg10],[STRING arg11],[STRING arg12],[STRING arg13],[STRING arg14],[STRING arg15],[STRING arg16],[STRING arg17],[STRING arg18],[STRING arg19],[STRING arg20],[STRING arg21],[STRING arg22],[STRING arg23],[STRING arg24],[STRING arg25],[STRING arg26],[STRING arg27],[STRING arg28],[STRING arg29],[STRING arg30],[STRING arg31],[STRING arg32],[STRING arg33],[STRING arg34],[STRING arg35],[STRING arg36],[STRING arg37],[STRING arg38],[STRING arg39],[STRING arg40],[STRING arg41],[STRING arg42],[STRING arg43],[STRING arg44],[STRING arg45],[STRING arg46],[STRING arg47],[STRING arg48],[STRING arg49],[STRING arg50],[STRING arg51],[STRING arg52],[STRING arg53],[STRING arg54],[STRING arg55],[STRING arg56],[STRING arg57],[STRING arg58],[STRING arg59],[STRING arg60],[STRING arg61],[STRING arg62],[STRING arg63],[STRING arg64],[STRING arg65],[STRING arg66],[STRING arg67],[STRING arg68],[STRING arg69],[STRING arg70],[STRING arg71],[STRING arg72],[STRING arg73],[STRING arg74],[STRING arg75],[STRING arg76],[INT tx],[ENUM(MINOR:MAJOR) severity]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"get the state variable values",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/logClose",
			"ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/logOpen",
			"ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/logShow",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/portClose",
			"ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type,INT port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/portOpen",
			"ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type,INT port",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/portShow",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/printCfr",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"write the hard clip table to the MatLab output channel",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/printFpga",
			"INT addr,INT i",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"FPGA register memory dump to MatLab output channel",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/printLuts",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"write the calculated LUTs to the MatLab output channel",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/printModel",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"write the current amplifier model to the MatLab output channel",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/reboot",
			"",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"reboot the embedded processor",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/reset",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"this resets both the DPD filter to unity and the DPD control state machine",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/set",
			"[ENUM(NACK:ACK) response],[INT msgId],[INT version],[FLOAT fpgaVersion],[INT build],[INT precision],[ENUM(OFF:ON) trace],[ENUM(OFF:ON) verbose],[ENUM(OFF:ON) matlab],[ENUM(OFF:ON) console],[INT uptime],[INT t],[INT dt],[INT tx],[INT Q],[INT B],[INT N],[FLOAT G],[FLOAT Gqmc],[FLOAT Gagc],[INT taps],[INT mags],[FLOAT C1],[FLOAT C2],[INT clip],[INT occupancy],[FLOAT XcfrRef],[INT XrmsRef],[INT XminRef],[INT YrmsRef],[FLOAT srxAtten],[FLOAT srxLimit],[FLOAT fwdGerr],[FLOAT revGerr],[ENUM(OFF:ON) srxAgc],[ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state],[INT success],[INT fail],[ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err],[FLOAT eff],[FLOAT Elim],[FLOAT Gexp],[FLOAT Glim],[FLOAT evm],[INT lock],[FLOAT Tabs],[FLOAT Tdelta],[FLOAT Tlim],[FLOAT Gadj],[ENUM(OFF:ON) norm],[INT Tconv],[FLOAT Vlim],[ENUM(OFF:ON:ENHANCED:X:Z) ta],[ENUM(FULL:ERROR) mode],[ENUM(OFF:ON:DECIMATED:BYPASS) dpd],[ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc],[ENUM(OFF:ON) fdf],[ENUM(OFF:ON) converge],[INT skew],[ENUM(OFF:ON:BLOCK) afc],[ENUM(OFF:ON) dynamic],[ENUM(OFF:ON) alarm],[ENUM(MINOR:MAJOR) severity],[ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState],[INT alarmN],[INT alarmT1],[INT alarmT2],[ENUM(OFF:ON) decimation],[INT Iconv],[INT i],[INT addr],[INT data],[INT id],[INT level],[ENUM(X:Z:RAW) src],[INT debug],[INT apiVersion]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"set the state variables",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/start",
			"[ENUM(NACK:ACK) response],[INT msgId],[INT version],[FLOAT fpgaVersion],[INT build],[INT precision],[ENUM(OFF:ON) trace],[ENUM(OFF:ON) verbose],[ENUM(OFF:ON) matlab],[ENUM(OFF:ON) console],[INT uptime],[INT t],[INT dt],[INT tx],[INT Q],[INT B],[INT N],[FLOAT G],[FLOAT Gqmc],[FLOAT Gagc],[INT taps],[INT mags],[FLOAT C1],[FLOAT C2],[INT clip],[INT occupancy],[FLOAT XcfrRef],[INT XrmsRef],[INT XminRef],[INT YrmsRef],[FLOAT srxAtten],[FLOAT srxLimit],[FLOAT fwdGerr],[FLOAT revGerr],[ENUM(OFF:ON) srxAgc],[ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state],[INT success],[INT fail],[ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err],[FLOAT eff],[FLOAT Elim],[FLOAT Gexp],[FLOAT Glim],[FLOAT evm],[INT lock],[FLOAT Tabs],[FLOAT Tdelta],[FLOAT Tlim],[FLOAT Gadj],[ENUM(OFF:ON) norm],[INT Tconv],[FLOAT Vlim],[ENUM(OFF:ON:ENHANCED:X:Z) ta],[ENUM(FULL:ERROR) mode],[ENUM(OFF:ON:DECIMATED:BYPASS) dpd],[ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc],[ENUM(OFF:ON) fdf],[ENUM(OFF:ON) converge],[INT skew],[ENUM(OFF:ON:BLOCK) afc],[ENUM(OFF:ON) dynamic],[ENUM(OFF:ON) alarm],[ENUM(MINOR:MAJOR) severity],[ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState],[INT alarmN],[INT alarmT1],[INT alarmT2],[ENUM(OFF:ON) decimation],[INT Iconv],[INT i],[INT addr],[INT data],[INT id],[INT level],[ENUM(X:Z:RAW) src],[INT debug],[INT apiVersion]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"start running DPD iterations",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/stop",
			"[INT tx]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"stops the DPD iterations once any that have already been started are completed, they can be resumed from where they left off using the resume command",
			msgParser, settings))
	);


	msgParser.add( static_cast<RtiDirEntry *>(new DpdXilinxDpdTestHandler("/dpd/test",
			"[INT tx],[INT id],[INT i]",
			"ENUM(OK:ERROR) Status=OK,[STRING Info],[STRING Message]",
			"run a supported in-built test case (use id=testcase and i=#iterations)",
			msgParser, settings))
	);





}




//=============================================================================================================
// PUBLIC
//=============================================================================================================


//-------------------------------------------------------------------------------------------------------------
DpdXilinxDpdTestHandler::DpdXilinxDpdTestHandler() :
	EntryFunc("", "", "", "", *ITifControl::NULL_MSG_PARSER, *ITifControl::NULL_SETTINGS),
	mHelper(DpdTestHelper::getInstance())
{
	// NOTE: This is a dummy object creator only provided so build features can get access
	// to the registerEntry() method
}

//-------------------------------------------------------------------------------------------------------------
DpdXilinxDpdTestHandler::DpdXilinxDpdTestHandler(const std::string& pathname, const std::string& callFields,
		const std::string& returnFields, const std::string& comment,
		IRtiMsgParser& msgParser, IRtiSettings& settings) :
	EntryFunc(pathname, comment, callFields, returnFields, msgParser, settings),
	mHelper(DpdTestHelper::getInstance())
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
DpdXilinxDpdTestHandler::~DpdXilinxDpdTestHandler()
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
bool DpdXilinxDpdTestHandler::registerEntry(ITif* tif)
{
	// Convert ITif object into it's expected subclasses
	IRtiMsgParser* msgParser(dynamic_cast<IRtiMsgParser*>(tif)) ;
	IRtiSettings* settings(dynamic_cast<IRtiSettings*>(tif)) ;
	if (!msgParser)
		return false ;
	if (!settings)
		return false ;

	// now call this object's registerMethods() method to do the actual work
	registerMethods(*msgParser, *settings) ;
	return true ;
}


//-------------------------------------------------------------------------------------------------------------
std::string DpdXilinxDpdTestHandler::operator()(const std::string& functionName)
{

    if( functionName == "abort")
    {
        abort( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "apiVersion")
    {
        apiVersion( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "capture")
    {
        capture( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "checkApi")
    {
        checkApi( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "debugStatus")
    {
        debugStatus( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "frd")
    {
        frd( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "fwr")
    {
        fwr( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "get")
    {
        get( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "logClose")
    {
        logClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "logOpen")
    {
        logOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "logShow")
    {
        logShow( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portClose")
    {
        portClose( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portOpen")
    {
        portOpen( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "portShow")
    {
        portShow( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "printCfr")
    {
        printCfr( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "printFpga")
    {
        printFpga( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "printLuts")
    {
        printLuts( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "printModel")
    {
        printModel( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reboot")
    {
        reboot( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "reset")
    {
        reset( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "set")
    {
        set( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "start")
    {
        start( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "stop")
    {
        stop( callVarList, returnVarList  );
        return "" ;
    }


    if( functionName == "test")
    {
        test( callVarList, returnVarList  );
        return "" ;
    }



    return "";
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::abort(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->abort( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::apiVersion(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->apiVersion( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::capture(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// * [ENUM(X:Z:RAW) src]
	// * [ENUM(OFF:ON) decimation]
	// * [INT level]
	// * [INT i]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->capture( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::checkApi(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->checkApi( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::debugStatus(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->debugStatus( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::frd(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->frd( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::fwr(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// * INT data
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->fwr( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::get(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [STRING arg0]
	// * [STRING arg1]
	// * [STRING arg2]
	// * [STRING arg3]
	// * [STRING arg4]
	// * [STRING arg5]
	// * [STRING arg6]
	// * [STRING arg7]
	// * [STRING arg8]
	// * [STRING arg9]
	// * [STRING arg10]
	// * [STRING arg11]
	// * [STRING arg12]
	// * [STRING arg13]
	// * [STRING arg14]
	// * [STRING arg15]
	// * [STRING arg16]
	// * [STRING arg17]
	// * [STRING arg18]
	// * [STRING arg19]
	// * [STRING arg20]
	// * [STRING arg21]
	// * [STRING arg22]
	// * [STRING arg23]
	// * [STRING arg24]
	// * [STRING arg25]
	// * [STRING arg26]
	// * [STRING arg27]
	// * [STRING arg28]
	// * [STRING arg29]
	// * [STRING arg30]
	// * [STRING arg31]
	// * [STRING arg32]
	// * [STRING arg33]
	// * [STRING arg34]
	// * [STRING arg35]
	// * [STRING arg36]
	// * [STRING arg37]
	// * [STRING arg38]
	// * [STRING arg39]
	// * [STRING arg40]
	// * [STRING arg41]
	// * [STRING arg42]
	// * [STRING arg43]
	// * [STRING arg44]
	// * [STRING arg45]
	// * [STRING arg46]
	// * [STRING arg47]
	// * [STRING arg48]
	// * [STRING arg49]
	// * [STRING arg50]
	// * [STRING arg51]
	// * [STRING arg52]
	// * [STRING arg53]
	// * [STRING arg54]
	// * [STRING arg55]
	// * [STRING arg56]
	// * [STRING arg57]
	// * [STRING arg58]
	// * [STRING arg59]
	// * [STRING arg60]
	// * [STRING arg61]
	// * [STRING arg62]
	// * [STRING arg63]
	// * [STRING arg64]
	// * [STRING arg65]
	// * [STRING arg66]
	// * [STRING arg67]
	// * [STRING arg68]
	// * [STRING arg69]
	// * [STRING arg70]
	// * [STRING arg71]
	// * [STRING arg72]
	// * [STRING arg73]
	// * [STRING arg74]
	// * [STRING arg75]
	// * [STRING arg76]
	// * [INT tx]
	// * [ENUM(MINOR:MAJOR) severity]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->get( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::logClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->logClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::logOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->logOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::logShow(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->logShow( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::portClose(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portClose( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::portOpen(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * ENUM(CMD:REPLY:EVENT:LOG:MATLAB:TEXT) type
	// * INT port
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portOpen( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::portShow(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->portShow( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::printCfr(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->printCfr( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::printFpga(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// * INT i
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->printFpga( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::printLuts(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->printLuts( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::printModel(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->printModel( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::reboot(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reboot( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::reset(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->reset( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::set(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(NACK:ACK) response]
	// * [INT msgId]
	// * [INT version]
	// * [FLOAT fpgaVersion]
	// * [INT build]
	// * [INT precision]
	// * [ENUM(OFF:ON) trace]
	// * [ENUM(OFF:ON) verbose]
	// * [ENUM(OFF:ON) matlab]
	// * [ENUM(OFF:ON) console]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT tx]
	// * [INT Q]
	// * [INT B]
	// * [INT N]
	// * [FLOAT G]
	// * [FLOAT Gqmc]
	// * [FLOAT Gagc]
	// * [INT taps]
	// * [INT mags]
	// * [FLOAT C1]
	// * [FLOAT C2]
	// * [INT clip]
	// * [INT occupancy]
	// * [FLOAT XcfrRef]
	// * [INT XrmsRef]
	// * [INT XminRef]
	// * [INT YrmsRef]
	// * [FLOAT srxAtten]
	// * [FLOAT srxLimit]
	// * [FLOAT fwdGerr]
	// * [FLOAT revGerr]
	// * [ENUM(OFF:ON) srxAgc]
	// * [ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state]
	// * [INT success]
	// * [INT fail]
	// * [ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err]
	// * [FLOAT eff]
	// * [FLOAT Elim]
	// * [FLOAT Gexp]
	// * [FLOAT Glim]
	// * [FLOAT evm]
	// * [INT lock]
	// * [FLOAT Tabs]
	// * [FLOAT Tdelta]
	// * [FLOAT Tlim]
	// * [FLOAT Gadj]
	// * [ENUM(OFF:ON) norm]
	// * [INT Tconv]
	// * [FLOAT Vlim]
	// * [ENUM(OFF:ON:ENHANCED:X:Z) ta]
	// * [ENUM(FULL:ERROR) mode]
	// * [ENUM(OFF:ON:DECIMATED:BYPASS) dpd]
	// * [ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc]
	// * [ENUM(OFF:ON) fdf]
	// * [ENUM(OFF:ON) converge]
	// * [INT skew]
	// * [ENUM(OFF:ON:BLOCK) afc]
	// * [ENUM(OFF:ON) dynamic]
	// * [ENUM(OFF:ON) alarm]
	// * [ENUM(MINOR:MAJOR) severity]
	// * [ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState]
	// * [INT alarmN]
	// * [INT alarmT1]
	// * [INT alarmT2]
	// * [ENUM(OFF:ON) decimation]
	// * [INT Iconv]
	// * [INT i]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// * [ENUM(X:Z:RAW) src]
	// * [INT debug]
	// * [INT apiVersion]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->set( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::start(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(NACK:ACK) response]
	// * [INT msgId]
	// * [INT version]
	// * [FLOAT fpgaVersion]
	// * [INT build]
	// * [INT precision]
	// * [ENUM(OFF:ON) trace]
	// * [ENUM(OFF:ON) verbose]
	// * [ENUM(OFF:ON) matlab]
	// * [ENUM(OFF:ON) console]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT tx]
	// * [INT Q]
	// * [INT B]
	// * [INT N]
	// * [FLOAT G]
	// * [FLOAT Gqmc]
	// * [FLOAT Gagc]
	// * [INT taps]
	// * [INT mags]
	// * [FLOAT C1]
	// * [FLOAT C2]
	// * [INT clip]
	// * [INT occupancy]
	// * [FLOAT XcfrRef]
	// * [INT XrmsRef]
	// * [INT XminRef]
	// * [INT YrmsRef]
	// * [FLOAT srxAtten]
	// * [FLOAT srxLimit]
	// * [FLOAT fwdGerr]
	// * [FLOAT revGerr]
	// * [ENUM(OFF:ON) srxAgc]
	// * [ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state]
	// * [INT success]
	// * [INT fail]
	// * [ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err]
	// * [FLOAT eff]
	// * [FLOAT Elim]
	// * [FLOAT Gexp]
	// * [FLOAT Glim]
	// * [FLOAT evm]
	// * [INT lock]
	// * [FLOAT Tabs]
	// * [FLOAT Tdelta]
	// * [FLOAT Tlim]
	// * [FLOAT Gadj]
	// * [ENUM(OFF:ON) norm]
	// * [INT Tconv]
	// * [FLOAT Vlim]
	// * [ENUM(OFF:ON:ENHANCED:X:Z) ta]
	// * [ENUM(FULL:ERROR) mode]
	// * [ENUM(OFF:ON:DECIMATED:BYPASS) dpd]
	// * [ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc]
	// * [ENUM(OFF:ON) fdf]
	// * [ENUM(OFF:ON) converge]
	// * [INT skew]
	// * [ENUM(OFF:ON:BLOCK) afc]
	// * [ENUM(OFF:ON) dynamic]
	// * [ENUM(OFF:ON) alarm]
	// * [ENUM(MINOR:MAJOR) severity]
	// * [ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState]
	// * [INT alarmN]
	// * [INT alarmT1]
	// * [INT alarmT2]
	// * [ENUM(OFF:ON) decimation]
	// * [INT Iconv]
	// * [INT i]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// * [ENUM(X:Z:RAW) src]
	// * [INT debug]
	// * [INT apiVersion]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->start( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::stop(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->stop( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdXilinxDpdTestHandler::test(  DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// * [INT id]
	// * [INT i]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//
	mHelper->test( mMsgParser, callList, returnList ) ;

	// Insert your code here : %%-->

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
