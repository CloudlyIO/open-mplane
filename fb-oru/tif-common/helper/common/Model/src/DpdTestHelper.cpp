/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      DpdTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "DpdTestHelper.h"

// Add any specific includes here %%-->

// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->


// List of methods implemented in base class:
//
// @gentool: suppress apiVersion
// @gentool: suppress checkApi
// @gentool: suppress debugStatus
// @gentool: suppress dump
// @gentool: suppress frd
// @gentool: suppress fwr
// @gentool: suppress get
// @gentool: suppress set
// @gentool: suppress logClose
// @gentool: suppress logOpen
// @gentool: suppress logShow
// @gentool: suppress portClose
// @gentool: suppress portOpen
// @gentool: suppress portShow
// @gentool: suppress reset

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<DpdTestHelper> DpdTestHelper::getInstance()
{
	static std::shared_ptr<DpdTestHelper> instance(std::make_shared<DpdTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
DpdTestHelper::DpdTestHelper()
// Insert additional inheritance constructors here : %%-->
	: FpgaCommsHelper("DPD", IFpgaComms::getInterface(), "state")

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
DpdTestHelper::~DpdTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::abort( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->

	cmdWithSet("abort", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::capture( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// * [ENUM(X:Z:RAW) src]
	// * [ENUM(OFF:ON) decimation]
	// * [INT level]
	// * [INT i]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	//	std::shared_ptr<IFpgaMsg> msg( IFpgaMsg::factory("capture") ) ;
	//	commandWaitResponse(msg, returnList) ;

	cmdWithSet("capture", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::printCfr( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("printCfr", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::printFpga( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * INT addr
	// * INT i
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdShowResponse("printFpga", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::printLuts( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("printLuts", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::printModel( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("printModel", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::reboot( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// *
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("reboot", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::start( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [ENUM(NACK:ACK) response]
	// * [INT msgId]
	// * [INT version]
	// * [FLOAT fpgaVersion]
	// * [INT build]
	// * [INT precision]
	// * [ENUM(OFF:ON) trace]
	// * [ENUM(OFF:ON) verbose]
	// * [ENUM(OFF:ON) matlab]
	// * [ENUM(OFF:ON) console]
	// * [INT uptime]
	// * [INT t]
	// * [INT dt]
	// * [INT tx]
	// * [INT Q]
	// * [INT B]
	// * [INT N]
	// * [FLOAT G]
	// * [FLOAT Gqmc]
	// * [FLOAT Gagc]
	// * [INT taps]
	// * [INT mags]
	// * [FLOAT C1]
	// * [FLOAT C2]
	// * [INT clip]
	// * [INT occupancy]
	// * [FLOAT XcfrRef]
	// * [INT XrmsRef]
	// * [INT XminRef]
	// * [INT YrmsRef]
	// * [FLOAT srxAtten]
	// * [FLOAT srxLimit]
	// * [FLOAT fwdGerr]
	// * [FLOAT revGerr]
	// * [ENUM(OFF:ON) srxAgc]
	// * [ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state]
	// * [INT success]
	// * [INT fail]
	// * [ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err]
	// * [FLOAT eff]
	// * [FLOAT Elim]
	// * [FLOAT Gexp]
	// * [FLOAT Glim]
	// * [FLOAT evm]
	// * [INT lock]
	// * [FLOAT Tabs]
	// * [FLOAT Tdelta]
	// * [FLOAT Tlim]
	// * [FLOAT Gadj]
	// * [ENUM(OFF:ON) norm]
	// * [INT Tconv]
	// * [FLOAT Vlim]
	// * [ENUM(OFF:ON:ENHANCED:X:Z) ta]
	// * [ENUM(FULL:ERROR) mode]
	// * [ENUM(OFF:ON:DECIMATED:BYPASS) dpd]
	// * [ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc]
	// * [ENUM(OFF:ON) fdf]
	// * [ENUM(OFF:ON) converge]
	// * [INT skew]
	// * [ENUM(OFF:ON:BLOCK) afc]
	// * [ENUM(OFF:ON) dynamic]
	// * [ENUM(OFF:ON) alarm]
	// * [ENUM(MINOR:MAJOR) severity]
	// * [ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState]
	// * [INT alarmN]
	// * [INT alarmT1]
	// * [INT alarmT2]
	// * [ENUM(OFF:ON) decimation]
	// * [INT Iconv]
	// * [INT i]
	// * [INT addr]
	// * [INT data]
	// * [INT id]
	// * [INT level]
	// * [ENUM(X:Z:RAW) src]
	// * [INT debug]
	// * [INT apiVersion]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("start", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::stop( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("stop", callList, returnList) ;

	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DpdTestHelper::test( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList )
{
	// Called with:
	// * [INT tx]
	// * [INT id]
	// * [INT i]
	// Returns:
	// * ENUM(OK:ERROR) Status=OK
	// * [STRING Info]
	// * [STRING Message]
	//

	// Insert your code here : %%-->
	cmdWithSet("test", callList, returnList) ;

	// <--%%
}










// Add any statics, private methods etc here %%-->

// <--%%
