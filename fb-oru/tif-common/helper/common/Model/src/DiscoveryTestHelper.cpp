/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      DiscoveryTestHelper.cpp
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run)
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include "RtiKeyword.h"
#include "DiscoveryTestHelper.h"

// Add any specific includes here %%-->
#include "IDiscovery.h"
// <--%%


using namespace Mplane ;

// Add any statics, types, prototypes etc here %%-->

// <--%%



//=============================================================================================================
// SINGLETON
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<DiscoveryTestHelper> DiscoveryTestHelper::getInstance()
{
	static std::shared_ptr<DiscoveryTestHelper> instance(std::make_shared<DiscoveryTestHelper>()) ;
	return instance ;
}

//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
DiscoveryTestHelper::DiscoveryTestHelper()
// Insert additional inheritance constructors here : %%-->

// <--%%
{
	// Insert your code here : %%-->

	// <--%%
}

//-------------------------------------------------------------------------------------------------------------
DiscoveryTestHelper::~DiscoveryTestHelper()
{
	// Insert your code here : %%-->

	// <--%%
}




//-------------------------------------------------------------------------------------------------------------
void DiscoveryTestHelper::cacheAgeGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/discovery/cacheAge"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IDiscovery> discovery(IDiscovery::getInstance()) ;
	returnList->find(pathname)->set(static_cast<int>(discovery->getCacheAge())) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DiscoveryTestHelper::ipGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/discovery/ip"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IDiscovery> discovery(IDiscovery::getInstance()) ;
	returnList->find(pathname)->set(discovery->getIp()) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DiscoveryTestHelper::notifyCountGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/discovery/notifyCount"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IDiscovery> discovery(IDiscovery::getInstance()) ;
	returnList->find(pathname)->set(static_cast<int>(discovery->getNotifyCount())) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DiscoveryTestHelper::searchCountGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/discovery/searchCount"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IDiscovery> discovery(IDiscovery::getInstance()) ;
	returnList->find(pathname)->set(static_cast<int>(discovery->getSearchCount())) ;
	// <--%%
}


//-------------------------------------------------------------------------------------------------------------
void DiscoveryTestHelper::uuidGet( const std::string& pathname, DataVariantList *returnList )
{
	// Getter for "/discovery/uuid"
	//
	// Return the variable value using the returnList using something like:
	//
	//   returnList->find(pathname)->set(someValue) ;
	//


	// Insert your code here : %%-->
	std::shared_ptr<IDiscovery> discovery(IDiscovery::getInstance()) ;
	returnList->find(pathname)->set(discovery->getUuid()) ;
	// <--%%
}








// Add any statics, private methods etc here %%-->

// <--%%
