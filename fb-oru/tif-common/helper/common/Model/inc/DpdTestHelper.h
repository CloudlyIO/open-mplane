/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      DpdTestHelper.h
 * \brief     Test helper for common
 *
 *
 * \details   Auto-generated by gentool. Contains test interface definitions. Please add your own
 * code between the %%--> and <--%% comment lines (any code outside these comments will be discarded
 * next time the generate tool is run).
 *
 */

#ifndef __DPDTESTHELPER__H_
#define __DPDTESTHELPER__H_


//=============================================================================================================
// INCLUDE
//=============================================================================================================
#include <string>
#include <vector>
#include <memory>
#include "IRtiMsgParser.h"
#include "DataVariant.h"

// Add any specific includes here %%-->
#include "FpgaCommsHelper.h"

// <--%%

//=============================================================================================================
// CLASS
//=============================================================================================================

namespace Mplane {

class DpdTestHelper
// Add any extra inheritance %%-->
	: public FpgaCommsHelper
// <--%%
{
public:

	// Add any class settings %%-->

	// List of methods implemented in base class:
	//
	// @gentool: suppress apiVersion
	// @gentool: suppress checkApi
	// @gentool: suppress debugStatus
	// @gentool: suppress dump
	// @gentool: suppress frd
	// @gentool: suppress fwr
	// @gentool: suppress get
	// @gentool: suppress set
	// @gentool: suppress logClose
	// @gentool: suppress logOpen
	// @gentool: suppress logShow
	// @gentool: suppress portClose
	// @gentool: suppress portOpen
	// @gentool: suppress portShow
	// @gentool: suppress reset

	// <--%%

	// singleton
	static std::shared_ptr<DpdTestHelper> getInstance() ;


	DpdTestHelper();

    virtual ~DpdTestHelper();

	/**
	 * Called with:
	 *   [INT tx]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void abort( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *   [ENUM(X:Z:RAW) src]
	 *   [ENUM(OFF:ON) decimation]
	 *   [INT level]
	 *   [INT i]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void capture( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void printCfr( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   INT addr
	 *   INT i
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void printFpga( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void printLuts( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void printModel( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void reboot( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [ENUM(NACK:ACK) response]
	 *   [INT msgId]
	 *   [INT version]
	 *   [FLOAT fpgaVersion]
	 *   [INT build]
	 *   [INT precision]
	 *   [ENUM(OFF:ON) trace]
	 *   [ENUM(OFF:ON) verbose]
	 *   [ENUM(OFF:ON) matlab]
	 *   [ENUM(OFF:ON) console]
	 *   [INT uptime]
	 *   [INT t]
	 *   [INT dt]
	 *   [INT tx]
	 *   [INT Q]
	 *   [INT B]
	 *   [INT N]
	 *   [FLOAT G]
	 *   [FLOAT Gqmc]
	 *   [FLOAT Gagc]
	 *   [INT taps]
	 *   [INT mags]
	 *   [FLOAT C1]
	 *   [FLOAT C2]
	 *   [INT clip]
	 *   [INT occupancy]
	 *   [FLOAT XcfrRef]
	 *   [INT XrmsRef]
	 *   [INT XminRef]
	 *   [INT YrmsRef]
	 *   [FLOAT srxAtten]
	 *   [FLOAT srxLimit]
	 *   [FLOAT fwdGerr]
	 *   [FLOAT revGerr]
	 *   [ENUM(OFF:ON) srxAgc]
	 *   [ENUM(IDLE:WAITMODEL:RESET:WAITBB:TA:CONVERGE:TRACK:NONE) state]
	 *   [INT success]
	 *   [INT fail]
	 *   [ENUM(OK:UNKNOWN:TIMEALIGNMENT:LOWBB:MUXFAIL:DCUFAIL:LOWSRX:HIGHSRX:YERROR:ZERROR:DIMENSIONING:SOLVER:LUTS:NORMALISATION:RANGE:COVERAGE:UPDATESTRATEGY:EFFICIENCY:EXPANSION:INSANE:SPURIOUS:INHIBIT) err]
	 *   [FLOAT eff]
	 *   [FLOAT Elim]
	 *   [FLOAT Gexp]
	 *   [FLOAT Glim]
	 *   [FLOAT evm]
	 *   [INT lock]
	 *   [FLOAT Tabs]
	 *   [FLOAT Tdelta]
	 *   [FLOAT Tlim]
	 *   [FLOAT Gadj]
	 *   [ENUM(OFF:ON) norm]
	 *   [INT Tconv]
	 *   [FLOAT Vlim]
	 *   [ENUM(OFF:ON:ENHANCED:X:Z) ta]
	 *   [ENUM(FULL:ERROR) mode]
	 *   [ENUM(OFF:ON:DECIMATED:BYPASS) dpd]
	 *   [ENUM(OFF:ON:FAST:DCONLY:X:Z) qmc]
	 *   [ENUM(OFF:ON) fdf]
	 *   [ENUM(OFF:ON) converge]
	 *   [INT skew]
	 *   [ENUM(OFF:ON:BLOCK) afc]
	 *   [ENUM(OFF:ON) dynamic]
	 *   [ENUM(OFF:ON) alarm]
	 *   [ENUM(MINOR:MAJOR) severity]
	 *   [ENUM(OFF:ON:INVALID:CLEAR:PENDING:ACTIVE:ACK) alarmState]
	 *   [INT alarmN]
	 *   [INT alarmT1]
	 *   [INT alarmT2]
	 *   [ENUM(OFF:ON) decimation]
	 *   [INT Iconv]
	 *   [INT i]
	 *   [INT addr]
	 *   [INT data]
	 *   [INT id]
	 *   [INT level]
	 *   [ENUM(X:Z:RAW) src]
	 *   [INT debug]
	 *   [INT apiVersion]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void start( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void stop( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );

	/**
	 * Called with:
	 *   [INT tx]
	 *   [INT id]
	 *   [INT i]
	 *
	 * Returns:
	 *   ENUM(OK:ERROR) Status=OK
	 *   [STRING Info]
	 *   [STRING Message]
	 *
	 */
	void test( IRtiMsgParser& msgParser, DataVariantList *callList, DataVariantList *returnList );






// Add any extra methods %%-->

// <--%%

};



// Add any Mplane namespace code here %%-->

// <--%%


} // Mplane

// Add any global namespace code here %%-->

// <--%%


#endif /* __DPDTESTHELPER__H_*/
