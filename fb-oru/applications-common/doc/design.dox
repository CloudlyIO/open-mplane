/**
@mainpage Common Application Software Module Overview
\anchor _home
<BR>
<CENTER>
@
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>


<hr>
@section application_common_sec_1	Design Overview
<hr>

The application repository contains a number of product and customer specific sub-directories. Among these
is the <b>common</b> product implementation that contains a number of common application classes which can be used
in all applications using the Open M-Plane Software Platform.

In general the product and customer specific applications will simply re-use the common application but the
design of the interfaces and base implementation allow the implementation to be easily changed or extended.


<hr>
@section application_common_subsec_2 Application Framework
<hr>

The common application framework provides a framework for creating and running all Open M-Plane Software Platform applications.
A link to the detailed design document can be found here:
<A HREF="../applications-common-Application/index.html" target="_blank"><b>Common Application Framework</b></A>

Please follow this link for details of the common design implementation.

<hr>
@section application_common_subsec_3 Command Line Options
<hr>

The application command line is processed by IAppOptions singleton and all registered options processed and stored (non-registered
options presented at the command line will be rejected).

A common set of command line options are created for all applications (see Application::appOptions()) and are described below. Additional
command line options can  be added either by application-specific initialisation code, or by features (some of which are described below).

The values of these options can either be set via the command line, or can be set by setting the shown environment variable
(either temporarily using the Linux environment, or more likely using the U-Boot environment).

All applications support the "-help" command line option which will show all available options (and in brackets any environment
variable name). For example:

@code
~ # EcbAlFelixProcess -help
Starting FELIX application for ECB hardware
Radio

OPTIONS
  --help             Show help

  --ethbb STRING     Ethernet interface name (over baseband) [Env variable: ETHBB]
  --ethcdi STRING    Ethernet interface name (control and debug) [Env variable: ETHCDI]
  --grouplog STRING  Logging for groups (name=level:name=level..) [Env variable: GROUPLOG]
  --instlog STRING   Logging for instances (name=level:name=level..) [Env variable: INSTLOG]
  --maxtxpower FLOAT Maximum transmit power (dB) [Env variable: TXPORTPOWER]
  --port INT         TIF port [Env variable: TIFPORT]

@endocode

@subsection application_common_subsec_3_1 Common Command Line Options
<hr>

\li -ethbb (env var ETHBB) : ethernet interface to be used for baseband packets [default is "eth_bb"]
\li -ethcdi (env var ETHCDI) : ethernet interface to be used for control and debug [default is "eth_cdi"]
\li -port (env var TIFPORT) : tcp port to use for TIF [default is "49500"]
\li -maxtxpower (env var TXPORTPOWER) : maximum transmit power (dB) [default is "43.1"]
\li -grouplog (env var GROUPLOG) : group logging setting [default is ""]
\li -instlog (env var INSTLOG) : instance logging setting [default is ""]

The group logging and instance logging settings are specified in the format: name=level[:name=level:...] i.e. a ':' separated list
of name/level pairs. For example, to set the logging levels of the fibre control (group="CC") to verbose and for tif (group="TIF") to normal
you would use:

@code
  -grouplog cc=verbose:tif=normal
@endcode

Alternatively, using the u-boot environment:

@code
  $ i2cenv -W GROUPLOG=cc=verbose:tif=normal
@endcode

And to remove the setting from the u-boot environment:

@code
  $ i2cenv -W GROUPLOG=
@endcode


@subsection application_common_subsec_3_1 Discovery Command Line Options
<hr>

\li -ethssdp (env var ETHSSDP) : ethernet interface to be used for discovery packets [default is "vlanbr"]

<hr>
@section application_common_subsec_4 U-Boot Environment Variables
<hr>

The U-Boot environment variables (as accessed using the i2cenv cli utility) are used at various stages of application start up. Some are required by u-boot,
some are used by the ROS start up, and the rest are optionally used by the application start up scripts or the application itself.

The following table details the variables and where they are used:

Variable      | Required    | U-Boot | ROS | Application | Comment
------------- | ----------- | ------ | --- | ----------- | ----------
init          |             |        | Y   |             | Used by ATE to initialise
booturl       |             |        | Y   |             | Used by ATE to initialise
tmpfssize     |             |        | Y   |             | Can specify a different /tmp file system size (default 48M)
bootdebug     |             |        | Y   |             | Debugs the rc.sh init script
eth1addr      | Y           |        | Y   | Y           | OS uses this MAC to set up CDI for ATE or general failure; application uses this for eth_cdi MAC
hostname      | Y           |        | Y   | Y           | OS uses this hostname to set up DHCP for general failure; application uses this as host name
noAppCheck    |             |        | Y   |             | Disables the application STABLE check (and image rollback)
earlyshell    |             |        | Y   |             | OS drops into a shell before starting the application
testEthBbDown |             |        |     | Y           | Special test mode - keeps eth_bb interface down
ethaddr       | Y           |        |     | Y           | MAC address of eth_bb
eth2addr      | Y           |        |     | Y           | MAC address of eth_bb.10 vlan
instlog       |             |        |     | Y           | Sets application logging for specific instance
grouplog      |             |        |     | Y           | Sets application logging for specific group



*/
