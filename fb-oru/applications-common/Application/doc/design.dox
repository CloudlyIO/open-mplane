/**
\mainpage Application Design Document
<br>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section app_common_appframework_scope Scope
<hr>

This document is a design overview document for the collection of classes that
makeup the common Open M-Plane software platform application framework.

Details of the design implementation can be found by following the links in the sections
that follow.

<hr>
\section app_common_appframework_overview	Overview
<hr>

The common framework provides a set of classes to simplify creating an application and ensuring common application startup tasks are
performed across all top level customer applications.

The framework also provisions the concept of features that can add application-specific behaviour (for example to add the command line options
required for running the SSDP device discovery service).

<hr>
\section app_common_appframework_sec_2 Details of Design
<hr>

\image html appframework.png "Application Framework Classes"

The diagram above shows the class hierarchy used in the framework. Mplane::IApplication defines the virtual interface to the application, while
Mplane::IBuildFeature provides the virtual interface to an application build features, if any. The application class implements the "Template Method" pattern,
where it calls each of the defined methods in the features in a set order with defined arguments. The feature class contains the actual code that implements the
application functionality (as well as storing any created singleton instances, data and so on etc).

Mplane::Application is the base class that contains a list of any registered features and manages calling those features in the correct order
as the application is started. The Mplane::Application class also performs all of the common software start up/initialisation code, so it is unlikely
that there will be any need to derive an application-specific variant.

\subsection app_common_appframework_sec_2_1 Mplane::IApplication Interface
<hr>

The methods defined by Mplane::IApplication are explained below:

@code
	//
	// Run the application. When running this class will call a number of hooks to allow
	// derived objects to add additional behaviour, or override default behaviour
	// @param name
	// @param argc
	// @param argv
	// @param extraOptions - Optionally supply additional options
	// @return exit code
	//
	virtual int run(
		const std::string& name,
		int argc, const char** argv,
		const std::vector< std::shared_ptr< Mplane::IAppOptionSpec > >& extraOptions = {}) =0 ;

@endcode


\image html appframework-calls.png "Application Feature Call Flow"

This shows a standard application start up sequence, and the method called at each of the stages.

<hr>
\section app_common_appframework_sec_3 Application Features
<hr>

\note See <A HREF="../buildTools-doc/index.html#buildsys_sec_10_features" target="_blank">Build Features</A> for details
on the build directories used for features

The application feature code is where all of the parts of a feature are pulled together.

Each feature needs to define an application start up object based on the IBuildFeature interface. This class performs whatever it needs to
do in order to get the feature up and running in the application.

So far, all of the feature definitions have been loosely coupled through the build: to add a new feature you create a feature definition file, and set
a build to use the feature through the build's config. You implement the feature through creating files in sub-directories that the build then compiles
for you.

The application start up is where we need to bring together whichever features have been enabled for this build and ensure their IBuildFeatures object
is called appropriately. To do this I came up with a cunning plan that relies on static initialisation in object files.

The feature object derived from IBuildFeature is declared in the form:

@code
class FeatureDpdApp : public virtual IBuildFeature {
public:
	FeatureDpdApp() ;
	virtual ~FeatureDpdApp() ;

	/**
	 * Singleton
	 */
	static std::shared_ptr<IBuildFeature> getInstance() ;

	/**
	 * Initialise the feature
	 * @return true if ok
	 */
	virtual bool init(IApplication* app) override ;

	/**
	 * Used to autoload class
	 */
	static int handle ;
} ;
@endcode

Notice that it's the 'handle' static data member which is used to automatically load this feature class into the application. In the
source for this class we set the value of the 'handle' to a value which returned from a call to a registration function.

The code for this part of the class is:

@code
int FeatureDpdApp::handle = BuildFeatureUtils<FeatureDpdApp>::registerBuildFeature() ;

std::shared_ptr<IBuildFeature> FeatureDpdApp::getInstance()
{
	return BuildFeatureUtils<FeatureDpdApp>::getInstance() ;
}
@endcode

So the handle value is set via a static member function. What this actually does is creates a lambda function for creating this class (using it's
shown singleton method) and stores this function into a list of features. The int value returned is actually the index into this list.

Note that the actual value of 'handle' doesn't really matter - it's never used! But simply the act of declaring it static and setting it
to a value forces the linker and the C++ runtime to link this code into the application and run it at start up.

What this means is that whichever application features (i.e. IBuildFeature classes) the build system decides to compile, these will be added
to the list of features.

When the application class is started it calls a method on this feature list which goes off and instantiates all the features (using the registered lambda)
and calls each feature object to initialise itself.


\subsection app_common_appframework_sec_3_1 Feature Hooks
<hr>

When the application starts up, it calls the hooks for any IBuildFeature objects.

The order of these hook calls and roughly what happens at each stage is shown in the table below:

Application  | IBuildFeature    | Comment
-----------  | -------------    | -------
-            | init             | Initialises the IBuildFeature objects. This is where they can instantiate any IAppPlugin objects for the feature
-            | appStart         | -
appStart     | -                | Show start up banner
-            | appPreOptions    | Allows features to add command line options
appOptions   | -                | Application processes all command line options
-            | appPreWait       | -
appWait      | -                | Application waits a short time for the initialisation to complete
-            | appPreInit       |
appInit      | -                | Radio init, services started
-            | appPostInit      | Start any additional objects (e.g. DPD) now that radio is initialised
appPostInit  | -                | Start TIF servers
-            | appPreRun        | Inject TIF for features
appRun       | -                | Run the application
-            | appEnd           | End of application


\subsection app_common_appframework_sec_3_2 Feature-based Services
<hr>

Features that require additional services be added to the application can use the IServicesCtl interface to add new services to the list. Supported service types
are Service, Task-based.

Service or Task injection is by simply calling the IServicesCtl::registerService() or IServicesCtl::registerTaskService() methods
with the appropriate object (a shared pointer to an object of the correct type).

Service cannot be added until after appInit has run. This ensures that the radio initialisation has been started, and the services can then be safely
started with any hardware features they require available.

@code
bool FeatureDiscoveryEnable::appPostInit()
{
	std::shared_ptr<IServicesCtl> servicesCtl(IServicesFactory::create()) ;
	servicesCtl->registerMiscService([]()->std::shared_ptr<IServiceMisc> {
		return IDiscovery::getInstance() ;
	}) ;

    return true ;
}
@endcode

The above example shows the discovery feature registering the miscellaneous service creation function as a lambda.

\note the example shows the feature method appPostInit() being used as the correct place to register any services


\subsection app_common_appframework_sec_3_3 Feature-based TIF
<hr>

Feature-based TIF injection is provided through the ITifControl virtual interface. Using this interface, a new TIF EntryFunc class
can be added to the existing TIF tree. This object can add one or more TIF directory structures.

The convention for feature-based tif is to create the XML in tif/common.features under a feature/value directory. The tif definition itself is expected to define
commands stored under the TIF "directory" /<feature> i.e. the lowercase version of the feature name.

For example, the DISCOVERY feature with value ENABLE stores the xml under: tif/common.features/DISCOVERY@ENABLE/Model/xml/DISCOVERY-ENABLE-Discovery.xml

And the xml contains:

@code
<?xml version="1.0"?>
<!DOCTYPE TestInterface SYSTEM "../../../../shared/dtd/Tif.dtd">
<TestInterface version="1.0">
 	<Board name="DISCOVERY@ENABLE">
		<Device name="Discovery" path="/discovery" comment="Network discovery statistics">
		<xinclude:include href="../../../../helper/common/xml/Discovery.xml#Discovery"/>
		</Device>
	</Board>
</TestInterface>
@endcode

The 'test-interface' make target will build this into source files containg a new EntryFunc. The application feature can then load this new
EntryFunc object into the base tif using the ITifControl::inject() method:

@code
bool FeatureDiscoveryEnable::appPreRun()
{
	// Inject the DISCOVERY tif
	std::shared_ptr<ITifEntry> newTif(std::make_shared<DiscoveryEnableDiscoveryTestHandler>()) ;
	if (!ITifControl::inject(newTif))
		return false ;

....

	return true ;
}
@endcode

As was mentioned earlier, the convention is to store the new command under /<feature>. The convention is also to define this directory as
visible. In many cases you'll want to either hide the directory and/or rename it. For that reason I've added (yet another) definition value
for the build config. It takes the form:

@code
TIF-FEAT-<FEATURE>:=HIDE:[TRUE|FALSE],NAME:<name>
@endcode

Either 'HIDE' or 'NAME' can be ommitted. Some examples:

@code
TIF-FEAT-DPD:=HIDE:TRUE
TIF-FEAT-DISCOVERY:=HIDE:TRUE
TIF-FEAT-PIM:=NAME:digpim
@endcode

The machanics of getting these settings into the code are wrapped up in a macro 'TIF_BUILD_SETTINGS'. You give it the feature name and the expected tif directory path
and the macro will access the build config values. Note that the default name is the empty string - passing an empty string to ITifControl means it will skip
the rename.

Combining this with the previous example gives the full feature appPreRun method as:

@code
bool FeatureDiscoveryEnable::appPreRun()
{
	// Inject the DISCOVERY tif
	std::shared_ptr<ITifEntry> newTif(std::make_shared<DiscoveryEnableDiscoveryTestHandler>()) ;
	if (!ITifControl::inject(newTif))
		return false ;

	// Use macro to pass the tif settings from build config
	TIF_BUILD_SETTINGS(DISCOVERY, "/discovery") ;

	return true ;
}
@endcode


\subsection app_common_appframework_sec_3_4 Feature Worked Example: DPD=APP
<hr>

This example shows how to set up the feature DPD when it's value is APP (i.e. the DPD runs on the PPC). It covers the application
feature, the build config, tif creation, and tif injection.

The example sets E6G-AXIS-D1T project to use this new feature.

The following directories/files are created/modified in the worked example (marked with a *):

@code
applications/
	common.features/
		DPD@APP/							*
			CMakeLists.txt					*
			BuildFeature/					*
				inc/						*
					FeatureDpdApp.h			*
				src/						*
					FeatureDpdApp.cpp		*


buildTools/
	cmake/
		make/
			builds/
				E6G-AXIS-D1T.cfg			*
			features/
				DPD.cfg						*

tif/
	common.features/
		DPD@APP/							*
			CMakeLists.txt					*
				Model/						*
					CMakeLists.txt			*
					xml/					*
						DPD-APP-Dpd.xml		*

fpga/
	E6G-AXIS-D1T/
		xc7k160t-ffg676-2/
			DPD@APP/						*
				CDRSC2G6_Top-CPRI.tgz		*
				CDRSC2G6_Top-CPRI.tgz.md5	*
			DPD@XILINX/						*


@endcode


-----------
### TIF ###

Starting in the tif directory, we need to make the DPD tif available for the new feature. As usual we already have the Dpd.xml
in the tif helper directory, soo it's simply a matter of creating the correct directory structure in tif/common.features (as shown above)
and creating the feature-specific xml file 'DPD-APP-Dpd.xml' with contents:

@code
<?xml version="1.0"?>
<!DOCTYPE TestInterface SYSTEM "../../../../shared/dtd/Tif.dtd">
<TestInterface version="1.0">
 	<Board name="DPD@APP">
		<Device name="Dpd" path="/dpd" comment="DPD functions">
		<xinclude:include href="../../../../helper/common/xml/Dpd.xml#Dpd" />
		</Device>
	</Board>
</TestInterface>
@endcode

\note The xml naming convention for features is: <FEATURE>-<Value>-<Tif directory>.xml

Notice that the relative paths are one level deeper than the normal case (i.e. there's an extra '../'). Also notice that the convention
is to locate the commands under the directory named after the feature name, all in lower case. This ensures that the framework can locate
the new tif for renaming or hiding.

Once we have the xml in place, we can run 'make test-interface' to create the source files. We then create a CmakeLists.txt for the
DPD@APP directory:

@code
cmake_minimum_required (VERSION 3.0.1 FATAL_ERROR)
project (tifCommon.featuresDPD_APP CXX)
set (version "0.1")
include(rse)
addIncludes ()

addInterfaceIncludes(hardware)
addInterfaceIncludes(services)

useRepoLib (common)
useRepoLib (tif common)

add_subdirectory (Model)

include(libraryCommonTasks)
@endcode

\note In these examples I've stripped out all comments from the source files to reduce the clutter. For the full details see the actual files

The most important part of this file (and one that's very easy to get wrong causing no end of grief!) is to set the correct project
name. This is the name used for the library that's created in this directory containing the tif. You then refer to this library in
the application CMakeLists.txt (more of which later).

In fact you can use any name as long as they match up, but the tools assume a certain naming scheme for the application libraries
(which automatically get loaded in) so it's best to stick to the same scheme for all libs (and the tif libs may be automatically added
in some future changes of the build system)

Following this, we add a CMakeLists.txt file for the Model directory:

@code
add_sources (SOURCES
    src/DpdAppDpdTestHandler.cpp
)

include (cppcheck)
addCppcheck(Model)
@endcode

You'll notice that we totally ignore the TestInterface derived file DpdAppTestInterface.cpp. That's because this file isn't used at all - rather
than compile in this new tif hierarchy, we inject it in later.

\note In hindsight tif injection is a miles better mechanism than the approach we currently have - that of creating a class hierarchy
based on the name of the directories. Possibly in future we'll migrate the code over

And that's all that's needed for the TIF! The build system will automatically spot this new feature directory and build the library as needed
based on the current build config (more of which later).

--------------------
### FPGA ###

In this particular instance, the DPD=APP feature needs a new fpga (whch removes the old microblaze and replaces it with a PPC interface
to the microblaze registers). To support this, the build system now searches inside any feature/value pair directories as set by the
build config. The feature/value directory namaing scheme of <FEATURE>@<VALUE> is repeated here.

So in this case we need to create a new subdirectory DPD@APP under the xc7k directory, and that's where the new fpga files go. Note that
we also need to create a new directory DPD@XILINX and move the existing fpga files into that so that when the DPD feature value
is set back to the previous setting of XILINX to build the microblaze version, it then picks up the old fpga files.


--------------------
### Application ###

The application area is where the actual feature code lives. There is some boilerplate used to register and initialise the feature,
then the feature defines which of the application hook methods it needs to implement in order to set up the feature.

The header file applications/common.features/DPD@APP/BuildFeature/inc/FeatureDpdApp.h contains:

@code
#include "BuildFeature.h"

namespace Mplane {

class FeatureDpdApp : public BuildFeature {
public:
	FeatureDpdApp() ;
	virtual ~FeatureDpdApp() ;

	 // Singleton
	static std::shared_ptr<IBuildFeature> getInstance() ;

	// Initialise the feature
	virtual bool init(IApplication* app) override ;

	// Hooks
	virtual bool appPreInit() override ;
	virtual bool appPostInit() override ;
	virtual bool appPreRun() override ;

	// auto loads class
	static int handle ;
} ;

}
@endcode

Notice here that we override appPreInit(), appPostInit(), and appPreRun().

The code for this class is in applications/common.features/DPD@APP/BuildFeature/src/FeatureDpdApp.cpp:

@code
#include <iostream>

#include "config.h"
#include "ITif.h"
#include "BuildFeatureUtils.hpp"
#include "BuildFeatureList.h"

#include "Task.h"
#include "ILoggable.h"
#include "IDpdApp.h"

// Load in the test interface for DPD from the feature area
#include "DpdAppDpdTestHandler.h"

#include "FeatureDpdApp.h"

using namespace Mplane;

int FeatureDpdApp::handle = BuildFeatureUtils<FeatureDpdApp>::registerBuildFeature() ;
std::shared_ptr<IBuildFeature> FeatureDpdApp::getInstance()
{
	return BuildFeatureUtils<FeatureDpdApp>::getInstance() ;
}

FeatureDpdApp::FeatureDpdApp() :
	BuildFeature()
{
}

FeatureDpdApp::~FeatureDpdApp()
{
}

bool FeatureDpdApp::init(IApplication* app)
{
	return true ;
}

bool FeatureDpdApp::appPreInit()
{
    // Ensure DPD application is up
    std::shared_ptr<IDpdApp> dpdApp(IDpdApp::getInstance()) ;
    return dpdApp.get() != nullptr ;
}

bool FeatureDpdApp::appPostInit()
{
	// Now that all the hardware and fpga initialisation is complete, should be ok to start DPD
    std::shared_ptr<IDpdApp> dpdApp(IDpdApp::getInstance()) ;
    dpdApp->start() ;
    Task::msSleep(5) ; // wait for task to start
    if (!dpdApp->isDpdRunning())
    {
        ILoggable::logEventError("DPD application not running");
        return false ;
    }
    return true ;
}

bool FeatureDpdApp::appPreRun()
{
	// Inject the DPD tif
	std::shared_ptr<ITifEntry> newTif(std::make_shared<DpdAppDpdTestHandler>()) ;
	if (!ITifControl::inject(newTif))
		return false ;

	// Use macro to pass the tif settings from build config
	TIF_BUILD_SETTINGS(DPD, "/dpd") ;

	return true ;
}
@endcode

The start of the feature is the boiler plate registeration. The static variable is assigned (using the BuildFeatureUtils utility template)
and the singleton defined.

In this feature, the init() method doesn't need to do anything. We use the appPreInit() method to ensure the dpd application is created before the radio
initialisation. We then use appPostInit() to actually start the DPD application thread after the radio initialisation.

The final part is to create and inject the DPD tif into the application. This is done in appPreRun() which is called after the main TIF handling has
been created and started. Notice the use of the macro TIF_BUILD_SETTINGS(). This sorts out applying any tif configuration changes (hiding, renaming etc)
based on the tif being located in tif directory "/dpd" (see xml above).

\note There is nothing you need to add to the application CMakeList.txt file to pull any feature in. In fact it's a mistake if you
do specify any feature! The cmake macros appStart() and appEnd() do everything behind the scenes for you.


--------------------
### Build Config ###

Finally, we pull it all together by setting the DPD feature and also the TIF-DPD setting in the build config E6G-AXIS-D1T.cfg:
@code
BOARD:=E6G
CUSTOMER:=AXIS
APPLICATION:=D1T
FPGA:=xc7k160
FEAT-DPD:=APP
TIF-FEAT-DPD:=HIDE:TRUE
@endcode


<hr>
\section app_common_appframework_sec_5 Application Install Files
<hr>

When the application is built and packaged, obviously the application's executables are collected into the package file automatically.
However, to start the application on board boot you must also supply some init scripts which will be installed on the board in
/etc/init.d. In order to do this you need to define which additional files you want to include in the package and where they should
be installed on the board. This is controlled through "file lists" text file (or files).

There are actually two directories used to contain this additional file information:

\li rootfs - Defines files/directories that will be added to the <b>application</b> tar file
\li lib-rootfs - Defines files/directories that will be added to the <b>library</b> tar file (i.e. for those files which don't change very often.

For both types, the build system looks for the single file "filelist.txt" and reads in it's contents. Note that this file can then include
other files and chain them up. For each file read, all source files specified in that file are treated as relative to the directory in which
the current filelists.txt file was found.

\subsection app_common_appframework_sec_5_1 filelists.txt format
<hr>

The filelists.txt text file supports the following:

\li # - Lines beginning with # are treated as comments
\li DIR - Create a directory on the board
\li FILE - Create a file on the board copying the file from the given source path
\li INCLUDE - Read in another filelists.txt file

The FILE and DIR entries must specify the board destination path, the owner/group properties, and the file permissions. Additionally
the FILE entry has to specify the path to the source file which will be copied into the package.

Example list files are shown below:

Application rootfs/fileslists.txt file:
@code
# Include the ART init files only
INCLUDE ../../common/rootfs/ART/init-filelist.txt

# Create a playback dir only accessible to root
DIR /nandflash/tif/playback 0:0 0750

@endcode

common/rootfs/ART/init-filelist.txt:
@code
FILE /etc/init.d/01_syslog.sh 0:0 0755 ../common/etc/init.d/01_syslog.sh
FILE /etc/init.d/10_httpd.sh 0:0 0755 ../common/etc/init.d/10_httpd.sh
FILE /etc/init.d/28_fpga-eth-art.sh 0:0 0755 ../common/etc/init.d/28_fpga-eth-art.sh
FILE /etc/init.d/30_app-art.sh.in 0:0 0755 ../common/etc/init.d/30_app-art.sh.in

FILE /usr/local/bin/tailf 0:0 0755 ../common/usr/local/bin/tailf
FILE /usr/local/bin/tif 0:0 0755 ../common/usr/local/bin/tif
@endcode

\subsection app_common_appframework_sec_5_2 File Translation
<hr>

If a FILE entry specifies a source file which ends with ".in" then that file is treated as a translation template. What this means is that
the file is expected to contain CMAKE variables of the form "@START_APP@". The build system will perform a translation of all these variables
into a temporary file before copying that file into the package.

\subsection app_common_appframework_sec_5_3 Common Files
<hr>

Rather than have each application keep it's own copy of all of the common start up scripts, configs etc. I've moved all the files
into a common area under applications/common/rootfs and applications/common/lib-rootfs.

Under these directories are feature based areas (or common for commonly shared files). For example, any ART-like application can
pull in just the initialisation files by including the common/rootfs/ART/init-filelist.txt.

Within the common area, the init scripts may have application-specific start scripts. I decided to pull together all the init scripts and
configurations under common (even if they have an application-specific variant) so that any application can pick and choose the files it wants.
At some point I'd like to refactor the scripts so that all the common code is pulled out into some "helper" scripts that the specific scripts
can include and tweak the behaviour of.

I decided the feature directory would contain just the files specific to that feature, along with a convenience file list (or lists) so that
any similar application can pull in all (or most) of the files it needs just by including that file list.

*/
