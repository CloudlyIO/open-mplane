#!/bin/sh
# Startup RSE application

# load config
. /etc/setup.env
. /etc/image-mgr.sh

APP=@STARTUP_APP@

##----------------------------------------------------------------------------------------------------------------------
# checkApp()
# Check that the application reaches the stable state
##----------------------------------------------------------------------------------------------------------------------
checkApp()
{
	# Run check to ensure app has started properly - causes reboot and retries if not
	# Specify the timeout time in seconds
	state=$(stableOrReboot 120)

	if [ "$state" == "STABLE" ]
	then
		logMsg Application has reached stable state
	else
		if [ "$state" == "REBOOT" ]
		then
			logMsg Rebooting...

			# run reboot
			reboot
			exit 0

		else
			logMsg Application has failed to reach stable state, board start failed
			#sysled red
		fi
	fi
}

##----------------------------------------------------------------------------------------------------------------------
# check_checkApp()
# Run checkApp if no variable set
##----------------------------------------------------------------------------------------------------------------------
check_checkApp()
{
    noAppCheck=$(i2cenv noAppCheck)
    noAppCheck=${noAppCheck#*=}
    if [ -n "$noAppCheck" ]; then
    	logMsg "noAppCheck variable set - skipping application check"
    else
    	# Run the application check in the background so that init can exit as soon as possible
    	# This then means that we can immediately reboot and the serial console is available much sooner
		checkApp &
	fi
}

##----------------------------------------------------------------------------------------------------------------------
# start()
##----------------------------------------------------------------------------------------------------------------------
start()
{
	# run the app
    $APP -ethbb $eth_bb -ethcdi $eth_cdi  &

	# now check app has started
	check_checkApp

# ifconfig eth0 up
# udhcpc -i eth0
# /nandflash/scratch/gdbserver 10.0.1.115:1535 /bin/Zcu111FbcOranrrhProcess 

# valgrind /bin/Zcu111FbcOranrrhProcess -ethbb $eth_bb -ethcdi $eth_cdi >/var/log/valgrind.log 2>&1 &

}

##----------------------------------------------------------------------------------------------------------------------
# stop()
##----------------------------------------------------------------------------------------------------------------------
stop()
{
    killall $APP
    
    # Must also ensure udhcpc is also killed. It's managed by the app, but is otherwise left running
    # and it listens on port 49500 (for some reason) meaning that port 49500 is kept open and you can't then
    # restart the application (it aborts with a socket exception)!
    #
    killall udhcpc
}


##=== MAIN =============================================================================================================
case $1 in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart)
        stop
        start
    ;;
    *)
        echo >&2 "$0 - '$1' invalid action"
        exit 2
    ;;
esac

