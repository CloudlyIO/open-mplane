/**
\page YANG Manager Server
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section yangmgr_scope Scope
<hr>

This document is intended to provide details of the YANG Manager Server.

<hr>
\section yangmgr_ro_usage	Providing the sysrepo non-config (status or read-only) data
<hr>

The non-config (read-only) values can be read from the "operational" data store.

sysrepo provides the non-config values by means of registered callbacks. The application must register a callback
on each of the xpaths that contain config=false data and it is these callbacks that must return the data values.

An example of this is in yang-ZCU111-FBC-ORANRRH/src/Zcu111FbcOranrrhHandlerORanUplaneConf.cpp where a callback object is created
and registered with sysrepo:

@code
class Zcu111FbcOranrrhHandlerORanUplaneConf : public YangHandler {
public:

...

private:
	// The callback object to register with sysrepo
	std::shared_ptr<CallbackORanUplaneConf> mCallback ;
} ;
@endcode

The callback object is registered to sysrepo via the RadioDatastore object:
@code
bool Zcu111FbcOranrrhHandlerORanUplaneConf::initialise()
{
	// Register with yang model
	std::shared_ptr<YangMgrServer> mgr(std::dynamic_pointer_cast<YangMgrServer>(moduleMgr())) ;
	std::shared_ptr<RadioDatastoreSysrepo> ds(std::dynamic_pointer_cast<RadioDatastoreSysrepo>(mgr->dataStore())) ;

	ds->getItemsSubscribe("o-ran-uplane-conf", "/o-ran-uplane-conf:user-plane-configuration", mCallback, this) ;

...

}
@endcode

The callback class must be derived from sysrepo::Callback. The base callback class used is SysrepoGetitemsCallback which is derived from
sysrepo::Callback and also LeafContainer. This means that the callback method oper_get_items() will be called by sysrepo when necessary, but
also that the class can contain the data values and automatically generate the YANG tree for sysrepo based on those values.

The LeafContainer class is derived from ILeafContainer which is a class that can hold either a leaf value or a container of leaf values. The
interface to this class is:

@code
class ILeafContainer {
public:
	...

	/**
	 * Add a container element to this container's contents
	 */
	virtual ILeafContainer* addContainer(const std::string& name) =0 ;

	/**
	 * Add a leaf value to this container's contents
	 */
	virtual void addLeaf(const std::string& leafName, const std::string& leafValue) =0 ;

	/**
	 * Add a leaf unsigned value as hex to this container's contents
	 */
	virtual void addLeafHex(const std::string& leafName, unsigned leafValue) =0 ;

	/**
	 * Add a leaf int value to this container's contents
	 */
	virtual void addLeafInt(const std::string& leafName, int leafValue) =0 ;

	/**
	 * Add a leaf int value to this container's contents
	 */
	virtual void addLeafBool(const std::string& leafName, bool leafValue) =0 ;

} ;

@endcode

Using the above methods, a class can create the config=false data value tree.

In the user-plane-conf handler example, these values are actually created in yang-ZCU111-FBC-ORANRRH/src/Zcu111FbcOranrrhYangCarrierMgr.cpp.
This class is an instance of the IYangCarrier singleton and the YANG handler contrives to pass the ILeafContainer pointer to the IYangCarrier
in the YANG handler initialisation routine:

@code
bool Zcu111FbcOranrrhHandlerORanUplaneConf::initialise()
{
	// Set up carrier manager
	auto carrierMgr( IYangCarrierMgr::singleton() ) ;
	carrierMgr->setLeafContainer( std::dynamic_pointer_cast<ILeafContainer>(mCallback) ) ;

...
}
@endcode

Remember that the callback class is also an instance of ILeafContainer so we can pass the pointer to the carrier manager which will use it
to create the data.

An example of using the ILeafContainer pointer is in the carrier manager:

@code

bool Zcu111FbcOranrrhYangCarrierMgr::createEndpointCapacitySharingGroups()
{
	std::shared_ptr<ILeafContainer> parent(leafContainer()) ;

	...

				createEndpointCapacitySharingGroup(parent, chainIq, maxPrb) ;

	...
}

bool Zcu111FbcOranrrhYangCarrierMgr::createEndpointCapacitySharingGroup(std::shared_ptr<ILeafContainer> parent,
		unsigned id, unsigned maxPrb)
{
//    |  +--ro id                                       uint16
//    |  +--ro max-control-sections-per-data-section?   uint8
//    |  +--ro max-sections-per-symbol?                 uint16
//    |  +--ro max-sections-per-slot?                   uint16
//    |  +--ro max-beams-per-symbol?                    uint16
//    |  +--ro max-beams-per-slot?                      uint16
//    |  +--ro max-prb-per-symbol?                      uint16
//    |  +--ro max-numerologies-per-symbol?             uint16
//    |  +--ro max-endpoints?                           uint16
//    |  +--ro max-managed-delay-endpoints?             uint16
//    |  +--ro max-non-managed-delay-endpoints?         uint16

	auto endpointCap = parent->addContainer("endpoint-capacity-sharing-groups") ;
	endpointCap->addLeafInt("id", id) ;
	endpointCap->addLeaf("max-control-sections-per-data-section", "1") ;
	endpointCap->addLeaf("max-sections-per-symbol", "0") ;
	endpointCap->addLeaf("max-sections-per-slot", "0") ;
	endpointCap->addLeaf("max-beams-per-symbol", "0") ;
	endpointCap->addLeaf("max-beams-per-slot", "0") ;
	endpointCap->addLeafInt("max-prb-per-symbol", maxPrb) ;
	endpointCap->addLeaf("max-numerologies-per-symbol", "0") ;
	endpointCap->addLeaf("max-endpoints", "0") ;
	endpointCap->addLeaf("max-managed-delay-endpoints", "0") ;
	endpointCap->addLeaf("max-non-managed-delay-endpoints", "0") ;

	return true ;
}

@endcode

Here we first of all get the pointer to the ILeafContainer (which is actually the pointer to the callback class remember). This is then used
as the parent container for all the leaf values. The example shows creating one of many insances of "endpoint-capacity-sharing-groups" (which
is a YANG list).


<hr>
\section yangmgr_rw_usage	Providing the sysrepo config (read-write) data
<hr>

sysrepo manages the storage of all the read-write values. These are presented in the "running" data store.

In order for the application to see changes to any of these values we need to register a callback with sysrepo. The YANG handler class
provides a method changeSubscribe(const std::string &xpath) which allows a handler to register itself such that it receives
change notifications. The class handles these changes in a valueChange() method.

\note The xpath in the changeSubscribe() method is optional and usually not used. It can be provided to narrow down the scope of the change
notifications, but note that we have provision for only one callback.

As an example:

@code
bool Zcu111FbcOranrrhHandlerORanUplaneConf::initialise()
{
	changeSubscribe() ;

	...
}
@endcode

The change callback is registered in the handler's initialise method. When a value (or values) changes then the valueChange() method is called:

@code
void Zcu111FbcOranrrhHandlerORanUplaneConf::valueChange(
		const std::string &xpath, std::shared_ptr<YangParam> oldValue,
		std::shared_ptr<YangParam> newValue)
{
	std::string error ;

	std::string listName ;
	std::string key ;
	std::string index ;
	std::string value ;
	std::string leaf ;

	if (oldValue)
	{
		value = YangParamUtils::toString(oldValue, error) ;
		listIndex(oldValue->name(), listName, key, index) ;
		leaf = leafName(oldValue->name()) ;
	}
	if (newValue)
	{
		value = YangParamUtils::toString(newValue, error) ;
		listIndex(newValue->name(), listName, key, index) ;
		leaf = leafName(newValue->name()) ;
	}

	if (listName == "low-level-rx-links")
	{
		std::string endpoint ;
		std::string carrierName ;

		if (leaf == "low-level-rx-endpoint")
		{
			endpoint = value ;
		}
		if (leaf == "rx-array-carrier")
		{
			carrierName = value ;
		}

		if (endpoint.empty() && carrierName.empty())
			return ;

		auto carrierMgr( IYangCarrierMgr::singleton() ) ;
		carrierMgr->updateRxLink( index, endpoint, carrierName ) ;

		return ;
	}


	.....

}
@endcode

The above example usues utility methdos to get the name of the list being accessed (if one is) along with the list's
key name, key value, the name of the leaf node being changed, and the new value of that leaf.

The code usues this information to determine if it needs to act on the change or not. In this case we are only interested
in key node changes, reading all the other values when that node has changed.

<hr>
\section yangmgr_pseudo_ro_usage	Providing the sysrepo config "pseudo read-only" data
<hr>

Some of the trees in the YANG model are marked as read-write even though most of their contents are read-only and it doesn't
make sense for the O-DU to be able to make changes to these read-write values. In these cases we have added a facility to make
the nodes "pseudo read-only". The values will still be accessible through the "running" data store, but we will lock the values
so that external entities cannot make changes to them.

\note Once locked, we can make any changes via the application either.

Use the yang handler method "makeReadOnly()" either with a single string or a set of strings to make those specified paths
"locked". For example:

@code
	makereadOnly("/o-ran-uplane-conf:user-plane-configuration/rx-array-carriers") ;
@endcode

The way that this works is that the value change callback is called and checks each of the values xpath against any "read-only"
paths created via the makereadOnly() method. If any value path starts with one of these "read-only" paths, then the whole change
transaction is invalidated.

\note the path check is a simple string compare so wildcards are NOT allowed


<hr>
\section yangmgr_persist_usage	Making read-write values persistent
<hr>

The spec requires that some of the YANG model values be persistent across reboots. To make a tree persistent use the
makePersistent() method in the YANG handler.

The following example makes all values under "/o-ran-mplane-int:mplane-info/searchable-mplane-access-vlans-info" persistent

@code
bool Zcu111FbcOranrrhHandlerORanMplaneInt::initialise()
{
	if (!this->YangHandlerSysrepo::initialise())
		return false ;

	// add persistent paths
	makePersistent("/o-ran-mplane-int:mplane-info/searchable-mplane-access-vlans-info") ;

	// Register callbacks
	changeSubscribe() ;

	return true;
}

@endcode

\note You MUST register read-write callbacks using changeSubscribe() for the persistent checking to work

On the board, all persistent values are saved to a module-specific save file under /nandflash/yang-persist. The above
example would save all values in a file o-ran-mplane-int.save

\note When running on the host PC as a simulation, all save files are stored in /tmp/yang-persist


<hr>
\section yangmgr_notification_usage	Sending notifications
<hr>

The YangHandlerSysrepo class has a sendNotification() method with the API:

@code

	/**
	 * Send out a notification with it's parameters
	 */
	virtual YangResult_E sendNotification(const std::string & xpath, std::shared_ptr<YangParams> params) ;

@endcode

The path is the path of the notification, and the params are the list of parameter values. Each parameter value must have a valid xpath
under the notification.

As an example we'll use the uplane conf:

@code
module: o-ran-uplane-conf

  notifications:
    +---n tx-array-carriers-state-change
    |  +--ro tx-array-carriers* [name]
    |     +--ro name     -> /user-plane-configuration/tx-array-carriers/name
    |     +--ro state?   -> /user-plane-configuration/tx-array-carriers/state
    +---n rx-array-carriers-state-change
       +--ro rx-array-carriers* [name]
          +--ro name     -> /user-plane-configuration/rx-array-carriers/name
          +--ro state?   -> /user-plane-configuration/rx-array-carriers/state

@endcode

To send a notification for the tx-array-carriers-state-change notif we would use code something like:

@code

	std::string carrierName("cc0tx") ;

	std::string notifPath( path("tx-array-carriers-state-change") ) ;
	std::string carrierPath( notifPath + "/tx-array-carriers[name='" + carrierName + "']" ) ;

	std::shared_ptr<YangParams> params(std::make_shared<YangParams>()) ;
	params->addParam(carrierName, carrierPath + "/name") ;
	params->addParam("READY", carrierPath + "/state") ;

	sendNotification(notifPath, params) ;

@endcode

We create the notification path as a string because we need it both for sending the notification and also for making each of the parameter names.
@note The YangParams addParam() method takes the xpath (or name) as an optional second parameter. This means that, unlike other methods, we put the xpath second
rather than first. The first argument here is the value of the parameter.



<hr>
\section yangmgr_rpc_usage	Handling RPC commands
<hr>

The YangHandlerSysrepo class supports registering functions to implement RPC calls.

You register a callback with a particular rpc in the appropriate yang handler using the method:

@code
	/*
	 * Register a callback for an RPC command in this module
	 */
	virtual void registerRpc(const std::string& path, RpcCallback::RpcFunc func) ;

@endcode

Where the callback method has the signature:

@code
	/**
	 * RPC callback
	 *
	 * rpcXpath	- Full xpath to rpc
	 * callList - list of input parameters
	 * retList - List of output parameters
	 *
	 * returns TRUE if rpc call was successful
	 */
	using RpcFunc = std::function<bool(const std::string& rpcXpath,
			std::shared_ptr<YangParams> callList,
			std::shared_ptr<YangParams> retList)> ;

@endcode

You can use any functor (e.g. lambdas, class method pointer etc) as the callback. As a convenience, I've created a macro that simplifies
the code if you want to register a method of your handler class as the callback. The macro REGISTER_RPC() is used as shown in the example below.

As an example, I'll show the code to implement the o-ran-file-management rpc 'retrieve-file-list'. This is created in the yang handler for o-ran-file-management:

@code
bool Zcu111FbcOranrrhHandlerORanFileManagement::initialise()
{
	// daisychain the initialisations
	if (!this->YangHandlerSysrepo::initialise())
		return false ;

	// register RPC callbacks
	REGISTER_RPC("retrieve-file-list", Zcu111FbcOranrrhHandlerORanFileManagement::rpcFileList) ;
	...

	return true ;
}
@endcode

This registers the method 'rpcFileList' as the callback function for the rpc /o-ran-file-management:retrieve-file-list.

RPC callback functions are called with the full path to the rpc command, a YangParams containing the list of input arguments used to call the command,
and a YangParams to contain the list of output values returned from the command. You can make life a bit easier by converting the input YangParams into
a std::map with the key being the argument leaf name using SysrepoUtils::paramsToMap().

You create output values by adding them to the retList YanParams value. You need to set the name of each parameter to the full path of the rpc
return value.

As an example, the o-ran-file-management retrieve-file-list will be shown. The model looks like:

@code
module: o-ran-file-management

  rpcs:
    +---x retrieve-file-list
    |  +---- input
    |  |  +---w logical-path        string
    |  |  +---w file-name-filter?   string
    |  +---- output
    |     +--ro status?          enumeration
    |     +--ro reject-reason?   string
    |     +--ro file-list*       string
	...
@endcode


The method code looks like the following:

@code
bool Zcu111FbcOranrrhHandlerORanFileManagement::rpcFileList(const std::string &rpcXpath,
		std::shared_ptr<YangParams> callList,
		std::shared_ptr<YangParams> retList)
{
	const std::string rpc("retrieve-file-list") ;
	std::map<std::string, std::shared_ptr<YangParam> > args(SysrepoUtils::paramsToMap(callList)) ;

	std::string error ;
	std::string logicalPath(YangParamUtils::toString(args["logical-path"], error)) ;
	std::string filter ;
	if (args.find("file-name-filter") != args.end())
	{
		filter = YangParamUtils::toString(args["file-name-filter"], error) ;
	}

	// check path, ensure directory exists
	if ( !startsWith(logicalPath, "/O-RAN") )
	{
		statusFail(rpc, retList, "Can only access /O-RAN directory and sub-directories") ;
		return true ;
	}

	// We only accept wildcard '*' in the filename part
	std::string dir(Path::dir(logicalPath)) ;
	if (dir.find('*') != std::string::npos)
	{
		statusFail(rpc, retList, "Wildcards not accepted in directory name") ;
		return true ;
	}

	dir = DIR_PREFIX + dir ;
	if (!Path::exists(dir))
	{
		statusFail(rpc, retList, "Invalid directory") ;
		return true ;
	}

	// If a filename is given then it's used as a file filter (in addition to any actual filter provided)
	std::string filespec(Path::basename(logicalPath)) ;
	std::vector<std::string> filters ;
	if (!filespec.empty())
		filters.push_back(filespec) ;
	if (!filter.empty())
		filters.push_back(filter) ;

	// Get the directory contents
	std::vector<std::string> contents(Path::dirContents(dir)) ;

	// contents will contain full path. Strip out directories first
	std::vector<std::string> filtered ;
	for (auto f : contents)
	{
		if (Path::isDir(f))
			continue ;

		// strip off directory
		filtered.push_back(f.substr(dir.size())) ;
	}

	// now run the filter
	for (auto filter : filters)
	{
		contents = filtered ;
		filtered.clear() ;

		filter = replaceStrs(filter, "*", ".*") ;
		std::regex regexp(filter) ;

		for (auto f : contents)
		{
			if (!std::regex_search(f, regexp))
				continue ;

			filtered.push_back(f) ;
		}
	}

	// return the filtered filenames
	std::string fileList(path(rpc + "/file-list")) ;
	for (auto f : filtered)
	{
		retList->addParam(f, fileList) ;
	}
	statusOk(rpc, retList) ;
	return true ;

@endcode


The method starts by converting the input args into a map and getting the 'logical-path' argument and the optional 'file-name-filter' argument.
After a few checks the directory contents are read. These contents are then filtered to remove directories and to reduce the filenames down to
just the names without the path.

Following this, filtering is applied based on both any path wildcard and any optional filter specification.

Finally the results are returned as part of the 'file-list' list.

\note Remember that the YangParams addParam() method works with the value of the param first followed by the optional param name (i.e. xpath). So it's
swapped compared to how you would normally expect to see the value (i.e. with xpath first then value)

The status return (and reject-reason) are added by convenience methods:

@code
void Zcu111FbcOranrrhHandlerORanFileManagement::statusOk(const std::string& rpc, std::shared_ptr<YangParams> retList)
{
	retList->addParam("SUCCESS", path(rpc + "/status")) ;
}

void Zcu111FbcOranrrhHandlerORanFileManagement::statusFail(const std::string& rpc, std::shared_ptr<YangParams> retList,
		const std::string &reason)
{
	retList->addParam("FAILURE", path(rpc + "/status")) ;
	retList->addParam(reason, path(rpc + "/reject-reason")) ;
}
@endcode

\note Remember that all returned values must have their name set to the full path inside the rpc tree. that's the reason for using path()
with the rpc command name and appending the leaf name.


<hr>
\section yangmgr_acm	NETCONF Access Control
<hr>

The mplane document section 3.4 talks about NETCONF access control describing the various defined groups and their permitted access
to the yang models. Each group obviously needs a corresponding user that can be used to connect to the NETCONF session. To make life easy
I've simply created these YANG users/groups as normal Linux users/groups (which then makes ssh conenction simple).

The list of created users, defined groups (as per the mplan doc), their home directory on our board, and a brief description of the
privileges is shown in the table below.

User     | Group    | Home           | Description
-------- | -------- | -------------- | ---------
oran     | sudo     | /O-RAN         | Yang admin. Has maximum read/write/execute privileges
nmsuser  | nms      | /home/nmsuser  | Network management. Almost has full privileges like sudo
fmpmuser | fm-pm    | /home/fmpmuser | Fault management / performance management. read only access to most areas apart from full access to performance management module
swmuser  | swm      | /home/swmuser  | Software management. No access apart from full privileges to software module

\note All of these users are standard Linux users and do <b>NOT</b> have any root privilege.

\subsection yangmgr_acm_users	User Creation

The OS will only create the *root* user and a default *axis* user. To create the additional users detailed above we need an addtional
mechanism. Not only do these users need to be created in Linux, but the same details must be used when setting up the YANG models.

To implement this I've created a simple text file that defines the users to be created, their group, home directory, and the user password.

\note The user password is used both at the Linux prompt to login as that user, but also in any NETCONF client wishing to connect as that user.

The text file *users* is defined in *yang-manager-server/cmake/rootfs/settings/users*

@code
# User creation file
#
# user:group:password:home
#
# NOTE: Currently password is NOT encrypted by: openssl passwd $password
# (but it should be!)
#
oran:sudo:XXXXX:/O-RAN
swmuser:swm:XXXXX:/home/swmuser
fmpmuser:fm-pm:XXXXX:/home/fmpmuser
nmsuser:nms:XXXXX:/home/nmsuser
@endcode

\note Refer to the actual file to see the current passwords used with these users

This file is installed onto the board at */nandflash/.settings/users* and is accessible only by the root user.

The startup script *10_create_users.sh* reads the file and creates the users/groups as required.



\subsection yangmgr_acm_usermgmt	O-Ran user management

The o-ran-usermgmt module needs at least one enabled user defined before it can be successfully installed. This needs to be done
*before* the application connects up to sysrepo. To provide this functionality, a new start up script *23_yang-user_config.sh* has been
created.

At start up, this script reads the *users* file (described above) and creates the config data to enable all of these users. This data is applied to
the module so that it can be installed. The start up script also has to update the ietf-netconf-acm with these groups/users.

\subsection yangmgr_acm_rules	ietf-netconf-acm rules

The mplane doc table 2 defines a list of access rules required to be implemented in ietf-netconf-acm. This could have been applied in the
*23_yang-user_config.sh* start up script, but that would make that script very large and unwieldly. What I've opted for is to implement the
rules in the Zcu111FbcOranrrhHandlerIetfNetconfAcm yang handler file.

In order to ensure the rules are properly implemented, I've copied the text from the pdf document into /yang-manager-server/yang-ZCU111-FBC-ORANRRH/tools/rules.txt
I've then created some Perl scripts: one to first check that the module names I added were correct; the second to generate C++ code to set the rules.

This generation tool was then used to create the methods in Zcu111FbcOranrrhHandlerIetfNetconfAcm that implement the rules (there is one method
per group).

*/
