#ifndef _VRH_IFPGAMGR_H_
#define _VRH_IFPGAMGR_H_

/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      IFpgaMgr.h
 * \brief     Virtual interface for managing fpga register regions
 *
 *
 * \details   Virtual interface for managing fpga register regions
 *
 * ** AUTO-GENERATED - DO NOT EDIT THIS FILE **
 *
 */

#include <memory>

#include "GlobalTypeDefs.h"
#include "IFpgaKernel.h"

#include "fpga/IFpgaAntennaRegs.h"
#include "fpga/IFpgaChainRegs.h"
#include "fpga/IFpgaCpri.h"
#include "fpga/IFpgaFibreRegs.h"
#include "fpga/IFpgaIqRegs.h"
#include "fpga/IFpgaOranRegs.h"
#include "fpga/IFpgaSystemRegs.h"
#include "fpga/IFpgaWaveformRegs.h"
#include "fpga/IFpgaWcdmaRegs.h"

namespace Mplane
{

/*! \brief  Generic FPGA Interface
 *
 *  A virtual interface base class defining a functional interface that must be
 *  adopted by any implementation of a generic FPGA interface.
 *
 *  This virtual interface allows an FPGA to expose its functionality, allowing
 *  developers to logically group the functionality of one or more FPGAs
 *  into an interface class.
 *
 */
class IFpgaMgr
{
public:
    virtual ~IFpgaMgr() { };


    /** \brief  Get the singleton instance
     *
     *  Used to get a reference to the single instance of the generic FPGA
     *  object. This must be implemented using the singleton pattern by the
     *  specific radio implementation.
     *
     *  Must be define in: hardware/<BOARD>/radio/src/<Board>Fpga.cpp
     *
     *  Test mock defined in: vrh/test/src/TestIFpga.cpp
     *
     *
     */
    static std::shared_ptr<IFpgaMgr> singleton(void);

    /*! \brief  Get fpga kernel
     *
     *  Get the fpga kernel driver
     *
     *  \return pointer to fpga kernel
     */
    static std::shared_ptr<IFpgaKernel> kernel() ;


    // Register access
    static std::shared_ptr<IFpgaAntennaRegs> getIFpgaAntennaRegs() ;
    static std::shared_ptr<IFpgaChainRegs> getIFpgaChainRegs() ;
    static std::shared_ptr<IFpgaCpri> getIFpgaCpri() ;
    static std::shared_ptr<IFpgaFibreRegs> getIFpgaFibreRegs() ;
    static std::shared_ptr<IFpgaIqRegs> getIFpgaIqRegs() ;
    static std::shared_ptr<IFpgaOranRegs> getIFpgaOranRegs() ;
    static std::shared_ptr<IFpgaSystemRegs> getIFpgaSystemRegs() ;
    static std::shared_ptr<IFpgaWaveformRegs> getIFpgaWaveformRegs() ;
    static std::shared_ptr<IFpgaWcdmaRegs> getIFpgaWcdmaRegs() ;

    /*! \brief  The initialise method
     *
     *  Method called during system startup, post FPGA image load, to fully
     *  initialise the device and to override any initial settings with
     *  board-specific ones.
     *
     *  \return state of RT_OK if successful, RT_other if not.
     */
    virtual ReturnType::State initialise(void) =0;

#if 0
    /*! \brief  Read an fpga 16-bit register
     *
     *  Method used to return the FPGA register value at the specified offset.
     *
     *  \return  FpgaVal FPGA register contents
     */
    virtual UINT16 readRegister(unsigned offset) =0;

    /*! \brief  Write an fpga 16-bit register
     *
     *  Method used to write an FPGA register value at the specified offset.
     *
     */
    virtual void writeRegister(unsigned offset, UINT16 value) =0;

    /*! \brief  Modify an fpga 16-bit register
     *
     *  Method used to write an FPGA register value at the specified offset.
     *
     */
    virtual void modifyRegister(unsigned offset, UINT16 value, UINT16 mask) =0;

    /*! \brief  Read an fpga 32-bit register
     *
     *  Method used to return the FPGA register value at the specified offset.
     *
     *  \return  FpgaVal FPGA register contents
     */
    virtual UINT32 readRegister32(unsigned offset) =0;

    /*! \brief  Write an fpga 32-bit register
     *
     *  Method used to write an FPGA register value at the specified offset.
     *
     */
    virtual void writeRegister32(unsigned offset, UINT32 value) =0;

    /*! \brief  Modify an fpga 32-bit register
     *
     *  Method used to write an FPGA register value at the specified offset.
     *
     */
    virtual void modifyRegister32(unsigned offset, UINT32 value, UINT32 mask) =0;
#endif

    // Register access
	virtual void setIFpgaAntennaRegs(std::shared_ptr<IFpgaAntennaRegs> regs) =0 ;
	virtual void setIFpgaChainRegs(std::shared_ptr<IFpgaChainRegs> regs) =0 ;
	virtual void setIFpgaCpri(std::shared_ptr<IFpgaCpri> regs) =0 ;
	virtual void setIFpgaFibreRegs(std::shared_ptr<IFpgaFibreRegs> regs) =0 ;
	virtual void setIFpgaIqRegs(std::shared_ptr<IFpgaIqRegs> regs) =0 ;
	virtual void setIFpgaOranRegs(std::shared_ptr<IFpgaOranRegs> regs) =0 ;
	virtual void setIFpgaSystemRegs(std::shared_ptr<IFpgaSystemRegs> regs) =0 ;
	virtual void setIFpgaWaveformRegs(std::shared_ptr<IFpgaWaveformRegs> regs) =0 ;
	virtual void setIFpgaWcdmaRegs(std::shared_ptr<IFpgaWcdmaRegs> regs) =0 ;

protected:
	virtual std::shared_ptr<IFpgaAntennaRegs> _getIFpgaAntennaRegs() =0 ;
	virtual std::shared_ptr<IFpgaChainRegs> _getIFpgaChainRegs() =0 ;
	virtual std::shared_ptr<IFpgaCpri> _getIFpgaCpri() =0 ;
	virtual std::shared_ptr<IFpgaFibreRegs> _getIFpgaFibreRegs() =0 ;
	virtual std::shared_ptr<IFpgaIqRegs> _getIFpgaIqRegs() =0 ;
	virtual std::shared_ptr<IFpgaOranRegs> _getIFpgaOranRegs() =0 ;
	virtual std::shared_ptr<IFpgaSystemRegs> _getIFpgaSystemRegs() =0 ;
	virtual std::shared_ptr<IFpgaWaveformRegs> _getIFpgaWaveformRegs() =0 ;
	virtual std::shared_ptr<IFpgaWcdmaRegs> _getIFpgaWcdmaRegs() =0 ;
    virtual std::shared_ptr<IFpgaKernel> _kernel() =0 ;


protected:
    /*! \brief  Default constructor
     *
     *  Ensure we can only be constructed via an implementing class.
     */
    IFpgaMgr() {};

};



} /* namespace Mplane */

#endif // _VRH_IFPGAMGR_H_
