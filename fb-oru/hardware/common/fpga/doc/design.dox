/*-?|fpga and peripheral bus|sprice|c0|?*//*-?|fpga and peripheral bus|gdurban|c2|?*/
/**
\mainpage Common Radio Hardware FPGA base Implementation
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_common_fpga_scope Scope
<hr>

This document describes the classes created to provide access to the fpga sub-systems

<hr>
\section hardware_common_fpga_overview	Overview
<hr>

The fpga architecture is split into blocks of related registers:

\li System
\li Fibre
\li Antenna
\li Carrier
\li Iq (fibre iq block)
\li Chain

Similarly, the fpga class has also been split into the same blocks. This means that future instances of the code can select which
register blocks are used (for example, a Broadcom DFE based board would not need the Chain block).

<hr>
\section hardware_common_fpga_sec_2 Details of Design
<hr>

@image html fpga.png

As mentioned earlier, the FPGA class has been split into blocks that correspond to the fpga register blocks.

The fpga manager is a container class that can contain pointers to any of the register sets. The actual contents are set per application, where
the application knows which registers a board/application will have implemented.

The fpga register blocks are contained in header files under inc/regs. These are auto-generated from XML files and are created per application
such that only those register sets that are used by the application are created. The addresses, numbers of instances etc of these register sets
are also application-specific.

As a further abstraction, the interface to the kernel device driver has also been moved into a separate object. In this case though, each
register class contains an instance of the kernel interface so that it can access the device driver (rather than inherit from it).

The register classes are created by running the make target 'fpga-regs', which runs the RegTool on various xml files to create the set of C++ classes.


<hr>
\subsection hardware_common_fpga_sec_3_1 FPGA XML definition files
<hr>

The register definitions are defined in sets of xml files stored in the <b>fpga</b> repo under: fpga/registers/xml

Whenever you change these files, to generate the C++ classes you need to manually run the 'fpga-regs' make target (in Eclipse
this is in the build targets under: %fpga-targets/fpga-regs).

This target actually makes various sub-targets using both [RegTool](../swtools-bin-utils-regtool/index.html) and a [Perl script](@ref hardware_common_fpga_sec_3_2).

The XML files can have any RegTool supported definitions in them, but here I've divided them into:
- a file per register set defintion
- a file to define the register ranges
- a file to define the constants (address offsets etc)
- one or more files that define the features

\note If you run RegTool to generate the C++ classes and it doesn't generate anything, then you need to ensure at least one feature is
defined in one of the loaded XML files. The C++ classes are generated per-feature.

In the <b>fpga</b> repo the files in fpga/registers/xml are the "common" register sets. I started adding the new register sets under
sub-directories (so the ORAN-specific registers are in files under the <i>oran</i> sub-directory).

The <i>settings</i> subdirectory contains a default set of ranges and constants. This set are used for creating the virtual interfaces, along with the
XML files under <i>common</i> sub-directory. The <i>common</i> sub-directory contains a file per feature and is used to generate the virtual interface
classes, one class header is created for every feature file.

Each feature file in the <i>common</i> sub-directory includes the appropriate xml files from <i>settings</i> along with the register definitions. This ensures
that RegTool only needs to read the single feature file, and that file controls which other XML files are loaded in.

For application-specific register classes, the application area will define it's own feature XML file that will pull in all of the register defintions for the
whole fpga (rather than having a separate file for each class). Here we generate all of the classes from the single file. This ensures that RegTool is allowed to run
it's checks for register field defintion overlaps across the whole fpga (when we create the virtual interfaces, we don't want this check because we need to create
a class for all possible register sets, and some sets will probably overlap others).

<hr>
\subsection hardware_common_fpga_sec_3_2 Using IFpgaMgr to access registers
<hr>

In the legacy code, we had an IFpga interface that allowed a singleton of the fpga class to be accessed. That fpga class was derived from each of the register classes, so you could
access <b>all</b> of the register methods from the single concrete class or could cast the pointer to a particular register set. Unfortunately, accessing the register was via the concrete
register classes so the code was littered with dependencies on fpga classes. This made the code very difficult to make more flexible, for example for multiple fpga support or for adding new registers.

The new framework uses virtual classes throughout for all accesses. It also uses a central "fpga manager" which is just a container of (rather than derived from) the register classes. This makes future changes
much easier due to the extra abstraction.

With the fpga manager scheme the code can no longer cast pointers to access the registers. The code also can't access all the registers from a single pointer. With the fpga manager you now need to get a pointer to
the register you need to access, and use that pointer for the accesses.

The fpga manager virtual interface is defined with accessors for all of the supported register sets. In the application code, you create the register sets teh application is expecting to use (i.e. those that the fpga
is built with) and "attach" that register pointer to the fpga manager. For example:

@code
Mplane::Zcu111SystemFpga::Zcu111SystemFpga(unsigned deviceIndex, const std::string &name) :
	SystemFpga(deviceIndex, name),
	mFpgaMgr(IFpgaMgr::singleton())
{
	mFpgaMgr->setIFpgaSystemRegs(std::make_shared<CommonFpgaSystemRegs>()) ;
	mFpgaMgr->setIFpgaFibreRegs(std::make_shared<CommonFpgaFibreRegs>()) ;
	mFpgaMgr->setIFpgaAntennaRegs(std::make_shared<CommonFpgaAntennaRegs>()) ;
	mFpgaMgr->setIFpgaIqRegs(std::make_shared<CommonFpgaIqRegs>()) ;
	mFpgaMgr->setIFpgaChainRegs(std::make_shared<CommonFpgaChainRegs>()) ;
	mFpgaMgr->setIFpgaCpri(std::make_shared<FpgaCpri>()) ;
}
@endcode

This example creates an application-specific SystemFpga, creating the required register sets and adding them to the fpga manager.

\note If you include code into a build that uses a register set that isn't defined for this application then the returned pointer will be null and result in a segfault

The fpga manager is provides a set of 'get' methods, one for each of the supported register sets. For convenience, these are static methods in IFpgaMgr so you don't need
to get the IFpgaMgr singleton.

You use these get methods to get the pointer to the register set you want to use:

@code
    unsigned int imageVer = (unsigned)IFpgaMgr::getIFpgaSystemRegs()->read_fpgaVersion();
@endcode

<hr>
\subsection hardware_common_fpga_sec_3_3 Perl script: names2tpl
<hr>

The names2tpl Perl script is a simple script that takes a single template file and is given a list of names. The script will then process the template, replacing
any variables with the list of names to create the final output file.

For the fpga, this script is run where the names are the list of virtual interface classes found in <b>hardware/vhi/inc/fpga</b>.

The template file contains raw text that is copied directly through to the output, along with template lines which are expanded. The template lines are marked
by being surrounded by '\@\@' sequence. Within the template lines, variables are expanded and the variables are defined by:

@code
\@{variable}\@
@endcode

where the variable can be:

- <b>fullname</b> - complete raw name
- <b>name</b> - simplified name with any path and extension removed

When a set of template lines is found in the template file, it is repeatedly expanded using the list of names to drive the expansion (so the template lines will be repeated once for each name).

An optional advanced feature for name expansion is to also use a Perl replacement regexp on the text. In this case, the variable is defined as:

@code
\@{variable}:{regexp}\@
@endcode

In this case the variable is first expanded based on the variable name, the regexp is then applied to this expanded text.

Hopefully a small example will make things clearer. Using this template:

@code
// A raw text line
\@\@static std::shared_ptr<\@name\@> get\@name\@() ;\@\@

\@\@class \@name:s/IFpga/CommonFpga/\@ {

};

\@\@
@endcode

when run with the names: /data/hardware/vhi/inc/IFpgaSystemRegs.h /data/hardware/vhi/inc/IFpgaAntennaRegs.h

will produce the following output:

@code
// A raw text line
static std::shared_ptr<IFpgaSystemRegs> getIFpgaSystemRegs() ;
static std::shared_ptr<IFpgaAntennaRegs> getIFpgaAntennaRegs() ;

class CommonFpgaSystemRegs {

};

class CommonFpgaAntennaRegs {

};
@endcode

As you can see, each set of template lines was replaced one per name (here the simplified names are IFpgaSystemRegs and IFpgaAntennaRegs).

The second set of template lines are multiline and contain the advanced regexp expression. It uses the Perl find and replace regexp s/../../ and here it
replaces <b>IFpga</b> with <b>CommonFpga</b>

For the fpga, this tool is used to create the virtual interface IFpgaMgr.h and the concrete class FpgaMgr.h and FpgaMgr.h based on whatever virtual classes have been created in
the vhi fpga sub-directory.

The fpga manager template files are:

- IFpgaMgr.h - created from hardware/vhi/inc/tpl/IFpgaMgr.h.tpl
- FpgaMgr.h - created from hardware/common/fpga/inc/tpl/FpgaMgr.h.tpl
- FpgaMgr.cpp - created from hardware/common/fpga/src/tpl/FpgaMgr.cpp.tpl

<hr>
\subsection hardware_common_fpga_sec_3_4 Virtual Interfaces
<hr>

The virtual interfaces to the register regions are created using RegTool with it's <b>FpgaRegsInterface</b> generator. We need to create a virtual interface for all of the possible register sets, regardless
of whether they are used in the application or not. To do this we rely on there being a feature definition XML file created in <i>fpga/registers/xml/common</i> for every register set.

The make target runs RegTool once for every xml file it finds stored in <i>fpga/registers/xml/common</i> creating a single virtual interface header file for every run of RegTool.

<hr>
\subsection hardware_common_fpga_sec_3_5 Application-specific Classes
<hr>

With the new fpga scheme, you need to create a set of fpga register classes for each application. This allows every aplication to support
different fpga builds.

As described above, you define a single XML file which pulls in all of the other required files such that RegTool is run and given only this
single XML file to control how the register classes are created. If you get any errors with a new XML file then it is probably due to not including
a required file.

As an example let's look at the ZCU111 RRH application file:

@code
<?xml version="1.0"?>
<!DOCTYPE RegisterMap SYSTEM "../../../../fpga/registers/dtd/RegMap.dtd">
<RegisterMap version="1.0">

	<!-- Get ranges and constants -->
	<xinclude:include  href="./settings/ranges.xml#FPGA"/>
	<xinclude:include  href="./settings/constants.xml#FPGA"/>

	<!-- Load required definition files -->
	<xinclude:include  href="../../../../fpga/registers/xml/Antenna.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/Chain.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/Fibre.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/Iq.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/System.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/System.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Chain.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Fibre.xml#FPGA"/>
	<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Iq.xml#FPGA"/>

	<!-- Use definitions -->
 	<Device name="FPGA">

 		<Feature name="Antenna" comment="Antenna registers">
			<xinclude:include  href="../../../../fpga/registers/xml/Antenna.xml#Antenna"/>
 		</Feature>

 		<Feature name="Chain" comment="Chain IQ registers">
			<xinclude:include  href="../../../../fpga/registers/xml/Chain.xml#Chain"/>
 		</Feature>

 		<Feature name="Fibre" comment="Fibre registers">
			<xinclude:include  href="../../../../fpga/registers/xml/Fibre.xml#Fibre"/>
 		</Feature>

 		<Feature name="Iq" comment="Fibre IQ registers">
			<xinclude:include  href="../../../../fpga/registers/xml/Iq.xml#Iq"/>
 		</Feature>

 		<Feature name="System" comment="System registers">
			<xinclude:include  href="../../../../fpga/registers/xml/System.xml#System"/>
			<xinclude:include  href="../../../../fpga/registers/xml/System.xml#RF_Chain_Registers"/>
 		</Feature>

 		<Feature name="Oran" comment="ORAN registers">
			<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Chain.xml#Chain"/>
			<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Fibre.xml#Fibre"/>
			<xinclude:include  href="../../../../fpga/registers/xml/oran/ORAN-Iq.xml#Iq"/>
 		</Feature>

	</Device>

</RegisterMap>

@endcode

The file starts by first reading in the constants and ranges settings from a local settings directory (which allows the application
to use it's own set of constants and ranges). Note that in this casde we could just as easily have used the default set of settings
defined in the fpga repo - in this case the values are all the same.

Next the file reads in all of the register definition files the application needs. Remember that RegTool needs to have processed all of these files
in order to get all of their definitions. In the past RegTool was given the list of these files in the command line, but that restricted what could be done
with the tool. It is much more flexible to have a single application file control the files read in.

The final section defines the features. Remember that you only get a C++ class file for each defined feature. Remember also that the feature
name must match the common set so that the class file uses one of the virtual interfaces.

<hr>
\subsection hardware_common_fpga_sec_3_6 test-common mock classes
<hr>

The new fpga manager scheme means that we need to create a set of fpga registers for test purposes. In the legacy code, the register sets were defined in the hardware/common
area and could be used by all other class tests.

The new scheme doesn't create the registers until we build the application-specific hardware library, so we need a set of mocks that are available for all tests in the hardware repo.

To do this, the make target builds a set of test register classes that uses the common settings defined in the <b>fpga</b> repo. These test mock classes are created in:
<i>hardware/test-common/inc/regs</i>

\note I create the header files with the name MockFpga*.h but the class name inside the header is still CommonFpga*. This is something I need to fix later!

The new mock fpga TestMockFpga.cpp is created from a template stored in <i>hardware/test-common/src/tpl/TestMockFpga.cpp.tpl</i>. This class creates the registers and attaches them
to the fpga manager ready for use in the tests.

\note The test mock uses some "static initialisation magic" to ensure the clas is constructed and the registers attached to fpga manager without the code needing yo
manually construct the class (or indeed know anything about it!)

<hr>
\subsection hardware_common_fpga_sec_3_7 Multiple FPGA support - thoughts
<hr>

Here are some random thoughts I'd had on how to support multiple fpgas in future builds:

- Need to update the XML to allow defintion of which fpga a register set belongs to. For register sets split across multiple fpgas,
need to be able to define the boundaries.
- The register classes, rather than storing a single kernel pointer, can store kernels in an array created in teh constructor. Also
constructed, we can create a lookup array for each indexed field access such that the index looks up the correct kernel pointer to use
for the access. This should minimise the overhead of getting the pointer, and since the class code is auto-generated it won't be a problem
to create (it will look messy, but that's the trade off for speed of access).


<hr>
\section hardware_common_fpga_sec_5 FPGA Emulator
<hr>

The fpga emulator 'OffTargetFPGA' is a singleton class that is compiled by default in the x86 libs (due to the define
OFF_TARGET being specified in the makefiles).

The emulator provides emulation of the kernel fpga device driver, so provides the interface to the IOCTL calls.

For tests, it also provides an interface to read/write complete registers by address. More portably, it also provides an
interface to read/write individual register fields using their names. This relies on the configuration file being set
correctly (see below).

In addition to read/write access, the emulator also provides the ability to attach a data source to an address. Subsequent
reads from that address will then return each data value in turn (the data being passed the registry function as a vector).

Data sources may be one-shot, in which case once all of the data has been read out subsequent reads will return the original
register value (i.e. whatever had been previosly written to that location). Alternatively the data can be repeating. In this case
the data restarts from the beginning each time it has all been read. This continues until a new data source is regitered.

<hr>
\subsection hardware_common_fpga_ssec_5_1 Emulator Register API
<hr>

@code
    // \brief  Read a register
    //
    // Read a register location
    //
    //  \param   address   register address
    //  \param   value_p   pointer to value to be set by register read
    //  \param   mask      bits to read
    //
    //  \return true if successful, false if register hasn't been set (and sets the value to a preset default)
    //
	bool readReg(const UINT32 address, UINT16 *value_p, UINT16 mask = 0xffff) ;

    // \brief  Write a register
    //
    // Write a register location
    //
    //  \param   address   register address
    //  \param   value     value to write
    //  \param   mask      bits to write
    //
    //  \return true if successful, false if not
    //
	bool writeReg(const UINT32 address, const UINT16 value, UINT16 mask = 0xffff) ;

	//
	// Write to field by name
	// @param name	field name
	// @param value	value to write
	//
	void writeField(const std::string &name, UINT16 value) ;

	//
	// Read from field by name
	// @param name	field name
	// @return field value
	//
	UINT16 readField(const std::string &name) ;


	enum DataValuesMode {
		DATAVALUES_ONESHOT	= 0,
		DATAVALUES_REPEAT	= 1,
	};

	//
	// Attach a set of data values to the address of a field, such that reads will access this data
	// @param fieldName
	// @param values
	// @param mode
	//
	void registerDataValues(const std::string fieldName, const std::vector<UINT16>& values, DataValuesMode mode = DATAVALUES_ONESHOT) ;

	//
	// Attach a set of data values to an address, such that reads will access this data
	// @param address
	// @param values
	// @param mode
	//
	void registerDataValues(const unsigned address, const std::vector<UINT16>& values, DataValuesMode mode = DATAVALUES_ONESHOT) ;

	//
	// Registers a sequence of register writes to check the actual register writes against. If the sequence successfully
	// completes, with all writes matching the sequence then isSequenceCheckComplete() will return true
	// @param seqName	Name to access this sequence
	// @param values	Vector of values to check sequence against
	//
	void addSequenceCheck(const std::string& seqName, const std::vector<SequenceCheck>& values) ;

	//
	// Registers a sequence of field writes to check the actual register writes against. If the sequence successfully
	// completes, with all writes matching the sequence then isSequenceCheckComplete() will return true
	// @param seqName	Name to access this sequence
	// @param values	Vector of field values to check sequence against
	//
	void addSequenceCheck(const std::string& seqName, const std::vector<FieldSequenceCheck>& values) ;

	//
	// If the sequence successfully completes, with all writes matching the sequence then this will return true
	// @param seqName	Name to access the sequence
	// @return true if sequence has completed
	//
	bool isSequenceCheckComplete(const std::string& seqName) ;

	//
	// Delete the sequence
	// @param seqName	Name to access the sequence
	//
	void delSequenceCheck(const std::string& seqName) ;

	//
	// Debug prints the sequence
	// @param seqName	Name to access the sequence
	//
	void showSequenceCheck(const std::string& seqName) ;

@endcode

<hr>
\subsection hardware_common_fpga_ssec_5_2 Config
<hr>

When the emulator is started it reads a configuration file. The default location is <b>../../../hardware/common/fpga/cfg/fpga-emu.cfg</b>.
In other words the config file is under hardware/common/fpga/cfg/fpga-emu.cfg. Using the relative path ensures that
all of the test code has access to the default configuration file, even running under Jenkins.

The configuration file is of the form:

@code
# FPGA emulator configuration file
#
# Initialise registers using:
# address=<register address> value=<register value>
#
# Set fpga emulator specific settings via the emu.* variables:
# emu.debug - set debug level in emulator
# emu.log - specify logging filename/path
# emu.names - specify config file containing definitions of register field names, address, bit allocation
#

# Set fpga version register
address=0x0100 value=0x0001

emu.log = log/fpga-emu.log
emu.debug = 0
emu.names = ../../../hardware/common/fpga/cfg/etna-regs.cfg

## Register values (read from Etna)
address=0x00120 value=0x0000
...

# Ant 0
field=AntennaProcDelay[0] value=4660
# Ant 1
field=AntennaProcDelay[1] value=4671
...
@endcode

Supported values are:

\li <b>emu.logEnable</b> If set to 'true' causes the emulator to log transactions to thelog file (see below). Default is 'false'
\li <b>emu.log</b> Set log file location. Path is created if not present. Emulator logs all transactions
\li <b>emu.debug</b> Set to non-zero to debug the emulator
\li <b>emu.names</b> Specify a file containing field names (see below)
\li <b>address</b> Write the value to the register address (done once at startup to pre-initialise registers)
\li <b>field</b> Write the value to the specified field name (done once at startup to pre-initialise registers)

The names file (which is, like the config file, best specified as a relative path for Jenkins) contains a list of all
of the register fields along with their address, mask (i.e. which bits used for field), and bit shift (i.e. starting
bit position of field in register).

An example of the file contents is:

@code
name=systemClockReset position=0x00000 mask=0x0001 shift=0
name=basebandInterfaceReset position=0x00000 mask=0x0001 shift=2
name=rfChainReset position=0x00000 mask=0x0001 shift=3
name=rxAdcIntfcReset position=0x00000 mask=0x0001 shift=7
...
@endcode

NOTE: This file is generated automatically by buildTools/tools/fpga/create-fpga-classes.bsh. This calls the Perl script
buildTools/tools/fpga/create-fpga-cfg.pl to do the actual work.

<hr>
\subsection hardware_common_fpga_ssec_5_3 Config Search Path
<hr>

So that the emulator can be used in a variety of situations, I've added a search path for the config file such that the
first file found will be used.

The default search path is:

\li <b>.</b> Current directory
\li <b>$OFFTARGET_CFG_DIR</b> If this environment variable is set, then this path is search next
\li <b>../../../hardware/common/fpga/cfg</b> Relative path to config directory in hardware (assuming we are in
\li <b>$HOME/git/hardware/common/fpga/cfg</b> Looks in user's home directory for the git repository

The environment variable is mainly provided for shell scripts and autotools, but can be used from the command line as:

  OFFTARGET_CFG_DIR=./cfg ./CommonFpgaUT

<hr>
\subsection hardware_common_fpga_ssec_5_4 Example Code
<hr>

The following code sample illustrates the various test access methods

@code

// access the emulator class
#include "OffTargetFPGA.h"

some_func()
{
	// Get the singleton instance
    OffTargetFPGA& OffTargetFPGA = OffTargetFPGA::getInstance();

	// Read from address.
    UINT16 rdVal;
    bool valid = OffTargetFPGA.readReg(0x0004, &rdVal);

	// Write to a register field
    OffTargetFPGA.writeField("spi0ReadDataLo", 0xAAAA) ;

    // Add some data sources
    std::vector<UINT16> data ;
    data.push_back( 0x1111 );
    data.push_back( 0x2222 );
    data.push_back( 0x3333 );
    OffTargetFPGA.registerDataValues("spi0ReadDataLo", data) ;

	// reads back 0x1111
    OffTargetFPGA.readReg(0x00208, &rdVal) ;

	// reads back 0x2222
    OffTargetFPGA.readReg(0x00208, &rdVal) ;

	// reads back 0x3333
    OffTargetFPGA.readReg(0x00208, &rdVal) ;

	// reads back 0xAAAA - the default written to the register previously
    OffTargetFPGA.readReg(0x00208, &rdVal) ;
}

@endcode

<hr>
\subsection hardware_common_fpga_ssec_5_5 Sequence Checking - Addresses
<hr>

There are some situations where just comparing the final register value with an expected value is
insufficient to prove correct operation. Some of the fpga registers are used as enables that must
be set when writing values to other registers then the enable register is cleared to complete the
transaction. In those cases a) the eventual value will always be 0, even if the register wasn't written
and b) it's important to check that the enable register was set before trying to write any of the
enabled registers.

Another example is where the fpga provides a 2 register window into a larger register space having an address
register and a data register. Again, checking the final value only checks the last written entry into the
register space not all of the entries.

To check for these circumstatnces I've provided a sequence check interface in the off target fpga.

The simplest of these is the addressed register interface, where you create a list of entries containing
a register address, a mask, and an expected value.

@code
	struct SequenceCheck {

		SequenceCheck(unsigned address, UINT16 value, UINT16 mask = 0xFFFF, SequenceCheckType type = SEQCHECK_WRITE) :
			mType(type),
			mAddress(address),
			mValue(value),
			mMask(mask)
		{}

		SequenceCheck() :
			mType(SEQCHECK_WRITE),
			mAddress(0),
			mValue(0),
			mMask(0)
		{}

		SequenceCheckType mType ;
		unsigned mAddress ;
		UINT16 mValue ;
		UINT16 mMask ;
	};
@endcode

With a created list, you register this sequence with the fpga emulator by giving it a string name:

@code
	//
	// Registers a sequence of register writes to check the actual register writes against. If the sequence successfully
	// completes, with all writes matching the sequence then isSequenceCheckComplete() will return true
	// @param seqName	Name to access this sequence
	// @param values	Vector of values to check sequence against
	//
	void addSequenceCheck(const std::string& seqName, const std::vector<SequenceCheck>& values) ;
@endcode

From this point onwards, every register write is checked against the registered sequence (or sequences). If the
address or the register being written matches the current sequence entry then the written value is compared
with the expected value. If they match then the next entry in the sequence is stepped to; if they mismatch then
the sequence is restarted from the begining.

This algorithm allows you to ignore any writes you're not interested in (for example there may be writes
from a separate task interlaced with those you're testing).

Once the test has complete the sequence should be deleted to reduce overhead on the fpga emulator.

Sequence testing, sequence removal, and sequence debug are provided by the interfaces:

@code

	//
	// If the sequence successfully completes, with all writes matching the sequence then this will return true
	// @param seqName	Name to access the sequence
	// @return true if sequence has completed
	//
	bool isSequenceCheckComplete(const std::string& seqName) ;

	//
	// Delete the sequence
	// @param seqName	Name to access the sequence
	//
	void delSequenceCheck(const std::string& seqName) ;

	//
	// Debug prints the sequence
	// @param seqName	Name to access the sequence
	//
	void showSequenceCheck(const std::string& seqName) ;

@endcode

An example of setting up a sequence, testing it's completion and removing it are shown below:


@code
    // Make a sequence
    std::vector<OffTargetFPGA::SequenceCheck> seq1 ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x00208, 0x1111)) ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x0020A, 0x2222, 0x00ff)) ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x0020C, 0x3333, 0xff00)) ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x00208, 0x4444)) ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x0020A, 0x5555, 0x00ff)) ;
    seq1.push_back(OffTargetFPGA::SequenceCheck(0x0020C, 0x6666, 0xff00)) ;
    OffTargetFPGA.addSequenceCheck("seqTest1", seq1) ;

	// Debug - show sequence if it has not completed
	if (!OffTargetFPGA.isSequenceCheckComplete("seqTest1"))
		OffTargetFPGA.showSequenceCheck("seqTest1") ;

	// Check completion
    CPPUNIT_ASSERT(OffTargetFPGA.isSequenceCheckComplete("seqTest1")) ;

	// Remove sequence
	OffTargetFPGA.delSequenceCheck("seqTest1") ;
@endcode

When you run the showSequenceCheck() method it shows 2 blocks of data. The first shows your specified sequence
of address/value pairs, along with an 'OK' if it was found or an 'X' if it wasn't found yet.

The second block of data shows the actual writes performed since registering the sequence.

This information is useful in determining the reason the sequence did not match.

<hr>
\subsection hardware_common_fpga_ssec_5_6 Sequence Checking - Fields
<hr>

As an alternative to specifying the register addresses directly, it is preferred that you use the field
name interface. Here you can specify a list of field names and values as the sequence. These then
get converted internally into register address/value pairs and used in the same manner as just described
above.

The interface to use is:

@code
	//
	// Registers a sequence of field writes to check the actual register writes against. If the sequence successfully
	// completes, with all writes matching the sequence then isSequenceCheckComplete() will return true
	// @param seqName	Name to access this sequence
	// @param values	Vector of field values to check sequence against
	//
	void addSequenceCheck(const std::string& seqName, const std::vector<FieldSequenceCheck>& values) ;
@endcode

Here you supply a list of FieldSequenceCheck objects.

Note that a convenience constructor method for the FieldSequenceCheck object lets you specify just the field
name. This is used where you want to check that a register was written but don't care about the written value.

An example of creating a sequence and checking it is shown below:

@code
// Define data in a static array
static const OffTargetFPGA::FieldSequenceCheck c0CfrFieldData[] = {
	OffTargetFPGA::FieldSequenceCheck("CommonCfr0EnLoad", 0x0001),
	OffTargetFPGA::FieldSequenceCheck("CommonCfr0Load0or1"),			// Don't care about the value
	OffTargetFPGA::FieldSequenceCheck("CommonCfr0PulseI", 0x00e4),
	OffTargetFPGA::FieldSequenceCheck("CommonCfr0PulseQ", 0x0012),
	...
	OffTargetFPGA::FieldSequenceCheck("Enable[4]", 0x0001),
} ;
#define NUM_C0CFR_FIELD_DATA	(sizeof(c0CfrFieldData) / sizeof(OffTargetFPGA::FieldSequenceCheck))

	// Create a vector
    std::vector<OffTargetFPGA::FieldSequenceCheck> cfrFieldData(c0CfrFieldData, c0CfrFieldData+NUM_C0CFR_FIELD_DATA) ;

	// Register sequence check
    fpgaEmu.addSequenceCheck("single-carrier-cfr-seq", cfrFieldData) ;

	// do the test
	...

	// debug if not complete
    if (!fpgaEmu.isSequenceCheckComplete("single-carrier-cfr-seq"))
    	fpgaEmu.showSequenceCheck("single-carrier-cfr-seq") ;

	// check complete
    CPPUNIT_ASSERT( fpgaEmu.isSequenceCheckComplete("single-carrier-cfr-seq") ) ;

	// remove sequence
    fpgaEmu.delSequenceCheck("single-carrier-cfr-seq") ;
@endcode

<hr>
\section hardware_common_fpga_sec_6 Environment Variables
<hr>

There are a number of environment variables that can be set - either as part of a test program, or when running the executable -
which will change the operation of the emulator.

An example of setting variables in the code is:

@code
#include <cstdlib>
#include "gtest/gtest.h"

int main( int argc, char* argv[] )
{
  ::testing::InitGoogleTest(&argc, argv);

  // change the off-target fpga configuration settings
  ::setenv("OFFTARGET_CFG_DIR", "../../../../ECB_EUROPA/fpga/cfg", 1) ;

  return RUN_ALL_TESTS();
}
@endcode

And example of setting variables on the command line is:

@code
    OFFTARGET_CFG_DIR=/data/git/rse/hardware/common/fpga/cfg ./AlFelixProcess/EcbAlFelixProcess
@endcode

\li <b>OFFTARGET_CFG_DIR</b> - Change the path of the config directory
\li <b>OFFTARGET_LOG_FILE</b> - Change the name/path of the log file
\li <b>OFFTARGET_LOG_ENABLE</b> - Set to 'true' to enable logging
\li <b>OFFTARGET_DEBUG</b> - Set to a debug level to debug the emulator (default 0 = no debug)

*/
