/**
\mainpage Common Radio Hardware Generic Synthesiser
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_common_isynthdriver_scope Scope
<hr>

This document describes the classes created to implement the generic synthesiser driver (Mplane::ISynthDriver) used by synth devices like
TxSynth, RxSynth, DpdSynth, SystemSynth.

<hr>
\section hardware_common_isynthdriver_overview	Overview
<hr>

The aim for creating the ISynthDriver interface is to make the Tx, Rx, Dpd, System synth objects independent of the PLL driver chip / library used.
The ISynthDriver implementations would have the board specific code to communicate with the PLL to initialise and program the required frequency.
The individual synthesiser object (Tx, Rx, etc) would use one of the ISynthDriver implementations via the virtual interface. As long as a synthesiser object
only uses the ISynthDriver API to access the actual hardware, then the details of the actual chip/library being used are unimportant and the same code can be
used on any board.

The one place in the application that does know of the board architecture is the XxxDevices class which creates the IDevice list. This is where the
devices are created and a device will be created for each type of synthesiser. Here ISynthDriver implementations will be created using concrete classes
and passed to the individual synthesisers.


<hr>
\section hardware_common_isynthdriver_sec_2 Details of Design
<hr>

This section goes into more detail on the class design and use of the classes

\subsection hardware_common_isynthdriver_sec_2_1 ISynthDriver Interface
<hr>

The ISynthDriver virtual interface is essentially defined as:

@code

	virtual ReturnType::State initialise() = 0;
	virtual ReturnType::State program (Frequency freq) = 0;

@endcode

The synth driver provides methods to initialise the driver and program a frequency.

\subsection hardware_common_isynthdriver_sec_2_2 Example Device Creation
<hr>

As stated above, the ISynthDriver instances are created in the XxxDevices class. Each ISynthDriver instance is provided with the device driver that it uses to
program the frequency.
For ZCU111 board, the frequency tuning is done using the RFDC library and FPGA register read/writes. In this case, a concrete class RFDCDriver implements
the ISynthDriver interface. In the constructor of this class it accepts the Rfdc library wrapper instance and the FPGA virtual interface.
Once created, the ISynthDriver instance can then be passed into the constructor of the synth device.
On some other board/variant, if the LMX2594 chip is used as the synthesiser driver, then a concrete class LMX2594 would implement the
ISynthDriver interface and will be passed to the Tx/Rx synth device created by the XxxDevices class. LMX2594 class would either derive
from the existing LMX2594 or contain it.

\image html Synth-Devices-and-Drivers.png "Synth Device and Driver relationship"

*/
