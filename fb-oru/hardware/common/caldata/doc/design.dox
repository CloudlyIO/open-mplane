/**
\mainpage Calibration Data interface Implementation
\anchor _home
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

This document is a design overview document for the radio hardware calibration modules



<!-- ******************************************************************************************* -->

<hr>
<hr>
\section common_caldata_page_scope Scope
<hr>
<hr>

This document describes the classes created to implement the calibration data functions (reading data from files and
providing an interface to that data)


<!-- ******************************************************************************************* -->

<hr>
<hr>
\section common_caldata_page_overview	Overview
<hr>
<hr>

Calibration files are stored in the system as xml files. These xml files are read on application startup by the calibration
data classes, which store the processed data in a calibration class.

A singleton calibration class contains all of these objects and provides the application with access methods.

<!-- ******************************************************************************************* -->

<hr>
<hr>
\section common_caldata_page_sec_2 Details of Design
<hr>
<hr>


The general calibration class architecture is as shown below:

\dotfile cal-arch.dot "General Cal Class Architecture"

This shows that the ICalData class (implemented as Mplane::CalData) contains one or more cal data instances. Each of these
instances consist of an "IYyyCalData" part which performs the cal file read, and an "IYyyCal" part which stores the calibration
data and presents this data through an interface.

The "IYyyCal" interface is specific for each calibration file, but the "IyyCalData" class follows a class inheritance hierarchy
shown below:

\dotfile ical-classes.dot "Cal Interface Hierarchy"

The Mplane::CommonCalBase provides base cal file control methods. Making the concrete cal class YyyCalData inherit from the
virtual interface IYyCalData means that users of this type of cal file can access the information via a virtual interface and
are not tied to a specific instance.

As described above, the Mplane::CalData class is the main container of all the cal data objects. User code gets an instance of
the ICalData singleton and then uses methods to get an instance of the cal data they need.

To keep things virtual, and provide a flexible framework for adding/updating cal files, each cal file type provides a virtual
interface through which it's data can be accessed. This virtual interface defines the access method for getting an instance of
that cal data, and also provides the virtual interface for accessing the data via the instance.

For example, the class architecture for the RxCal is:

\dotfile rxcal-arch.dot "RxCal Class Architecture"


which is defined in files as:

IRxCal.h
@code
class IRxOpenLoop
{
public:
	IRxOpenLoop() {}
	virtual ~IRxOpenLoop() {}

	// Access methods...
};

class IRxCal
{
public:
	IRxCal() {}
	virtual ~IRxCal() {}

    virtual std::shared_ptr<IRxOpenLoop> getRxOpenLoop( int path ) =0 ;
};
@endcode

IRxCalData.h:
@code
class IRxOpenLoop ;

class IRxCalData : public ICalData {
public:
	IRxCalData() {}
	virtual ~IRxCalData() {}

    /**
     * Method used to get access to the Rx open loop calibration data for the given radio path.
     */
    virtual std::shared_ptr<IRxOpenLoop> getRxOpenLoop( int path ) =0 ;


} ;

/**
 * Class that manages multiple calibration objects, in particular the RX calibration object
 */
class IRxCalDataContainer {
public:
	IRxCalDataContainer(){}
	virtual ~IRxCalDataContainer(){}

	/**
	 * Get the IRxCalData object instance
	 */
    virtual std::shared_ptr<IRxCalData> getRxCal() =0 ;
};
@endcode

The the Mplane::CalData concrete class just needs to ensure it implements the the IRxCalDataContainer interface:

CalData.h
@code
class CalData: public ICalData,
	public IRxCalDataContainer,
	...
{
public:
	...

    virtual std::shared_ptr<IRxCalData> getRxCal();

	...

@endcode

Now user code can access the rx cal data as:

@code
	// Get the ICalData singleton and cast it to an IRxCalDataContainer
    std::shared_ptr<IRxCalDataContainer> calData = std::dynamic_pointer_cast
            < IRxCalDataContainer > (ICalDataFactory::getInterface());

	// Get the IRxCalData from this container
    std::shared_ptr<IRxCalData> rxCal = calData->getRxCal();

    // we can now use the rx cal instance to determine whether the file has been loaded and if so get the
    // IRxOpenLoop associated with rx cal
    std::shared_ptr<IRxOpenLoop> rxol ;
    if (rxCal->isLoaded())
        rxol = rxCal->getRxOpenLoop(port);

@endcode


The RX AGC cal class is slightly different in that it actually just uses the rx cal file and adds some extra logic to
use the data in a specific way for the RX AGC.

In this case the rxcal file is set such that each frequency contains a point for each CG step used in the AGC. And example
of this data is shown below:

@code
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE calibration SYSTEM "ftu_rx_cal.dtd">
<FTUCalibrationRx version="1" country="UK" facility="Swindon" operator="Jason">
	<RxOpenLoop comment="Calibration for Signal Analysis">
		<Path>1</Path>
		<Date>03/02/15 12:28:23.410</Date>
		<LinearTemperatureCompensation>
		<Coefficient units="dB/DegC">0.05</Coefficient>
		</LinearTemperatureCompensation>
		<FrequencyBand>
			<Upper>915000</Upper>
			<Lower>700000</Lower>
			<IFDSA>10.0</IFDSA>
			<FrequencyTable>
				<Frequency>700000</Frequency>
				<Temperature>25.7</Temperature>
				<Point>
					<RFDSA>1.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>4.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>10.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>16.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>22.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>28.0</RFDSA>
					<dBFS2dBm>-43.99</dBFS2dBm>
				</Point>
			</FrequencyTable>
...

@endcode


This sets up CG steps 1.0, 4.0, 10.0, 16.0, 22.0, and 28.0. The IRxAgcCalData class uses the data to determine what these CG
steps are and provides the list.

So the class hierarchy is slightly different because this cal class inherits from RxCalData. It still provides it's
own virtual interface (i.e. IRxAgcCalData and IRxAgcCalDataContainer) so that users can access it via a virtual interface.

The RxAgcCalData hierarchy is shown below:

\dotfile rxagccal-classes.dot "RxAgcCal Class Hierarchy"


\subsection common_caldata_page_sec_2_1 RxCal dBFS2dBm Temperature Compensation
<hr>

Whenever the dBFS2dBm value is read out, the current temperature is used to compensate the IF attenuation value read out from the cal file:

<b>dBFS2dBm<SUB>comp</SUB> = dBFS2dBm<SUB>rxcal</SUB> + (current_temperature - temperature<SUB>rxcal</SUB>) * temperature_coeff<SUB>rxcal</SUB></b>

In most applications this is sufficient. However, in applications which actively temperature compensate the IF attenuator by adjusting it as the
temperature changes, we also need to account for the change in IF atten.

All we need to do for this is add the delta between the current IF atten and the IF atten used during calibration:

<b>dBFS2dBm = dBFS2dBm<SUB>comp</SUB> + (current_IF_atten - IF_atten<SUB>rxcal</SUB>)</b>

We can do this for all applications because there will be 0 adjustment added when the IF attenuator is not being compensated.



<!-- ******************************************************************************************* -->

<hr>
<hr>
\section common_caldata_sec_4 Host Based Unit Tests
<hr>
<hr>

This is the test section

\subsection common_caldata_ssec_1_1 Code Coverage Summary

\include ../../build-local/ETNA_FTU/caldata/test/coverage.txt

<hr>
\subsection common_caldata_ssec_1_2 Unit Test Results
<hr>

\include ../../build-local/ETNA_FTU/caldata/test/cppunit.txt


*/
