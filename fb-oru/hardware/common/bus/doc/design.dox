/**
\mainpage Common Radio Hardware Generic Device Bus
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_common_ibus_scope Scope
<hr>

This document describes the classes created to implement the generic bus (Mplane::IBus) used by hardware devices.

<hr>
\section hardware_common_ibus_overview	Overview
<hr>

The aim for creating the IBus interface is to make all hardware devices board agnostic so that any device, once written, can be reused
on any board. As long as a device driver only uses the IBus API to access the actual hardware, then the details of the actual physical bus being
used are unimportant and the same code can be used on any board.

The one place in the application that does know of the board architecture is the XxxDevices class which creates the IDevice list. This is where the
devices are created and where the IBus implementations will be created using concrete classes (for example an I2c bus using Linux /dev/i2c-x device).
The bus implementation will be passed to the device as an IBus pointer when the device is created. The device can then use the bus via the IBus API
without any need to know any details of that bus.

Note that in this context an IBus implementation is actually modelling the bus to a particular device (endpoint), and not the physical bus that multiple
hardware devices are connected to. So there will be a single bus instance created for every device, and each bus instance will likely have been
created with details of that device (for example an I2c bus instance will be created with the I2c address of the endpoint device).

Making the IBus instance hold the details of a device specific to this board means that all the board specific information is abstracted away from
the device driver itself, making it reusable. The XxxDevices class can be seen as the "mapper" that creates the objects with all of the board-specific
details, and can be the one class that keeps the board details away from any other class.

<hr>
\section hardware_common_ibus_sec_2 Details of Design
<hr>

This section goes into more detail on the class design and use of the classes

\subsection hardware_common_ibus_sec_2_1 IBus Interface
<hr>

The IBus virtual interface is essentially defined as:

@code

	virtual bool writeData(const std::vector<uint8_t>& bytes) =0 ;
	virtual bool readData(std::vector<uint8_t>& bytes, unsigned numBytes=0) =0 ;
	virtual bool writeData(uint32_t offset, const std::vector<uint8_t>& bytes) =0 ;
	virtual bool readData(uint32_t offset, std::vector<uint8_t>& bytes, unsigned numBytes=0) =0 ;
	virtual bool writeByte(uint32_t offset, uint8_t byte) =0 ;
	virtual bool writeShort(uint32_t offset, uint16_t shortVal) =0 ;
	virtual bool writeWord(uint32_t offset, uint32_t word) =0 ;
	virtual bool readByte(uint32_t offset, uint8_t& byte) =0 ;
	virtual bool readShort(uint32_t offset, uint16_t& shortVal) =0 ;
	virtual bool readWord(uint32_t offset, uint32_t& word) =0 ;

	virtual bool commandsList(const std::vector<BusCommand>& commands, std::vector<BusCommand>& readback, bool busAtomic = true, bool deviceAtomic = true) =0 ;
	virtual bool commandsList(const std::vector<BusCommand>& commands, bool busAtomic = true, bool deviceAtomic = true) =0 ;

@endcode

The first two methods writeData and readData with no offset are meant to allow "raw" access to the device. On a Linux device these are equivalent
to calling write() and read() on the file descriptor opened on that device.

The rest of the read/write methods use an offset value to access a specific part of the device (e.g. a register or internal address). In most cases
the first 2 methods are equivalent to the offset calls with offset=0.

It is important to note that each of these methods is atomic - i.e. it performs these operations sequentially on the device without allowing any other
thread access to the same device. In addition there is a separate, higher-layer, bus lock used which prevents multiple threads trying to simultaneously
using the same bus (see @ref hardware_common_ibus_sec_2_4).

The last two methods are really the same method with a convenience variant. This method is provided so that a sequence of commands can be performed
by the device atomically (i.e. with the bus and the device locked out from any other thread accessing the device). Supported commands are various
size reads and writes as well as a generic wait for a specified number of milliseconds. Where there are read commands, the read value will be
added to the provided readback vector.

Being able to perform a general sequence of commands is a useful facility but might be used where locking for the whole sequence is not required.
For these cases, control of the atomicity of the list is provided by flags so you can control if the device is locked during the whole list (default)
or only during each command. You can also control if the bus is locked over the whole list (default) or only during each command.

\note If bus atomicity is set then it will force device atomicity regardless of it's setting.

\subsection hardware_common_ibus_sec_2_2 Supported Bus Types
<hr>

The IBus virtual interface should be used by device drivers. However there may be occasions where the device driver needs access to methods
specific to a particular bus. Since a device driver is written for a particular piece of hardware, and that hardware can only ever have the same
bus regardless of which board it is on, then using methods of a particular bus does not break the reuse philosophy.

To allow a device driver access to specific methods, it will need to dynamic cast the IBus instance into a particular bus virtual class:

@code
std::shared_ptr<II2cBus> i2c( std::dynamic_pointer_cast<II2cBus>(bus) ) ;
@endcode

\note It's really important that you only ever use the virtual interface of a specific bus, NOT a concrete class. So you should always be using
a class of the form IxxxBus

Currently there are two busses defined:

\li I2cBus - I2C specific bus
\li SpiBus - SPI specific bus

\subsection hardware_common_ibus_sec_2_3 Example Device Creation
<hr>

As stated above, the IBus instances are created in the XxxDevices class. Each IBus instance is created as a specific bus class and given the
details of the device endpoint the bus connects to. Once created, the IBus instance can then be passed to the constructor of the device as shown
in the example below:

\image html i2c-bus-linux.png "Example creation of an I2c bus"


\subsection hardware_common_ibus_sec_2_4 Bus Locking
<hr>

During each command, the particular device is locked to prevent any other thread coming in and trying to access the same device during a transaction.
We also need to lock out any other threads from trying to use the same physical bus that this device hardware is using. For example, multiple
devices will be connected to I2c bus 0.

To facilitate this locking of the physical bus an IBusLock class instance is created for each physical bus and passed into the appropriate IBus
instance. Remember that the IBus is per device being the bus connected down to the device endpoint. Whereas an IBusLock is to lock a physical bus
(which will have multiple IBus instances).

\image html i2c-bus-example.png "Example I2c bus connection"

The image above shows a simple example of a processor with it's I2c bus 0 connected to physical devices A, B, and C

\image html i2c-bus-lock.png "Example I2c bus lock"

This example would create a single IBusLock for I2c bus 0 and pass this bus lock into the IBus devices created for A, B and C


\subsection hardware_common_ibus_sec_2_5 Bus Settings
<hr>

In a similar fashion to the bus lock, where an extra object is created and passed to a bus, the bus settings are created as a standalone
object and passed into a bus or busses at construction.

At minimum, bus settings define the order in which data is transferred over the bus: this may be MS bit first or LS bit first.

For SPI busses there are additional settings such as clock phase, clock polarity, clock speed etc.

Unlike the bus lock (which is an abstract software object), the settings will likely need to be passed to an external entity (like a Linux
driver or written into device registers). So some instances of settings will likely be constructed with device-specific details.

For example,
the SC18IS602B device (I2c to SPI bridge) is configured over i2c and sets the settings of it's SPI busses. The spi bus settings object for those
busses will need details of the i2c bus being used to communicate with the SC18IS602B.


\subsection hardware_common_ibus_sec_2_6 Example SPI Device
<hr>

As an example of a device that uses the SPI bus for access to it's registers, consider the LMX2594. This is an SPI PLL chip.

We can define the class with a constructor that takes in a pointer to an ISpiBus:

@code
class LMX2594 {
public:
	LMX2594(std::shared_ptr<ISpiBus> spi) ;
	virtual ~LMX2594() ;

	/**
	 * Set the frequency (MHz)
	 */
	virtual bool setFrequency(float freqMHz) ;

private:
	std::shared_ptr<ISpiBus> mSpi ;
} ;
@endcode

The body of the code can then use this captured pointer to perform SPI transactions to set the registers of the LMX2594:

@code
LMX2594::LMX2594(std::shared_ptr<ISpiBus> spi) :
	mSpi(spi)
{
	// This device has a 24bit shift register; MS bit first; Address bits are 22:16; R/W bit is 23
    mSpi->setDeviceSettings(24, 22,16, true,23) ;
}

LMX2594::~LMX2594()
{
}

bool LMX2594::setFrequency(float freqMHz)
{
	...

	// set registers via command list
    std::vector<IBus::BusCommand> commands ;

    commands.push_back(IBus::BusCommand(IBus::BUS_WRITE_SHORT, 0, 2)) ; // RO RESET=1
    commands.push_back(IBus::BusCommand(IBus::BUS_WAIT_MS, 10)) ;

    commands.push_back(IBus::BusCommand(IBus::BUS_WRITE_SHORT, 0, 0)) ; // RO RESET=0
    commands.push_back(IBus::BusCommand(IBus::BUS_WAIT_MS, 10)) ;

	...

    // Executes the list of commands as an atomic set
    return mSpi->commandsList(commands) ;
}

@endcode

Notice that the constructor tells the SPI bus the size of the shift register and location of the address bits and R/W bit. The SPI bus class
can then work out how to format the bytes in the messages.

The frequency set method (cutdown to simplify) uses the commandsList method of the SPI bus to perform an atomic set of instructions which are a list
of register writes and waits.

The important thing to note here is that this code uses an ISpiBus pointer and this SPI bus can be physically implemented in any number of ways
(e.g. a Linux driver, or a set of FPGA registers etc).


\subsection hardware_common_ibus_sec_2_7 Example SPI Device continued - I2c to SPI
<hr>

\image html i2c-to-spi-devices.png "Example devices using I2c to SPI conversion"

The figure above shows an example layout of some LMX2594 PLL devices connected to an SC18IS602B I2c to SPI bridge. The I2c to SPI bridge being connected to the
processor's I2c bus 0. We want to write the code that let's us access each of the LMX2594 devices, reusing the code we already wrote in the previous example
which drives an LMX2594 connected to an SPI bus.

\image html i2c-to-spi-i2c.png "I2c bus with bus lock"

First of all we need to create an IBusLock for the I2c bus 0 to ensure that any time we access I2c bus 0, we don't clash with another device.

@code
	std::shared_ptr<IBusLock> busLock( std::make_shared<BusLock>() ) ;
@endcode

Next we need to create an I2c bus (II2cBus) that uses this bus lock and that can then be passed to the SPI bus devices we're about to build. In this case
the I2c bus is using Linux drivers so we can create an instance of I2cBusLinux:

@code
    std::shared_ptr<IBusSettings> busSettings(std::make_shared<I2cBusSettings>()) ;
    std::shared_ptr<I2cBusLinux> i2c(std::make_shared<I2cBusLinux>("/dev/i2c-12", 0x2F, busLock, busSettings)) ;
@endcode

First note that all IBus objects need an IBusSettings object. At minimum these bus settings determine the order of the data as transferred over
the bus (i.e. MS bit first or LS bit first). For SPI busses, additional settings are used (such as the speed of the SPI lines etc).

Next notice that for Linux i2c busses, there will be a device path of the form "/dev/i2c-xx" used to access a particular device on the i2c bus. In all
cases there will be an i2c address (0x2F in this example).

\note This is a simplified example. In reality the device path ("/dev/i2c-xx") can change so we will actually be using an i2c device manager

\image html i2c-to-spi-spi.png "SPI bus instances"

Now we need to create the instances of the ISpi bus that will allow us access to the three LMX2594 devices. In this case we are working through
an I2c to SPI bridge, so we'll need to create instances of a special class II2cToSpiBus. This class is constructed with an II2cBus to perform the
physical communication, but appears to be an ISpiBus (and formats the data to the SPI bus properly). The I2cToSpiBus class is derived from a generic SpiBus
class (but can work with any I2c bus):

@code
    std::shared_ptr<Sc18is602bBusSettings> spiSettings(std::make_shared<Sc18is602bBusSettings>(i2c)) ;
    std::shared_ptr<I2cToSpiBus> spi0(std::make_shared<I2cToSpiBus>(i2c, spiSettings, 0)) ;
    std::shared_ptr<I2cToSpiBus> spi2(std::make_shared<I2cToSpiBus>(i2c, spiSettings, 2)) ;
    std::shared_ptr<I2cToSpiBus> spi3(std::make_shared<I2cToSpiBus>(i2c, spiSettings, 3)) ;

@endcode

Note again that each spi bus needs an IBusSettings instance. In this case we create a single instance of Sc18is602bBusSettings because the single bridge
chip settings apply to all of the spi busses. We have to give the settings an instance of the i2c bus so that the settings can be applied to the bridge chip
via the i2c bus.

We've created 3 instances of spi bus: one for each of the physical devices we want to talk to.

\image html i2c-to-spi-lmx2594.png "LMX2594 instances"

Finally we can now create the 3 LMX2594 devices and give them each one of the 3 ISpiBus instances we've just created. Even though these spi busses
are actuall I2c to SPI busses, they implement the ISpiBus api and so we can reuse the LMX2594 code with no changes.

@code
    std::shared_ptr<LMX2594> lmx2594_0(std::make_shared<LMX2594>(spi0)) ;
    std::shared_ptr<LMX2594> lmx2594_2(std::make_shared<LMX2594>(spi2)) ;
    std::shared_ptr<LMX2594> lmx2594_3(std::make_shared<LMX2594>(spi3)) ;

@endcode

\subsection hardware_common_ibus_sec_2_8 Debugging
<hr>

On host PC, running the application simulation will invoke the bus simulation models. The I2c bus has been modelled as an array of 256 register locations. There
are a set of registers for each I2c device path (so hopefully accessing one device shouldn't overwrite the data of another). I2c writes will write into these 256
locations, and reads will read back whatever is currently in the register locations (default is 0x00).

Also, all I2c transactions will be written to a log file at /tmp/<USER>/i2c/i2c.log

When you run the application sim you should see a banner of the form shown below. This will give the location of your log file:
@code
** I2C SIM: Check log file at /tmp/sprice/i2c/i2c.log **
@endcode

The log file will contain lines of the form:

@code
[09:40:13.167334] < Linux I2C : /dev/i2c-12 addr=47 > I2cBusLinux::doWriteShort wr a=0x2f off=0x1 [ 02 05 00 ]
[09:40:13.178914] < Linux I2C : /dev/i2c-12 addr=47 > I2cBusLinux::doWriteShort wr a=0x2f off=0x1 [ 01 08 08 ]
[09:40:13.190503] < Linux I2C : /dev/i2c-12 addr=47 > I2cBusLinux::doWriteShort wr a=0x2f off=0x1 [ 00 24 98 ]
[09:40:13.201797] < Linux I2C : /dev/i2c-12 addr=47 > I2cBusLinux::doWriteShort wr a=0x2f off=0x1 [ 00 24 98 ]
[09:44:23.036354] < Linux I2C : /dev/i2c-3 addr=52 > I2cBusLinux::doWriteShort wr a=0x34 off=0x8 val=0x0 [ 00 ]
[09:44:37.658300] < Linux I2C : /dev/i2c-3 addr=52 > I2cBusLinux::doWriteShort wr a=0x34 off=0x10 val=0x0 [ 00 ]
[09:44:37.658405] < Linux I2C : /dev/i2c-3 addr=52 > I2cBusLinux::doWriteShort wr a=0x34 off=0x11 val=0x0 [ 00 ]
[09:44:37.658465] < Linux I2C : /dev/i2c-3 addr=52 > I2cBusLinux::doWriteShort wr a=0x34 off=0x12 val=0x0 [ 00 ]

@endcode



*/
