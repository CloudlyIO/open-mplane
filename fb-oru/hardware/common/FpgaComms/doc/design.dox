/**
\mainpage Common Radio Hardware FPGA Communications Implementation
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_fpga_comms_scope Scope
<hr>

This document describes the classes created to communicate with FPGA-based embedded processors (which implement things like
DPD, PIM etc).

<hr>
\section hardware_fpga_comms_overview	Overview
<hr>

The fpga communications channel was originally created so that the processor could communicate with DPD software running
on a Xilinx microblaze FPGA embedded processor. The FPGA system provides a dual-port RAM which is accessible both the the
microblaze processor and the PowerPC. Uni-directional messages are passed between them using defined areas of memory.

This interface has been upgraded so that it now sends and receive messages over POSIC message queues provided by the Linux system.
This new interface makes the communications much more generic and portable across multiple applications and multiple platforms.

For those platforms where the POSIX message queue is not supported by the embedded processor (for example Xilinx microblaze) a "shim"
layer is added which provides the application with the same POSIX message queue interface, while actually implementing a platform-specific
communications layer.

<hr>
\section hardware_fpga_comms_sec_2 Details of Design
<hr>

\subsection hardware_fpga_comms_sec_2_1 Communications Interface
<hr>

@image html fpga-comms-mqueue.png "Message Queues"

The above diagram shows the main application and the embedded processor application communicating through two unidirectional POSIX message
queues. The embedded processor application controls the creation and deletion of these queues; the main application will just connect
to the queues qhen they becom available.

@image html fpga-comms-shim.png "Message Queues"

In those cases where it is not possible for the embedded processor to provide support of POSIX message queues, the above diagram shows
the use of a "shim" layer. One half of this layer runs in the main application and provides the message queue queue interface, emulating
the interface. The other half runs on the embedded processor, again emulating the message queue interface for the embedded application. How the
two halves of the shim layer communicate is then embedded platform specific and is transparent to either the main application or the embedded
application keeping that code common across platforms.

\subsection hardware_fpga_comms_sec_2_2 Message Format
<hr>

@image html fpga-comms-pdu.png "Protocol Data Unit"

Messages are transported inside PDUs in the data section, as shown above.

A PDU consists of a single byte type indicator, and a 16-bit length field which specifies the number of bytes in the data section. Note
that the length is stored with the MS part transmitted first in the PDU (as are all multi-byte values).

@image html fpga-comms-msg-text.png "Text Message Example"

Shown above is a simple TEXT message. The message types TEXT, LOG, and MATLAB use this simple format where the data is just the message
string (without any terminating NUL).

@image html fpga-comms-msg-command.png "Command Message Format"

Command messages are structured differently in that they must always start with a 16-bit command code, and are then optionally followed
by a number of variable/value sequences. The 16-bit "variable" part is actually the id code of a variable pre-determined before compilation
begins (see later section) such that both the main application and the embedded application can determine which variable is being referred to by this
code.

@image html fpga-comms-var-types.png "Variable Types"

Along with the variable name, the id code also allows the applications to determine the type of the variable. The variable type can be:
\li ENUM - enumerated type stored in a byte
\li INT - integer stored in 32-bits
\li FLOAT - float stored in 32-bits
\li COMPLEX - complex float stored in two 32-bit values



@image html fpga-comms-msg-reply.png "Reply Message Format"

Both the REPLY and the EVENT message types share the same format, as shown above. They consist of variable/value pairs (like the command)
which are used to transfer variable values back to the main application from the embedded application.


@image html fpga-comms-msg-classes.png "Creation of PDU to/from Msg"

PDUs are the lowest-level data, and they are created by a higher-level message. A message consists of text tokens, command names
etc. which must be converted into numeric identifiers and then have the PDU header added.

The Mplane::FpgaComms class handles the communication of these messages to and from the Microblaze processor. The class
is basically a wrapper class containing an instance of Mplane::FpgaCommsFromPpc (supporting channel 2),
and an instance of Mplane::FpgaCommsToPpc (supporting channel 1). In these classes they transfer the messages as an
Mplane::IFpgaMsg interface class. The IFpgaMsg interface provides methods for accessing the data and for converting
to/from the IFpgaPdu interface class.

Using these interfaces, the FpgaComms* classes can transfer the data without ever needing to know the data format or contents.

So, for communicating with a Microblaze running DPD, we create a DpdComms class derived from FpgaComms. This uses it's own
DpdMsg (which implements the IFpgaMsg interface) and has a DpdTokens class which knows the token strings and their values.
A similar set up will be used for PIM.

In this manner, the FpgaComms code is kept isolated from the details of the message content (making future changes to
the format easy).

@image html fpga-comms-reply-1.png "Registering a reply handler"

The microblaze processor can asynchronously send out log messages, and events. Also, replies to some commands are sent
after a variable delay. In order for the PPC application to use these asynchronous messages, a client class must register
a handler for one or more of the 3 reply types.

The reply handler is associated with an object address. Normally the address will be of the class's 'this' pointer, but
it can be any address (for example an object created to handle this message). Mplane::FpgaCommsToPpc keeps a map of
these addresses, so you can register as many handlers as you like as long as you use a different address for each.

The registered handler is actually in 2 parts: a message creation callback, and a message handler callback. The message creator
callback is responsible for creating a message object derived from IFpgaMsg. This object is then passed to the handler.

@image html fpga-comms-reply-2.png "Registering a reply handler"

The sequence is shown above, starting with an event PDU being received. The specific message object is created from the received PDU,
then used in the call to the handler .

Note that the above sequence is run in the FpgaCommsToPpc thread. To keep the comms responsive, it is important that operations
performed in the handler return quickly. If there is going to be a long delay then you should consider using buffering
(for example the Mplane::QueueBuffer).

@image html fpga-comms-ports.png "Using TCP ports"

The above reply callback mechanism is used in the TIF to provide a means of forwarding replies to one or more TCP ports.

The TCP port(s) need to first be opened such that any client can connect to them. You then need to specify that the particular
reply type will be sent to a tcp port. From then on, any time a reply of this type is received it will be forwarded
to any connected client(s) on those port(s) specified.

Note that you can send multiple reply types to the same port, and you can set up multiple ports to receive any reply type.


<hr>
\section hardware_fpga_comms_sec_6 Host Based Unit Tests
<hr>

This is the test section

<hr>
\subsection hardware_fpga_comms_ssec_1_1 Code Coverage Summary
<hr>

\include common/FpgaComms/test/coverage.txt

<hr>
\subsection hardware_fpga_comms_ssec_1_2 Unit Test Results
<hr>

\include common/FpgaComms/test/gtest.txt


*/
