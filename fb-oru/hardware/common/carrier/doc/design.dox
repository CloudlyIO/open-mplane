/**
\mainpage Common Carrier Data and Server Implementation
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_common_carrier_scope Scope
<hr>

This document describes the classes created to provide the carrier set/get functionality that sets up the hardware
with the specified enabled carriers.


<hr>
\section hardware_common_carrier_overview	Overview
<hr>

The carrier subsystem is split into several layers:

\li <b>Mplane::ICarrierServer</b> Manages lists of Mplane::ICarrier objects, allowing retrieval of a particular carrier via it's index
\li <b>Mplane::ICarrier</b> A generic carrier class that contains all of the information required to create a carrier of any
air standard (for any customer).
\li <b>Mplane::ICarrierModel</b> The carrier model is a hardware-specific model of the hardware that will be programmed to
have the carriers. The model needs to manage scheduling the requested carriers on to the hardware resources.
\li <b>Mplane::ICarrierHardware</b> Lowest level representation of a carrier. This class converts the generic values from
Mplane::ICarrier into hardware-specific values that are used to program up the hardware.



<hr>
\section hardware_common_carrier_sec_2 Details of Design
<hr>

@image html carrier-hardware.png

The Mplane::ICarrierModel provides an interface for the Mplane::ICarrierServer to update the hardware. The Mplane::ICarrierModel
provides an abstraction layer to the actual hardware. The class diagram above shows how an Mplane::ICarrierModel contains
a number of Mplane::ICarrierModelWorker objects. These worker objects perform the actual hardware interaction, assisted by
the Mplane::ICarrierHardware class.

When an Mplane::ICarrierHardware object is created, it is associated with a corresponding Mplane::ICarrier (i.e. has a pointer
to the ICarrier) such that the Mplane::ICarrier index is used to access the Mplane::ICarrierHardware

Each worker has access to an Mplane::ICarrierHardwareList which manages a list of Mplane::ICarierHardware objects.
This means that each worker can access any of the Mplane::ICarrierHardware objects simply by using it's carrier index
in a request to the Mplane::ICarrierHardwareList.



<hr>
\subsection hardware_common_carriersec_2_1 Class Responsibilities
<hr>

\li <b>Mplane::ICarrierModel</b> Provides the abstraction layer for Mplane::ICarrierServer to the hardware. Manages multiple
Mplane::ICarrierModelWorker objects, passing calls from Mplane::ICarrierServer down to the workers
\li <b>Mplane::ICarrierModelWorker</b> The model worker class is responsible for all the hardware set up not performed
by Mplane::ICarrierHardware. This means all those settings not related to a single carrier. Examples are: initialising
all of the chains, scheduling a carrier onto the chain hardware, calculating carrier weightings based on all currently
enabled carriers. Multiple workers are created, one worker per logical area. For example, there will be a worker just
for managing chains, another worker for calculating CPRI delays, and a further worker for calculating CFR data.
\li <b>Mplane::ICarrierModelWorker (list)</b> A special class of model worker whose sole focus is keeping the
Mplane::ICarrierHardwareList updated. Calls passed down from the Mplane::ICarrierServer get passed on to the carrier
hardware list to ensure the carrier hardware objects are updated.
\li <b>Mplane::ICarrierHardwareList</b> Manages a list of Mplane::ICarrierHardware objects. Allows model workers
to retrieve a carrier hardware object by using it's carrier index (or the equivalent carrier index of it's associated
Mplane::ICarrier object). All of the calls from the Mplane::ICarrierModel are passed to at least one Mplane::ICarrierHardware
object; some calls are passed to multiple carrier hardware objects (see @ref hardware_common_carriersec_2_3)
\li <b>Mplane::ICarrierHardware</b> Converts the Mplane::ICarrier settings into hardware-specific values that are written
to the hardware.

<hr>
\subsection hardware_common_carriersec_2_2 Object Use
<hr>

@image html carrier-hardware-objects.png

The diagram above shows an example use of the carrier objects. In this case it's for an Etna application.

The Mplane::ICarrierServer has a one-to-one relationship with the Mplane::ICarrierModel, it providing a unified interface
(FACADE pattern). When the Mplane::ICarrierModel object is created, various Mplane::ICarrierModelWorker objects are registered
with it (including one or more special worker that manages Mplane::ICarrierHardwareList).

All calls to the to the Mplane::ICarrierModel from the Mplane::ICarrierServer get passed down to the Mplane::ICarrierModelWorker
objects (unless one of the workers experiences an error, in which case the call is terminated and the error message from
the failing worker is made available to the carrier model). For full details see @ref hardware_common_carriersec_2_3.

The Mplane::ICarrierModelWorker that manages the Mplane::ICarrierHardwareList is always called first so that the corresponding
Mplane::ICarrierHardware (or any affected carrier hardware objects) can be updated before the other model workers
do any further operations on the hardware. Note, however, that all model workers have access to the Mplane::ICarrierHardwareList
instance. This allows any of them to access any of the Mplane::ICarrierHardware objects, either to change their settings
or to access their current values.

As stated earlier, for every Mplane::ICarrier managed by the Mplane::CarrierServer, there is a corresponding
Mplane::ICarrierHardware object. The Mplane::ICarrier carrier index is also used for the Mplane::ICarrierHardware and
the Mplane::ICarrierHardware object keeps a pointer to it's associated Mplane::ICarrier object so that it has access
to the current values.


<hr>
\subsection hardware_common_carriersec_2_3 Call Sequence
<hr>

@image html carrier-hardware-callseq.png

This diagram shows the objects and methods involved in changing a single carrier's properties via the setCarrier() method.
Note that, where the method is shown greyed out, it is merely an indication that I don't expect that object to perform
any actions for that particular method (it is a no op). However, all methods <b>are</b> called and any future version
of these objects may well need to perform some actions in the method.

When the Mplane::ICarrierServer::setCarrier() method is called, one of the first things it does is call the validateChange()
method on the Mplane::ICarrierModel object. If that method returns TRUE (i.e. the change is valid and can be performed),
then the Mplane::ICarrierServer calls the carrierChange() method of the model object.

The Mplane::ICarrierModel object manages a list of Mplane::ICarrierModelWorker objects. When one of the model's methods is
called, it passes the call down to each of it's workers. It is up to the individual worker instance as to whether it
needs to perform any actions in the method, or just returns immediately.

Most of the methods return a boolean indicating whether the call was successful or not. On failure the model retrieves
the worker's "fail reason" string and makes this string available to the carrier server.

A special instance of the workers just manages an Mplane::ICarrierHardwareList to pass the calls down to all of the
Mplane::ICarrierHardware objects. Any of these "worker lists" registered with the model are always put first in
the model's list to ensure they receive the calls before the "normal" workers.

As shown in the diagram, the first pass runs the validateChange() method of all of the workers. This means that any
of the workers can check the proposed carrier change and veto it if something is amiss. Note that the "worker list" passes
the proposed change down to the corresponding Mplane::ICarrierHardware object, which can also veto the change.

Assuming the change has been validated, when the carrier server calls the carrierChange() method on the model, the model
splits the call into 6 sub-calls:

<b>validateChange()</b>

The Mplane::ICarrier is passed to it's Mplane::ICarrierHardware and the other model workers to allow them to check the
proposed carrier settings. If there is any problem with the settings then this method returns false and none of the
subsequent operations are performed.

An example of the use of this method is to check that all the necessary parameters have been set on a carrier when it is
being enabled (for example, for a downlink carrier the TX frequency must be set etc).

<b>**IMPORTANT**</b> It's important to remember that the Mplane::ICarrierHardware related to this carrier has not yet been updated
and cannot be used for value checks.


<b>carrierChange()</b>

The Mplane::ICarrier is passed to it's Mplane::ICarrierHardware and the other model workers. Using the getXXXChanged()
methods of the Mplane::ICarrier, the other objects can determine which carrier setting changes they are interested in
and act accordingly.

Some of the workers may cause more Mplane::ICarrierHardware objects to be changed, for example when 2 or more carriers
are made active on an antenna then all of their carier weighting values need to be updated.

No hardware may be affected by this pass, it is simply for updating object data.

Note: This will set a "changed" flag in the affected Mplane::ICarrierHardware objects

<b>preUpdate()</b>

This method allows the Mplane::ICarrierHardware chance to disable any active TX if it is currently enabled and about to change.
The method is called for all changed Mplane::ICarrierHardware objects.

<b>updateHardware()</b>

This pass is intended to be where all the major hardware updates are performed, for example writing the carrier data, or
sending the CFR tables etc.
The method is called for all changed Mplane::ICarrierHardware objects.

<b>postUpdate()</b>

Allows Mplane::ICarrierHardware object to enable itself (if it is being enabled or had been temporarily disabled while changing)
The method is called for all changed Mplane::ICarrierHardware objects.


<b>changeComplete()</b>

Signals to all objects that the current carrier change is complete. This allows the Mplane::ICarrierHardware to clear it's
"changed" flag (for example).


<hr>
\subsection hardware_common_carriersec_2_4 Carrier Frequency
<hr>

The CarrierServer contains an instance of Mplane::CarrierFreqMgr. This object has the responsibility of managing the frequency allocation of
all activated carriers. Within the Mplane::CarrierFreqMgr it has an array of Mplane::CarrierFreqBand objects, one array for tx and one for rx
and each array representing each of the ports.

When a carrier is activated a new Mplane::CarrierFreq is added to the appropriate Mplane::CarrierFreqBand, and it is the responsibility of
the Mplane::CarrierFreqBand object to ensure that the newly added carrier frequency can fit within the current constraints (allowable carrier
minimum and maximum frequencies, LO settings etc). Assuming that the carrier can fit, the Mplane::CarrierFreqBand also calculates any changes
required to the corresponding LO.

Note that carrier activation is the act of setting a valid set of AxC containers for that carrier (either TX or RX). This means that the carrier can be disabled
but will still contribute to the frequency calculation if it has valid AxC settings.

The Mplane::CarrierFreqMgr applies changes to all appropriate Mplane::CarrierFreqBand objects, collects together any LO frequency changes and
applies those changes to the LOs, updating the CarrierHardware frequency settings as appropriate.

How the Mplane::CarrierFreqBand calculate the new LO frequency is determined by an Mplane::ICarrierFreqPolicy. This is a class which takes
information like the occupied bandwidth, current LO centre etc. and returns a new LO centre based on it's policy. The default policy is to calculate
an LO which is in the centre of the occupied band. But for other applications this policy can be modified by specifying a new policy object to
Mplane::CarrierFreqMgr (for example to set the RX LO to be set to either end of the band to exclude all DL carriers).

Policies are set by an individual CarrierServer for that application, and use the Mplane::CarrierFreqMgr methods:

@code
	virtual void setDlFrequencyPolicy(std::shared_ptr<IDlFrequencyPolicy> dlFreqPolicy) ;

	virtual void setUlFrequencyPolicy(std::shared_ptr<IUlFrequencyPolicy> ulFreqPolicy) ;
@endcode


<hr>
\subsection hardware_common_carriersec_2_5 Carrier Power
<hr>

In a similar manner to carrier frequency, carrier power is managed by an instance of Mplane::CarrierPowerMgr. This object has the responsibility of
managing the total TX power of all activated carriers. Within the Mplane::CarrierPowerMgr it has an array of Mplane::CarrierPowerPath objects, each entry
in the array representing a TX port.

When a carrier is activated a new Mplane::CarrierPowerPath is added to the total.

Again, carrier activation is when the carrier has it's TX AxC defined, so disabled carriers can contribute to the power total if they have valid AxC settings
(i.e. in the multi-carrier case)

<hr>
\section hardware_common_carrier_sec_4 Host Based Unit Tests
<hr>

This is the test section

<hr>
\subsection hardware_common_carrier_ssec_1_1 Code Coverage Summary
<hr>

\include common/carrier/test/coverage.txt

<hr>
\subsection hardware_common_carrier_ssec_1_2 Unit Test Results
<hr>

\include common/carrier/test/cppunit.txt


*/
