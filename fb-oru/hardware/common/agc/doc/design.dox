/**
\mainpage Common Radio Hardware RX AGC
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

<hr>
\section hardware_common_agc_scope Scope
<hr>

This document describes the classes created to implement the RX agc function.

<hr>
\section hardware_common_agc_overview	Overview
<hr>

\image html rxagc-hw.png "AGC Control In Receiver Lineup"

The AGC control is performed by logic in the fpga. As can be seen in the diagram above, the RFDSA is controlled by the fpga
to add/remove attenuation in order to keep the input signal within specific bounds. The fpga does this by monitoring the
ADC output and uses a table of thresholds/attenuations to work out whether to step up or down the attenuation.

The software is responsible for calculating this table and writing it to the fpga. The software is also responsible for
updating the table and re-writing when conditions change (frequency changes, temperature changes etc)

<hr>
\section hardware_common_agc_sec_2 Details of Design
<hr>

An RxAgc object is created for each RX port being managed. The fpga contains a table per RX port and the RxAgc classes
manage themselves so that the tables are updated correctly in the fpga.

The RxAgc class is an Observer for ITemperatureChange and IFrequencyChange subjects. When the appropriate update method is called due
to a change, the fpga table will be recalculated and rewritten. Note that any frequency change causes the table to be recalculated,
but there is a settable temperature hysteresis applied to temperature changes such that the change needs to be larger than the set hysteresis
level before a recalculation is triggered.

The fpga table contains the following fields (taken from the twiki page http://twiki.axisnt.co.uk/cgi-bin/twiki/view/Engineering/SwIfRxFeAttenControl):

\li <b>RF Attenuation Control Value</b> : This is the 5-bit attenuation control that will be sent to the actual RF attenuator. The controls are active low, just like the manual programming of the attenuator so the value written here is 31 - the target attenuation.

\li <b>ADC Next Level Threshold</b> : The FPGA compares the absolute value of the incoming ADC data for the Rx channel to this threshold. If this threshold is exceeded and the level is not at its maximum value, the FPGA will increment the current attenuation level for this channel and read the four configuration values associated with the next attenuation level.

\li <b>ADC Previous Level Threshold</b> : The FPGA compares the absolute value of the incoming ADC data for the Rx channel to this threshold. If this threshold is NOT exceeded for the number of airframes set by the Receiver Attenuation Frames Register and the level is not at its minimum value, the FPGA will decrement the current attenuation level for this channel and read the four configuration values associated with the previous attenuation level. A CLI parameter is used to set the number of frames and this value is programmed into the Receiver Attenuation Frames Register. If the FPGA detects the ADC data is under the threshold for the programmed number of frames it will transition to the previous attenuation at the start of the next downlink period.

\li <b>Digital Gain</b> : This is the digital gain in increments of 0.1 dB that is applied to the digital I/Q data between the output of the DDC and the input of the baseband interface to achieve the desired absolute I/Q level for a particular RF power level input.


\image html rxagc-thresholds.png "AGC Thresholds Calculation"

The threshold values are calculated based on the ADC levels. The upper threshold ("next level threshold") is based on the number of dBs below full scale
that you want to set the threshold at. The equation is then:

<b>upper_threshold = ADC_Fullscale * 10<SUP>(dB_below_FS / 20)</SUP></b>

And the lower threshold is the current CG step below the upper threshold. Note that the hysteresis value is added to the CG step
to drop the lower threshold:

<b>lower_threshold = upper_threshold / 10<SUP>( (CG + Hysteresis) / 20)</SUP></b>

The gain value programmed into the FPGA table is given by:

<b>gain = actual_attenuation - rx_point_adjust + attenuation_error + digital_gain - carrier_RSSI_gain</b>

This equation is based on the legacy code. The parameters are:

\li actual_attenuation - The CG step as defined in the cal file (see below)
\li rx_point_adjust - An adjustment value which can be applied to the AGC (default=0dB)
\li attenuation_error - The error between the ideal CG step and the actual attenuation applied (see below)
\li digital_gain - Can be set per AGC (default=0dB)
\li carrier_RSSI_gain - A constant stored in IRfConst that represents the digital gain in the carrier RSSI measurement logic (normally=6dB)

The actual attenuation value used in the above equation is calculated using the cal file's dBFS2dBm values. The first step, CG0,
forms the baseline value from which all the other steps are calculated as deltas.

So, for CG0:

<b>actual_attenuation<SUB>0</SUB> = desired_attenuation<SUB>0</SUB></b>
<b>baseline_dBFS2dBm<SUB>0</SUB> = dBFS2dBm<SUB>0</SUB></b>

And for all other CG steps:

<b>actual_attenuation<SUB>level</SUB> = (dBFS2dBm<SUB>level</SUB> - dBFS2dBm<SUB>0</SUB>) + desired_attenuation<SUB>0</SUB></b>

In other words, the delta between the current dBFS2dBm value and the CG0 dBFS2dBm value is calculated, and this is then added to the ideal
CG step attenuation for level 0.


\subsection hardware_common_agc_sec_2_1 Cal
<hr>

RxAgc uses the cal data virtual interface IAgcCal to get the CG steps required from the calibration file. It also uses
this interface to convert the requested CG step attenuation into an actual attenuation based on the cal file contents.

Generally, the IAgcCal interface is provided by RxAgcCalData and RxAgcCal which are derived from RxCalData and RxCal respectively.

An example of the new rxcal.xml file contents is:
@code
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE calibration SYSTEM "ftu_rx_cal.dtd">
<FTUCalibrationRx version="1" country="UK" facility="Swindon" operator="Jason">
	<RxOpenLoop comment="Calibration for Signal Analysis">
		<Path>1</Path>
		<Date>03/02/15 12:28:23.410</Date>
		<LinearTemperatureCompensation>
		<Coefficient units="dB/DegC">0.05</Coefficient>
		</LinearTemperatureCompensation>
		<FrequencyBand>
			<Upper>915000</Upper>
			<Lower>700000</Lower>
			<IFDSA>10.0</IFDSA>
			<FrequencyTable>
				<Frequency>700000</Frequency>
				<Temperature>25.7</Temperature>
				<Point>
					<RFDSA>1.0</RFDSA>
					<dBFS2dBm>-41.00</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>4.0</RFDSA>
					<dBFS2dBm>-38.20</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>10.0</RFDSA>
					<dBFS2dBm>--32.00</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>16.0</RFDSA>
					<dBFS2dBm>-26.10</dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>22.0</RFDSA>
					<dBFS2dBm>-20.20/dBFS2dBm>
				</Point>
				<Point>
					<RFDSA>28.0</RFDSA>
					<dBFS2dBm>-14.00</dBFS2dBm>
				</Point>
			</FrequencyTable>
...

@endcode

This sets up CG steps 1.0, 4.0, 10.0, 16.0, 22.0, and 28.0.

\subsection hardware_common_agc_sec_2_2 Updates
<hr>

The RX AGC object registers itself as an observer of both frequency and temperature changes on the corresponding RX port.
Any frequency change (i.e. where the frequency set is different from the previous frequency setting) will cause the AGC table
for this port to be re-written.

For temperature changes there is a temperature hysteresis value set on each RX AGC, and the temperature change needs to be greater
than or equal to this value before an update is triggered. Default is 2.0 degC

\subsection hardware_common_agc_sec_2_3 AGC Gain Offset
<hr>

Whenever either carrier or wideband RSSI is measured, account must be made of the current AGC attenuation level. This is returned by
the RxAgc object method getFeAdjustment(unsigned feLevel). What this does is uses the rxcal to look up the IF attenuation setting
for the current AGC attenuation. This value 'dBFS2dBm' (in dBm) is returned as the offset which must be added to the rssi value.

Note that the IF attenuation value is temperature compensated for the current temperature at the time of the measurement, compared
with the temperature stored in the cal file.

Also note that the IF attenuator can only be set in 0.5dB steps and so can't apply the
full temperature compensated value. The difference between the requested attenuation and the actual attenuation is available via the
'getAttenuationResidual' method of the attenuator.

Since the attenuation is lower than the required attenuation (assuming residual is positive), then this
residual value must subtracted from the RSSI reading to give the actual input.

<hr>
\section hardware_common_agc_sec_4 Host Based Unit Tests
<hr>

This is the test record section

<hr>
\subsection hardware_common_agc_ssec_1_1 Code Coverage Summary
<hr>

\include common/agc/test/coverage.txt

<hr>
\subsection hardware_common_agc_ssec_1_2 Unit Test Results
<hr>

\include common/agc/test/cppunit.txt

*/
