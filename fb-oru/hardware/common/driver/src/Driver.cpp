/*!
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * \file      Driver.cpp
 * \brief     Implementation of common Driver base class.
 *
 *
 * \details   Implementation of common Driver base class.
 *
 */


//=============================================================================================================
// INCLUDE
//=============================================================================================================

#include "Driver.h"

using namespace Mplane;

//=============================================================================================================
// CONSTANTS
//=============================================================================================================


//=============================================================================================================
// PUBLIC
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
Mplane::Driver::~Driver()
{
}


//-------------------------------------------------------------------------------------------------------------
std::string Mplane::Driver::getName() const
{
    return mName;
}


//=============================================================================================================
// PROTECTED
//=============================================================================================================

//-------------------------------------------------------------------------------------------------------------
std::shared_ptr<IRegData> Mplane::Driver::regData()
{
	return mRegData;
}
//-------------------------------------------------------------------------------------------------------------
Mplane::Driver::Driver(const std::string& name):
		mName( name ),
		mRegData( IRegData::singleton() )
{
}
