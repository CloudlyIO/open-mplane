/**
\mainpage Radio Hardware CPRI emulator implementation
<BR>
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>


<hr>
\section hardware_common_cpriemu_scope Scope
<hr>
This document describes the CPRI emulator which emulates the actions of the fpga cpri register interface

The CpriFibreEmu class provides emulation for a single fibre port, so one instance per fivre is required to be instantiated.

<hr>
\section hardware_common_cpriemu_usage	Usage
<hr>

The CpriFibreEmu is automatically created for each fibre when the host version of the full application is built. This means that
full application simulations will automatically have access to the features described below.

For smaller Google tests, you can instantiate your own instances and programmatically control that instance via it's methods.

\subsection hardware_common_cpriemu_usage_port TCP Port and Commands
<hr>

When instantiated, the CpriFibreEmu opens a tcp port suitable for telnetting to so that commands can be sent to it.

The port used is (55000 + fibre). So fibre0 will be at port 55000, fibre1 at 55001 etc.

Once connected you can use the following commands:

\li <b>show</b> - Display the current settings
\li <b>?</b> - Show help
\li <b>help</b> - Show help
\li <b>module [in|out]</b> - Set SFP module state
\li <b>fibre [in|out]</b> - Set fibre state
\li <b>sync [yes|no]</b> - Allow synchronisation or not
\li <b>remote rate</b> - Set the rate(s) supported by the remote end

The <b>module</b> and <b>fibre</b> commands are used to emulate the behaviour when the SFP module and fibre are pulled out or
plugged in. By default the emulator starts up with both plugged in, but this can be changed to simulate powering up
with the SFP or fibre disconnected (see below for more details).

The <b>sync</b> setting determines whether the emulator will cycle through the synchronisation stages or not. Note that it
only uses this setting on the next time the interface is "reset".

\subsection hardware_common_cpriemu_usage_cmd Command Line Variables
<hr>

As well as providing the telnet commands you can initialise the class using enviroment variables. The variable name is

@code
  CPRIEMUx
@endcode

where x is replaced with the fibre number.

The variable is set to a value which specifies one of more start up conditions. These are specified by a ';' separated list
of "commands", where each command is from the supported list shown above.

So, for example, to set up the second fibre emulator such that the module is pulled out, and the remote end supports only rate 5 and 7:

@code
  CPRIEMU1="module out;rate 0xa0"
@endcode


\subsection hardware_common_cpriemu_usage_fpga FPGA registers
<hr>

When the emulator class is instantiated, it takes over control of the following fpga registers:

\li 0x4x000 - Fibre Control
\li 0x4x204 - Preferred line rate
\li 0x4x210 - Current line rate
\li 0x4x20C - Fibre status
\li 0x4x238 - Remote alarms


\subsection hardware_common_cpriemu_usage_methods Methods
<hr>

The following methods are available for use in (google) tests:

@code
	virtual void pullFibre() ;
	virtual void pushFibre() ;
	virtual void pullModule() ;
	virtual void pushModule() ;
	virtual void syncAllow() ;
	virtual void syncProhibit() ;
	virtual void setRemoteRate(UINT16 rateBits) ;
@endcode

They are equivalent to the commands:

\li fibre out
\li fibre in
\li module in
\li module out
\li sync yes
\li sync no
\li rate XXX

*/
