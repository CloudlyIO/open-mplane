// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.

#include <TestClient.h>

#include <future>
#include <mutex>

class CommandProcessor {
public:
  CommandProcessor(std::shared_ptr<grpc::Channel> channel);
  ~CommandProcessor();

  /**
   * Execute a command (i.e. an mpclient RPC) and change the state of the
   * processor depending on the outcome. Pass by non-const value to dynamically
   * fill in session ID.
   */
  void processCommand(mpclient::CommandSequence::OneOf command);

  /**
   * Wait for all futures (generated by passively listening for notifications)
   * to become fulfilled. Has no effect if there are no active notification
   * listeners.
   */
  void waitForNotifications();

private:
  bool performConnect(mpclient::ConnectRequest *request);
  bool performListen(mpclient::ListenRequest *request);
  bool performDisconnect(mpclient::DisconnectRequest *request);
  bool performNetconfRpc(mpclient::NetconfRpcRequest *request);
  bool
  performStreamNotifications(mpclient::StreamNotificationsRequest *request);
  bool performStartSupervision(mpclient::StartSupervisionRequest *request);

  /**
   * Fill in authentication provided via command line flags.
   */
  void fillInAuth(mpclient::Authentication *auth) const;

  /**
   * Called to check that an RPC completed successfully. Logs an error if not.
   */
  template <typename ResponseType>
  bool
  checkMpclientRpcResponse(const std::optional<ResponseType> &response) const;

  /**
   * Called by commands which require an active session. Logs an error if the
   * session is not open.
   */
  bool checkSessionId() const;

  /**
   * Print YANG in a special way.
   */
  void printYang(const std::string &yang, const uint32_t commandNum) const;

  TestClient client_;
  int32_t numCommands_ = -1;

  /**
   * Holds the current session ID if there is an active session.
   */
  std::optional<uint32_t> sessionId_;

  /**
   * Mutex to control printing chunks of text to glog.
   */
  std::mutex loggingMutex_;

  /**
   * Keep track of futures with lifetimes exceeding their scope.
   */
  std::vector<std::future<void>> rpcFutures_;
};
