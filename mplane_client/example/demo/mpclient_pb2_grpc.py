# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mpclient_pb2 as mpclient__pb2


class MpclientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/mpclient.Mpclient/connect',
                request_serializer=mpclient__pb2.ConnectRequest.SerializeToString,
                response_deserializer=mpclient__pb2.ConnectResponse.FromString,
                )
        self.listen = channel.unary_stream(
                '/mpclient.Mpclient/listen',
                request_serializer=mpclient__pb2.ListenRequest.SerializeToString,
                response_deserializer=mpclient__pb2.ListenResponse.FromString,
                )
        self.disconnect = channel.unary_unary(
                '/mpclient.Mpclient/disconnect',
                request_serializer=mpclient__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=mpclient__pb2.DisconnectResponse.FromString,
                )
        self.netconfRpc = channel.unary_unary(
                '/mpclient.Mpclient/netconfRpc',
                request_serializer=mpclient__pb2.NetconfRpcRequest.SerializeToString,
                response_deserializer=mpclient__pb2.NetconfRpcResponse.FromString,
                )
        self.streamNotifications = channel.unary_stream(
                '/mpclient.Mpclient/streamNotifications',
                request_serializer=mpclient__pb2.StreamNotificationsRequest.SerializeToString,
                response_deserializer=mpclient__pb2.StreamNotificationsResponse.FromString,
                )
        self.startSupervision = channel.unary_unary(
                '/mpclient.Mpclient/startSupervision',
                request_serializer=mpclient__pb2.StartSupervisionRequest.SerializeToString,
                response_deserializer=mpclient__pb2.StartSupervisionResponse.FromString,
                )


class MpclientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request, context):
        """Connect mpclient to a NETCONF server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listen(self, request, context):
        """Listen for RUs to "Call Home"; a response is returned whenever a new
        connection is established
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disconnect(self, request, context):
        """Close the NETCONF session
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def netconfRpc(self, request, context):
        """Send a generic NETCONF RPC and get the result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamNotifications(self, request, context):
        """Get all notifications generated by the NETCONF session; subscribing to a
        NETCONF notification stream is done using netconfRpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startSupervision(self, request, context):
        """Subscribe to the supervision notification stream and attach a callback to
        perform watchdog reset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MpclientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=mpclient__pb2.ConnectRequest.FromString,
                    response_serializer=mpclient__pb2.ConnectResponse.SerializeToString,
            ),
            'listen': grpc.unary_stream_rpc_method_handler(
                    servicer.listen,
                    request_deserializer=mpclient__pb2.ListenRequest.FromString,
                    response_serializer=mpclient__pb2.ListenResponse.SerializeToString,
            ),
            'disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disconnect,
                    request_deserializer=mpclient__pb2.DisconnectRequest.FromString,
                    response_serializer=mpclient__pb2.DisconnectResponse.SerializeToString,
            ),
            'netconfRpc': grpc.unary_unary_rpc_method_handler(
                    servicer.netconfRpc,
                    request_deserializer=mpclient__pb2.NetconfRpcRequest.FromString,
                    response_serializer=mpclient__pb2.NetconfRpcResponse.SerializeToString,
            ),
            'streamNotifications': grpc.unary_stream_rpc_method_handler(
                    servicer.streamNotifications,
                    request_deserializer=mpclient__pb2.StreamNotificationsRequest.FromString,
                    response_serializer=mpclient__pb2.StreamNotificationsResponse.SerializeToString,
            ),
            'startSupervision': grpc.unary_unary_rpc_method_handler(
                    servicer.startSupervision,
                    request_deserializer=mpclient__pb2.StartSupervisionRequest.FromString,
                    response_serializer=mpclient__pb2.StartSupervisionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mpclient.Mpclient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mpclient(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mpclient.Mpclient/connect',
            mpclient__pb2.ConnectRequest.SerializeToString,
            mpclient__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mpclient.Mpclient/listen',
            mpclient__pb2.ListenRequest.SerializeToString,
            mpclient__pb2.ListenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mpclient.Mpclient/disconnect',
            mpclient__pb2.DisconnectRequest.SerializeToString,
            mpclient__pb2.DisconnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def netconfRpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mpclient.Mpclient/netconfRpc',
            mpclient__pb2.NetconfRpcRequest.SerializeToString,
            mpclient__pb2.NetconfRpcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def streamNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mpclient.Mpclient/streamNotifications',
            mpclient__pb2.StreamNotificationsRequest.SerializeToString,
            mpclient__pb2.StreamNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startSupervision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mpclient.Mpclient/startSupervision',
            mpclient__pb2.StartSupervisionRequest.SerializeToString,
            mpclient__pb2.StartSupervisionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
