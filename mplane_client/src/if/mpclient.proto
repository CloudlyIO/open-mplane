// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.

syntax = "proto3";

package mpclient;

message KeyPair {
  string publicPath = 1;
  string privatePath = 2;
}

message Authentication {
  string user = 1;
  repeated KeyPair keys = 2;
  optional string password = 3;
}

message ConnectRequest {
  string host = 1;
  uint32 port = 2;
  Authentication auth = 3;
}

message ConnectResponse {
  bool success = 1;
  optional uint32 sessionId = 2;
}

message ListenRequest {
  string host = 1;
  uint32 port = 2;
  Authentication auth = 3;
  uint32 timeoutSec = 4;
}

message ListenResponse {
  uint32 sessionId = 1;
  string host = 2;
  uint32 port = 3;
}

message DisconnectRequest {
  uint32 sessionId = 1;
}

message DisconnectResponse {
  bool success = 1;
}

message NetconfRpcRequest {
  uint32 sessionId = 1;
  string serializedYang = 2;
  uint32 timeoutSec = 3;
}

message NetconfRpcResponse {
  enum Status {
    // A reply was received from the NETCONF server; there is a result whose
    // type is specified in "returnType"
    SUCCESS = 0;

    // There was a timeout either sending the RPC to the NETCONF server or
    // receiving a reply from the NETCONF server; there is no result, and it
    // cannot be determined with the present information whether the RPC
    // actually ran
    TIMEOUT = 1;

    // There was an error communicating with the NETCONF server or the NETCONF
    // server had a problem understanding the RPC; there is no result, and it
    // cannot be determined with the present information whether the RPC
    // actually ran
    ERROR = 2;

    // The session ID was not found in the mpclient session table, so there was
    // no communication with the NETCONF server
    INVALID_SESSION = 3;
  }
  enum ReturnType {
    // The RPC returned with no data (basically "void" or "unit")
    OK = 0;

    // The RPC returned with some data formatted in serialized YANG
    DATA = 1;

    // The RPC returned with an error formatted in serialized YANG
    RPC_ERROR = 2;
  }
  Status status = 1;
  optional ReturnType returnType = 2; // Only set when status == SUCCESS
  optional string message = 3; // Only set when returnType == DATA or RPC_ERROR
}

message StreamNotificationsRequest {
  uint32 sessionId = 1;
}

message StreamNotificationsResponse {
  // Contents of a notification are serialized YANG
  string serializedYang = 1;
}

message StartSupervisionRequest {
  uint32 sessionId = 1;
}

message StartSupervisionResponse {
  bool success = 1;
}

// Wrapper to facilitate input to the client specifying a sequence of commands
message CommandSequence {
  message OneOf {
    oneof data {
      ConnectRequest connect = 1;
      ListenRequest listen = 2;
      DisconnectRequest disconnect = 3;
      NetconfRpcRequest netconfRpc = 4;
      StreamNotificationsRequest streamNotifications = 5;
      StartSupervisionRequest startSupervision = 6;
    }
  }
  repeated OneOf commands = 1;
}

service Mpclient {
  // Connect mpclient to a NETCONF server
  rpc connect (ConnectRequest) returns (ConnectResponse) {}

  // Listen for RUs to "Call Home"; a response is returned whenever a new
  // connection is established
  rpc listen (ListenRequest) returns (stream ListenResponse) {}

  // Close the NETCONF session
  rpc disconnect (DisconnectRequest) returns (DisconnectResponse) {}

  // Send a generic NETCONF RPC and get the result
  rpc netconfRpc (NetconfRpcRequest) returns (NetconfRpcResponse) {}

  // Get all notifications generated by the NETCONF session; subscribing to a
  // NETCONF notification stream is done using netconfRpc
  rpc streamNotifications (StreamNotificationsRequest) returns (stream StreamNotificationsResponse) {}

  // Subscribe to the supervision notification stream and attach a callback to
  // perform watchdog reset
  rpc startSupervision (StartSupervisionRequest) returns (StartSupervisionResponse) {}
}
