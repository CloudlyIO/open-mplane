// (c) Facebook, Inc. and its affiliates. Confidential and proprietary.

#pragma once

#include "NetconfSession.h"

#include "mpclient.grpc.pb.h"

#include <map>
#include <shared_mutex>

class MpclientImpl final : public mpclient::Mpclient::Service {
public:
  explicit MpclientImpl();

  /**
   * Implementation of connect RPC; directly connect to a NETCONF server.
   */
  grpc::Status connect(grpc::ServerContext *context,
                       const mpclient::ConnectRequest *request,
                       mpclient::ConnectResponse *response) override;

  /**
   * Implementation of listen RPC; listen for a NETCONF server to Call Home and
   * then establish a connection.
   */
  grpc::Status
  listen(grpc::ServerContext *context, const mpclient::ListenRequest *request,
         grpc::ServerWriter<mpclient::ListenResponse> *writer) override;

  /**
   * Implementation of disconnect RPC; close the connection to the NETCONF
   * server.
   */
  grpc::Status disconnect(grpc::ServerContext *context,
                          const mpclient::DisconnectRequest *request,
                          mpclient::DisconnectResponse *response);

  /**
   * Implementation of netconfRpc RPC; send an arbitrary YANG-encoded NETCONF
   * RPC and return the result.
   */
  grpc::Status netconfRpc(grpc::ServerContext *context,
                          const mpclient::NetconfRpcRequest *request,
                          mpclient::NetconfRpcResponse *response) override;

  /**
   * Implementation of the subscribe RPC; sends all notifications generated by
   * the session.
   */
  grpc::Status
  streamNotifications(grpc::ServerContext *context,
                      const mpclient::StreamNotificationsRequest *request,
                      grpc::ServerWriter<mpclient::StreamNotificationsResponse>
                          *writer) override;

  /**
   * Implementation of the startSupervision RPC; makes a subscription to the
   * supervision notification stream and attaches a callback to reset the
   * watchdog.
   */
  grpc::Status
  startSupervision(grpc::ServerContext *context,
                   const mpclient::StartSupervisionRequest *request,
                   mpclient::StartSupervisionResponse *response) override;

private:
  /**
   * Add a session to the internal table. Returns the ID of the new session.
   */
  uint32_t addSession(std::shared_ptr<NetconfSession> session);

  /**
   * Remove a session from the internal table. Returns the session. Since the
   * session can theoretically take a long time to shut down, it is best to
   * delete the session after it is removed from the table so that the exclusive
   * lock is not tied up and preventing other processes from making progress.
   */
  std::shared_ptr<NetconfSession> removeSession(const uint32_t sessionId);

  std::map<uint32_t, std::shared_ptr<NetconfSession>> sessions_;
  uint32_t sessionsCounter_ = 0;
  std::shared_mutex sessionsMutex_;
};
