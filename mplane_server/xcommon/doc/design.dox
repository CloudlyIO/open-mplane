/**
\mainpage Cross-platform Common OS and Data Services Component Design Document
\anchor _home
<CENTER>
\
Copyright (c) Meta Platforms, Inc. and affiliates.
</CENTER>

This document is a design overview document for the collection of classes that
makeup the cross-platform common data and operating system type services available to the
radio application developer.

Details of the design and the use of its classes can be found in the
documentation pages under the <b>Related Pages</b> tab.

Table of Contents

\ref common_Key_sec_2
\n
\ref common_Features_sec_3
\n
\ref common_WaveFile_sec_4
\n

<hr>
<hr>
\section common_Key_sec_2 License Key
<hr>
<hr>
\ref _home "Go to top of page"

We've opted for a simple key exchange system, rather than going the Diffie-Hellman route. The key exchange is initiated at the PC end
which uses board information to create 128bit key based on the CART/ART hardware and serial number.

A common class Key is provided for both PC and embedded application use. This Key class has a shared private key that is used
to encode the license key and convert it into a public string:

@image html key-set-new.png "License Key Creation"

On the PC, an example of the code used to set the key up is:

@code
	// use tif command '.license.key.getInfo' to get the board's serial number and hostid
	std:string serialNum ;
	std::string boardHostid ;
	std::string myHostid ;

	// use the key factory to create the key based on this information
	// NOTE: passing in 'myHostid' is for future use only - at the moment it is not used
	std::shared_ptr<IKey> key(IKey::factory(serialNum, hostid, myHostid)) ;
	if (!key)
		// handle error

	// can interrogate key to be sure it's set
	if (!key->isSet())
		// handle error

	// Get the public key string
	std::string encodedKey(key->encodedKey()) ;

	// send the key string to the unit (tif command '.license.key.setKey')

@endcode

In the embedded application, the public key string will be stored in the U-Boot environment. Initially, however,
with no environment setting, the public key string from the embedded code will not match that on the PC. Using tif
commands the PC can interrogate the unit for it's current public key string and the PC then knows that it needs to set the key:

@image html key-set-check.png "License Key Checking"

The PC uses tif commands to set the key on the unit. The public key is passed into the Key class in the embedded application, and this
class handles converting this public key into the license key used to encrypt playback wave files. The embedded code
will also save the public key string into U-Boot environment ready for the next time the unit power cycles:

@image html key-set-set.png "License Key Set"

In use, there are actually two keys: an application-specific key that uses the board serial number to generate a key specific
to that board, and a "global" key which uses a fixed public key string (and so needs no external setting).

The waveform playback test model files are encrypted using the global key so that we only need one set of encrypted files which will
then work on any board. However, the feature bits are encrypted using the application-specific key to ensure that each feature
setting is specific to a particular licensed board.

<hr>
<hr>
\section common_Feature_sec_3 Supported Features
<hr>
<hr>
\ref _home "Go to top of page"

In order to support licensed features, where certain features can only be used if they've been enabled via licensing,
a new Feature class has been created.

Before it can be used, the license key must be set up (see \ref common_Key_sec_2 for details), and then set in the
Feature class. The intention is that the PC software will interpret the license file (which will contain a license line
for each enabled feature) and use this information to enable the features in the Feature class.

@image html feature-set-new.png "Feature Creation"

Once the PC has enabled the appropriate features, the Feature class can return a public encoded features string which
can be sent to the embedded software on the unit (which will then use the same Feature class to set itself up).

@image html feature-set-send.png "Feature Send To Unit"

Feature enabling can be done using either the defined bit constants in IFeature::FeatureTypes, or can use string names
(use the names presented by the Feature::show() method).

In the embedded software, a feature can be checked as being enabled by using the checkSupported() method with the feature
name string.

Example PC code is:

@code
	// Set up IKey
	std::string flexNet ;
	std::shared_ptr<IKey> key(IKey::factory()) ;
	key->setLicenseKey(flexNet) ;

	// Use the factory method to create the feature...
	std::shared_ptr<IFeature> feature(IFeature::factory(key)) ;

	// ..then enable the supported features by bit or by name
	feature->enableFeature("LTE_TDD_TM") ;
	feature->enableFeature(IFeature::FeatureType::LTE_TDD_TM) ;

	// Get the public string to use to send to the unit
	std::string encoded(feature->encodeFeatures()) ;

@endcode

The supported feature bits match up with the playback waveform test model file names, and are used to check to see if the application
is enabled for a particular playback file.

The general format for test model files is:

@code
    <AIRSTD>_<DUPLEX>_<BW>_<TM>_<RATE>
@endcode

And DUPLEX can be:

@code
    <DUPLEX>-<CELL ID>
@endcode

The <TM> part of the filename can be of the form "TM31" for test models, or of the form "FRCA3-4" for RX BER tests. Some examples of
valid filenames are:

@code
	LTE_FDD-1_10M_TM31_15.36MSPS.art
	LTE_TDD38_10M_RXTM11_15.36MSPS.art
	LTE_TDD38-1_10M_TM31_15.36MSPS.art
	LTE_TDD38-1_20M_TM31_30.72MSPS.art
	LTE_TDD38_5M_RXTM11_7.68MSPS.art
	LTE_TDD38-1_5M_TM31_7.68MSPS.art
    LTE_FDD-1_5M_FRCA3-4_7.68MSPS.art
@endcode

The current list of feature bits that can be enabled is:

\li LTE_FDD_TM		- LTE FDD test model
\li LTE_TDD_TM		- LTE TDD test model
\li LTE_FDD_FRCA	- LTE FDD RX BER
\li LTE_TDD_FRCA	- LTE TDD RX BER


<hr>
<hr>
\section common_WaveFile_sec_4 Waveform File Format
<hr>
<hr>
\ref _home "Go to top of page"

The waveform file classes provide methods for handling both capture and playback waveform files. Both file types
have a common header and data structure. Each file type has it's own class that can be used in either
embedded (Linux) applications or PC (Windows) applications.

The two file types are described in more detail below.

<hr>
\subsection common_WaveFile_sec_4_1 Capture Waveform File
<hr>

@image html wave-encryption-playback-receive.png "Playback Wave File Decapsulation"



Both capture and playback wave files have a common header (using a field to indicate whether the file is capture or playback)
followed by one or more blocks of data. Capture files have a single block consisting of the block header along with the raw IQ data.

Data blocks also support other data formats (for more details see \ref common_WaveFile_sec_4_2)

@image html wave-encryption-capture-format.png "Capture Wave File Format"

The image above shows the format of the eaveform capture file, showing the common header structure, and the common
data block header structure.

The file header is common between formats up to the "DATA START" field, the following being the common fields:

\li "WAVE" - All waveform files start with the "magic" 32-bit word 0x57415645 (which is ascii for "WAVE")
\li DATA TYPE - Byte code which specifies whether this is a playback file (0x42 'B') or a capture file (0x43 'C')
\li HEAD VER - Header version byte
\li DATA START - 16-bit pointer to the start of the first data block. This is actually an offset in bytes from the
end of DATA START.

NOTE: It's important to note that in the headers, all values of more than 8bits are stored in BIG ENDIAN mode - i.e.
the MS byte is stored before the LS byte. So, for example, a DATA START value of 4 bytes would be stored as 0x00 0x04 in that
order in the file.

The capture file specific fields come after the common header. These fields are:

\li WAVE INDEX - byte containing the waveform index count (e.g. w2 would have index=2)
\li SAMPLE RATE - 24bit value containing the sample rate (in Ksps) of the captured data

Moving on to the data block, every block of data has it's own short header. The header tells receiving code
how to treat the data. The block header is:

\li TYPE - 8bit coding of the data type. Data can be RAW (i.e. just IQ data), ENCRYPTED (data is encrypted using
the license key for this unit), or COMPRESSED (data is also LZO compressed). The ENCRYPTED and COMPRESSED types can
be combined.
\li BLOCK LEN - This is the size of this data block in bytes.

For capture files, they only have the one data block of type RAW, so the BLOCK LEN defines the complete length of the IQ data

The following diagram shows the capture file annotated with the field sizes:

@image html wave-encryption-capture-sizes.png "Capture Wave Field Sizes"

<hr>
\subsection common_WaveFile_sec_4_2 Playback Waveform File
<hr>

Playback files use the same common header and data block header as capture files. However, here the playback data
<b>will</b> be encrypted and may be compressed (if that reduces the data block size. Also, the IQ data is split into
multiple data blocks (nominally in chunks of 8k bytes, but then processed).

The playback file specific header fields are:

\li PLAYBACK SHA-1 - A 160bit SHA1 value used to ensure that the data and filename are authentic and have not
been changed (e.g. by copying a protected file in order to try to get around the feature protection)

\li SAMPLE RATE - 24bit sample rate (in Ksps) same as for capture files (currently this is not used)

The file format for playback wave files is:

@image html wave-encryption-playback-format.png "Playback Wave File Format"

In order for a playback IQ data to be sent from a PC to the unit, it must first be "encapsulated" into the playback
file format. This process is shown in the diagram below:

@image html wave-encryption-playback-send.png "Playback Wave File Encapsulation"

The license for a CART (or other) unit must be used for data encryption. A Key class is created and passed to the
PlaybackWaveFile class. This class is used to create the encapsulated data that contains the file and block headers
along with encrypting/compressing the data. This data can then be stored (temporarily?) in a transfer site for the
CART to download.

An example of the code running on a PC to do this is:

@code
	bool readFile(const std::string& path, std::vector<uint8_t>& data)
	{
		std::ifstream file(path, std::ios::in | std::ios::binary | std::ios::ate) ;
		if (!file)
			return(false);
		std::streamsize size(file.tellg()) ;
		file.seekg(0, std::ios::beg) ;

		data.resize(size) ;
		if (!file.read((char *)data.data(), size))
			return(false);

		return true ;
	}


	// Get file data
	std::vector<uint8_t> inData ;
	readFile(inPath, inData) ;

	// Create license key
	std::shared_ptr<IKey> key(IKey::factory()) ;
	if (!key->setLicenseKey(LICENSE))
		return ;

	// Create playback wave object instance - assign key to use
	PlaybackWave pbWave(key) ;

	// Convert raw data into a saved playback wave file
	if (!pbWave.encapsulate(basename, inData, outPath))
		std::cerr << pbWave.getError() ;

@endcode

At the unit end, it uses the PlaybackWaveFile class (again with a Key class) to read the data and decrypt/decompress
it in  blocks suitable to be written into the waveform playback hardware.

@image html wave-encryption-playback-receive.png "Playback Wave File Decapsulation"




<!-- ******************************************************************************************* -->

*/
